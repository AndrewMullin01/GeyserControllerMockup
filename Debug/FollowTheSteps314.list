
C:\Users\Andrew\Desktop\FollowTheSteps314\Debug\FollowTheSteps314.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000328  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003a8  200003a8  00020080  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bfd7  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004881  00000000  00000000  0004c085  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000137f2  00000000  00000000  00050906  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001088  00000000  00000000  000640f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002440  00000000  00000000  00065180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c7d5  00000000  00000000  000675c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005e5a  00000000  00000000  00073d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00079bef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004318  00000000  00000000  00079c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0007df84  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0007e008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062ec 	.word	0x080062ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080062ec 	.word	0x080062ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpun>:
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d102      	bne.n	8000b24 <__aeabi_dcmpun+0x10>
 8000b1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x20>
 8000b2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0001 	mov.w	r0, #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2iz>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d215      	bcs.n	8000b76 <__aeabi_d2iz+0x36>
 8000b4a:	d511      	bpl.n	8000b70 <__aeabi_d2iz+0x30>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d912      	bls.n	8000b7c <__aeabi_d2iz+0x3c>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b66:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d105      	bne.n	8000b88 <__aeabi_d2iz+0x48>
 8000b7c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	bf08      	it	eq
 8000b82:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_d2uiz>:
 8000b90:	004a      	lsls	r2, r1, #1
 8000b92:	d211      	bcs.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d211      	bcs.n	8000bbe <__aeabi_d2uiz+0x2e>
 8000b9a:	d50d      	bpl.n	8000bb8 <__aeabi_d2uiz+0x28>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d40e      	bmi.n	8000bc4 <__aeabi_d2uiz+0x34>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d102      	bne.n	8000bca <__aeabi_d2uiz+0x3a>
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	4770      	bx	lr
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	4770      	bx	lr

08000bd0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_InitTick+0x24>)
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_InitTick+0x28>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
{
 8000bd6:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
{
 8000bdc:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000bde:	0998      	lsrs	r0, r3, #6
 8000be0:	f000 fcd6 	bl	8001590 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000be4:	4621      	mov	r1, r4
 8000be6:	2200      	movs	r2, #0
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 fc8e 	bl	800150c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	bd10      	pop	{r4, pc}
 8000bf4:	20000010 	.word	0x20000010
 8000bf8:	10624dd3 	.word	0x10624dd3

08000bfc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x20>)
{
 8000bfe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	6813      	ldr	r3, [r2, #0]
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 fc6d 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_InitTick>
  HAL_MspInit();
 8000c14:	f003 fd2c 	bl	8004670 <HAL_MspInit>
}
 8000c18:	2000      	movs	r0, #0
 8000c1a:	bd08      	pop	{r3, pc}
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000c20:	4a02      	ldr	r2, [pc, #8]	; (8000c2c <HAL_IncTick+0xc>)
 8000c22:	6813      	ldr	r3, [r2, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000dc 	.word	0x200000dc

08000c30 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000c30:	4b01      	ldr	r3, [pc, #4]	; (8000c38 <HAL_GetTick+0x8>)
 8000c32:	6818      	ldr	r0, [r3, #0]
}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200000dc 	.word	0x200000dc

08000c3c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c3c:	b530      	push	{r4, r5, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c42:	f7ff fff5 	bl	8000c30 <HAL_GetTick>
  uint32_t wait = Delay;
 8000c46:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c48:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000c4a:	4605      	mov	r5, r0
  {
     wait++;
 8000c4c:	bf18      	it	ne
 8000c4e:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c50:	f7ff ffee 	bl	8000c30 <HAL_GetTick>
 8000c54:	1b40      	subs	r0, r0, r5
 8000c56:	42a0      	cmp	r0, r4
 8000c58:	d3fa      	bcc.n	8000c50 <HAL_Delay+0x14>
  {
  }
}
 8000c5a:	b003      	add	sp, #12
 8000c5c:	bd30      	pop	{r4, r5, pc}
 8000c5e:	bf00      	nop

08000c60 <HAL_ADC_ConvCpltCallback>:
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop

08000c64 <HAL_ADC_ConvHalfCpltCallback>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c6c:	6802      	ldr	r2, [r0, #0]
{
 8000c6e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c70:	6893      	ldr	r3, [r2, #8]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d002      	beq.n	8000c80 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000c80:	6811      	ldr	r1, [r2, #0]
 8000c82:	07c9      	lsls	r1, r1, #31
 8000c84:	d5f9      	bpl.n	8000c7a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000c86:	6891      	ldr	r1, [r2, #8]
 8000c88:	f001 010d 	and.w	r1, r1, #13
 8000c8c:	2901      	cmp	r1, #1
 8000c8e:	d009      	beq.n	8000ca4 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000c92:	f042 0210 	orr.w	r2, r2, #16
 8000c96:	6442      	str	r2, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c98:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	6482      	str	r2, [r0, #72]	; 0x48
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8000ca4:	6893      	ldr	r3, [r2, #8]
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6093      	str	r3, [r2, #8]
 8000cae:	6011      	str	r1, [r2, #0]
 8000cb0:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000cb2:	f7ff ffbd 	bl	8000c30 <HAL_GetTick>
 8000cb6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	07db      	lsls	r3, r3, #31
 8000cbe:	d5dc      	bpl.n	8000c7a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000cc0:	f7ff ffb6 	bl	8000c30 <HAL_GetTick>
 8000cc4:	1b40      	subs	r0, r0, r5
 8000cc6:	2802      	cmp	r0, #2
 8000cc8:	d9f6      	bls.n	8000cb8 <ADC_Disable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e7ce      	b.n	8000c7c <ADC_Disable+0x10>
 8000cde:	bf00      	nop

08000ce0 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ce0:	6802      	ldr	r2, [r0, #0]
{
 8000ce2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ce4:	6893      	ldr	r3, [r2, #8]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d00d      	beq.n	8000d0a <ADC_Enable+0x2a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000cee:	6891      	ldr	r1, [r2, #8]
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <ADC_Enable+0x70>)
 8000cf2:	4219      	tst	r1, r3
 8000cf4:	d00e      	beq.n	8000d14 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	6443      	str	r3, [r0, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6483      	str	r3, [r0, #72]	; 0x48
      return HAL_ERROR;
 8000d06:	2001      	movs	r0, #1
 8000d08:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	07d9      	lsls	r1, r3, #31
 8000d0e:	d5ee      	bpl.n	8000cee <ADC_Enable+0xe>
  return HAL_OK;
 8000d10:	2000      	movs	r0, #0
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8000d14:	6893      	ldr	r3, [r2, #8]
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6093      	str	r3, [r2, #8]
 8000d1c:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();  
 8000d1e:	f7ff ff87 	bl	8000c30 <HAL_GetTick>
 8000d22:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d24:	e004      	b.n	8000d30 <ADC_Enable+0x50>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d26:	f7ff ff83 	bl	8000c30 <HAL_GetTick>
 8000d2a:	1b40      	subs	r0, r0, r5
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d804      	bhi.n	8000d3a <ADC_Enable+0x5a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	07db      	lsls	r3, r3, #31
 8000d36:	d5f6      	bpl.n	8000d26 <ADC_Enable+0x46>
 8000d38:	e7ea      	b.n	8000d10 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d3c:	f043 0310 	orr.w	r3, r3, #16
 8000d40:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}
 8000d4e:	bf00      	nop
 8000d50:	8000003f 	.word	0x8000003f

08000d54 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d54:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000d56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	6443      	str	r3, [r0, #68]	; 0x44
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000d5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6483      	str	r3, [r0, #72]	; 0x48
  HAL_ADC_ErrorCallback(hadc); 
 8000d66:	f7ff bf7f 	b.w	8000c68 <HAL_ADC_ErrorCallback>
 8000d6a:	bf00      	nop

08000d6c <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000d6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000d6e:	f7ff bf79 	b.w	8000c64 <HAL_ADC_ConvHalfCpltCallback>
 8000d72:	bf00      	nop

08000d74 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d74:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000d76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d78:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000d7c:	d118      	bne.n	8000db0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d80:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d88:	68ca      	ldr	r2, [r1, #12]
 8000d8a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000d8e:	d10c      	bne.n	8000daa <ADC_DMAConvCplt+0x36>
 8000d90:	69da      	ldr	r2, [r3, #28]
 8000d92:	b952      	cbnz	r2, 8000daa <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d9e:	04d2      	lsls	r2, r2, #19
 8000da0:	d403      	bmi.n	8000daa <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000da4:	f042 0201 	orr.w	r2, r2, #1
 8000da8:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_ADC_ConvCpltCallback(hadc); 
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff bf58 	b.w	8000c60 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4718      	bx	r3
 8000db6:	bf00      	nop

08000db8 <HAL_ADC_Init>:
{
 8000db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dba:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	f000 809d 	beq.w	8000f00 <HAL_ADC_Init+0x148>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000dc8:	f013 0310 	ands.w	r3, r3, #16
 8000dcc:	4604      	mov	r4, r0
 8000dce:	d117      	bne.n	8000e00 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 8087 	beq.w	8000ee6 <HAL_ADC_Init+0x12e>
 8000dd8:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000dda:	6891      	ldr	r1, [r2, #8]
 8000ddc:	00c9      	lsls	r1, r1, #3
 8000dde:	d576      	bpl.n	8000ece <HAL_ADC_Init+0x116>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000de0:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000de2:	008f      	lsls	r7, r1, #2
 8000de4:	d473      	bmi.n	8000ece <HAL_ADC_Init+0x116>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000de6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000de8:	06ce      	lsls	r6, r1, #27
 8000dea:	d400      	bmi.n	8000dee <HAL_ADC_Init+0x36>
 8000dec:	b163      	cbz	r3, 8000e08 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8000dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000df0:	f023 0312 	bic.w	r3, r3, #18
 8000df4:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8000df8:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000dfc:	b017      	add	sp, #92	; 0x5c
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e00:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000e02:	06db      	lsls	r3, r3, #27
 8000e04:	d4f3      	bmi.n	8000dee <HAL_ADC_Init+0x36>
 8000e06:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e08:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000e0a:	f010 0004 	ands.w	r0, r0, #4
 8000e0e:	d1ee      	bne.n	8000dee <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8000e10:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000e12:	f421 7181 	bic.w	r1, r1, #258	; 0x102
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e16:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000e1a:	f041 0102 	orr.w	r1, r1, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e1e:	bf08      	it	eq
 8000e20:	4b65      	ldreq	r3, [pc, #404]	; (8000fb8 <HAL_ADC_Init+0x200>)
    ADC_STATE_CLR_SET(hadc->State,
 8000e22:	6461      	str	r1, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e24:	bf18      	it	ne
 8000e26:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 8000e2a:	9301      	str	r3, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e2c:	6893      	ldr	r3, [r2, #8]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	f000 809c 	beq.w	8000f70 <HAL_ADC_Init+0x1b8>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e38:	9901      	ldr	r1, [sp, #4]
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e3a:	688b      	ldr	r3, [r1, #8]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d060      	beq.n	8000f06 <HAL_ADC_Init+0x14e>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e44:	495d      	ldr	r1, [pc, #372]	; (8000fbc <HAL_ADC_Init+0x204>)
 8000e46:	6865      	ldr	r5, [r4, #4]
 8000e48:	688b      	ldr	r3, [r1, #8]
 8000e4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e4e:	432b      	orrs	r3, r5
 8000e50:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e52:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8000e54:	68e1      	ldr	r1, [r4, #12]
 8000e56:	68a3      	ldr	r3, [r4, #8]
 8000e58:	69e6      	ldr	r6, [r4, #28]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e5c:	2f01      	cmp	r7, #1
 8000e5e:	ea43 0301 	orr.w	r3, r3, r1
 8000e62:	bf18      	it	ne
 8000e64:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8000e68:	ea43 3346 	orr.w	r3, r3, r6, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6c:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000e6e:	ea40 0003 	orr.w	r0, r0, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e72:	f000 8086 	beq.w	8000f82 <HAL_ADC_Init+0x1ca>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d002      	beq.n	8000e82 <HAL_ADC_Init+0xca>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	4318      	orrs	r0, r3
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e82:	6893      	ldr	r3, [r2, #8]
 8000e84:	f013 0f0c 	tst.w	r3, #12
 8000e88:	d10b      	bne.n	8000ea2 <HAL_ADC_Init+0xea>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e8a:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e8e:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e90:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e94:	005b      	lsls	r3, r3, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e96:	f021 0102 	bic.w	r1, r1, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000e9a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e9e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000ea0:	4318      	orrs	r0, r3
    MODIFY_REG(hadc->Instance->CFGR,
 8000ea2:	68d5      	ldr	r5, [r2, #12]
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_ADC_Init+0x208>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ea6:	6921      	ldr	r1, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000ea8:	402b      	ands	r3, r5
 8000eaa:	4303      	orrs	r3, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000eac:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8000eae:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000eb0:	d06f      	beq.n	8000f92 <HAL_ADC_Init+0x1da>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000eb2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	64a0      	str	r0, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ec0:	f023 0303 	bic.w	r3, r3, #3
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000eca:	b017      	add	sp, #92	; 0x5c
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8000ece:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ed0:	f023 0312 	bic.w	r3, r3, #18
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64a3      	str	r3, [r4, #72]	; 0x48
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ee2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ee4:	e783      	b.n	8000dee <HAL_ADC_Init+0x36>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	6485      	str	r5, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ee8:	6505      	str	r5, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000eea:	64c5      	str	r5, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000eec:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000ef0:	f003 fbfc 	bl	80046ec <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ef4:	6822      	ldr	r2, [r4, #0]
 8000ef6:	6893      	ldr	r3, [r2, #8]
 8000ef8:	00de      	lsls	r6, r3, #3
 8000efa:	d508      	bpl.n	8000f0e <HAL_ADC_Init+0x156>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	462b      	mov	r3, r5
 8000efe:	e76c      	b.n	8000dda <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8000f00:	2001      	movs	r0, #1
}
 8000f02:	b017      	add	sp, #92	; 0x5c
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f06:	680b      	ldr	r3, [r1, #0]
 8000f08:	07d9      	lsls	r1, r3, #31
 8000f0a:	d4a2      	bmi.n	8000e52 <HAL_ADC_Init+0x9a>
 8000f0c:	e79a      	b.n	8000e44 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8000f0e:	4620      	mov	r0, r4
 8000f10:	f7ff feac 	bl	8000c6c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f14:	6c62      	ldr	r2, [r4, #68]	; 0x44
        tmp_hal_status = ADC_Disable(hadc);
 8000f16:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f18:	06d0      	lsls	r0, r2, #27
 8000f1a:	f53f af5d 	bmi.w	8000dd8 <HAL_ADC_Init+0x20>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f47f af5a 	bne.w	8000dd8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8000f24:	6c60      	ldr	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f26:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f28:	4926      	ldr	r1, [pc, #152]	; (8000fc4 <HAL_ADC_Init+0x20c>)
 8000f2a:	4d27      	ldr	r5, [pc, #156]	; (8000fc8 <HAL_ADC_Init+0x210>)
 8000f2c:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8000f32:	f020 0002 	bic.w	r0, r0, #2
 8000f36:	f040 0002 	orr.w	r0, r0, #2
 8000f3a:	6460      	str	r0, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f3c:	6890      	ldr	r0, [r2, #8]
 8000f3e:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8000f42:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f44:	fba5 0101 	umull	r0, r1, r5, r1
 8000f48:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f4a:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f50:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f52:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000f56:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f58:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8000f5a:	9900      	ldr	r1, [sp, #0]
 8000f5c:	2900      	cmp	r1, #0
 8000f5e:	f43f af3c 	beq.w	8000dda <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8000f62:	9900      	ldr	r1, [sp, #0]
 8000f64:	3901      	subs	r1, #1
 8000f66:	9100      	str	r1, [sp, #0]
          while(wait_loop_index != 0U)
 8000f68:	9900      	ldr	r1, [sp, #0]
 8000f6a:	2900      	cmp	r1, #0
 8000f6c:	d1f9      	bne.n	8000f62 <HAL_ADC_Init+0x1aa>
 8000f6e:	e734      	b.n	8000dda <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f70:	6813      	ldr	r3, [r2, #0]
 8000f72:	07dd      	lsls	r5, r3, #31
 8000f74:	f53f af6d 	bmi.w	8000e52 <HAL_ADC_Init+0x9a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f78:	9901      	ldr	r1, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f7a:	2900      	cmp	r1, #0
 8000f7c:	f43f af62 	beq.w	8000e44 <HAL_ADC_Init+0x8c>
 8000f80:	e75b      	b.n	8000e3a <HAL_ADC_Init+0x82>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f82:	b976      	cbnz	r6, 8000fa2 <HAL_ADC_Init+0x1ea>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f86:	3b01      	subs	r3, #1
 8000f88:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
 8000f8c:	f443 3080 	orr.w	r0, r3, #65536	; 0x10000
 8000f90:	e771      	b.n	8000e76 <HAL_ADC_Init+0xbe>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f92:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000f94:	6a23      	ldr	r3, [r4, #32]
 8000f96:	f021 010f 	bic.w	r1, r1, #15
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	430b      	orrs	r3, r1
 8000f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa0:	e78b      	b.n	8000eba <HAL_ADC_Init+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000fa4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fa8:	f043 0320 	orr.w	r3, r3, #32
 8000fac:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	64a3      	str	r3, [r4, #72]	; 0x48
 8000fb6:	e75e      	b.n	8000e76 <HAL_ADC_Init+0xbe>
 8000fb8:	50000100 	.word	0x50000100
 8000fbc:	50000300 	.word	0x50000300
 8000fc0:	fff0c007 	.word	0xfff0c007
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	431bde83 	.word	0x431bde83

08000fcc <HAL_ADC_Start_DMA>:
{
 8000fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fd0:	6803      	ldr	r3, [r0, #0]
 8000fd2:	689c      	ldr	r4, [r3, #8]
 8000fd4:	f014 0404 	ands.w	r4, r4, #4
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_BUSY;
 8000fda:	2402      	movs	r4, #2
}
 8000fdc:	4620      	mov	r0, r4
 8000fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hadc);
 8000fe2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	4605      	mov	r5, r0
 8000fea:	d0f6      	beq.n	8000fda <HAL_ADC_Start_DMA+0xe>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000fec:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80010d4 <HAL_ADC_Start_DMA+0x108>
 8000ff0:	f8d9 6008 	ldr.w	r6, [r9, #8]
    __HAL_LOCK(hadc);
 8000ff4:	2701      	movs	r7, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000ff6:	f016 061f 	ands.w	r6, r6, #31
    __HAL_LOCK(hadc);
 8000ffa:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000ffe:	d005      	beq.n	800100c <HAL_ADC_Start_DMA+0x40>
      __HAL_UNLOCK(hadc);
 8001000:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8001004:	463c      	mov	r4, r7
}
 8001006:	4620      	mov	r0, r4
 8001008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800100c:	4690      	mov	r8, r2
 800100e:	460f      	mov	r7, r1
      tmp_hal_status = ADC_Enable(hadc);
 8001010:	f7ff fe66 	bl	8000ce0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001014:	4604      	mov	r4, r0
 8001016:	2800      	cmp	r0, #0
 8001018:	d13d      	bne.n	8001096 <HAL_ADC_Start_DMA+0xca>
        ADC_STATE_CLR_SET(hadc->State,
 800101a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800101c:	6829      	ldr	r1, [r5, #0]
 800101e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	646b      	str	r3, [r5, #68]	; 0x44
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800102c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001030:	06d8      	lsls	r0, r3, #27
 8001032:	d033      	beq.n	800109c <HAL_ADC_Start_DMA+0xd0>
 8001034:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8001038:	d030      	beq.n	800109c <HAL_ADC_Start_DMA+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800103c:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <HAL_ADC_Start_DMA+0xf8>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800103e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001042:	4291      	cmp	r1, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001044:	646b      	str	r3, [r5, #68]	; 0x44
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001046:	d037      	beq.n	80010b8 <HAL_ADC_Start_DMA+0xec>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001048:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800104a:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_ADC_Start_DMA+0xfc>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800104e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001052:	bf1c      	itt	ne
 8001054:	6cab      	ldrne	r3, [r5, #72]	; 0x48
 8001056:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800105a:	64ab      	str	r3, [r5, #72]	; 0x48
        __HAL_UNLOCK(hadc);
 800105c:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_ADC_Start_DMA+0x100>)
        __HAL_UNLOCK(hadc);
 8001060:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001064:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001066:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_ADC_Start_DMA+0x104>)
 800106a:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800106c:	231c      	movs	r3, #28
 800106e:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001070:	684b      	ldr	r3, [r1, #4]
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001078:	68ce      	ldr	r6, [r1, #12]
 800107a:	f046 0601 	orr.w	r6, r6, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800107e:	4643      	mov	r3, r8
 8001080:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001082:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001084:	3140      	adds	r1, #64	; 0x40
 8001086:	f000 fae7 	bl	8001658 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800108a:	682a      	ldr	r2, [r5, #0]
 800108c:	6893      	ldr	r3, [r2, #8]
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6093      	str	r3, [r2, #8]
 8001094:	e7a2      	b.n	8000fdc <HAL_ADC_Start_DMA+0x10>
        __HAL_UNLOCK(hadc);
 8001096:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
 800109a:	e79f      	b.n	8000fdc <HAL_ADC_Start_DMA+0x10>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800109c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800109e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80010a2:	646b      	str	r3, [r5, #68]	; 0x44
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010a4:	68cb      	ldr	r3, [r1, #12]
 80010a6:	019a      	lsls	r2, r3, #6
 80010a8:	d5ce      	bpl.n	8001048 <HAL_ADC_Start_DMA+0x7c>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80010ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b4:	646b      	str	r3, [r5, #68]	; 0x44
 80010b6:	e7c7      	b.n	8001048 <HAL_ADC_Start_DMA+0x7c>
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	019b      	lsls	r3, r3, #6
 80010c0:	d5c2      	bpl.n	8001048 <HAL_ADC_Start_DMA+0x7c>
 80010c2:	e7f2      	b.n	80010aa <HAL_ADC_Start_DMA+0xde>
 80010c4:	50000100 	.word	0x50000100
 80010c8:	08000d75 	.word	0x08000d75
 80010cc:	08000d6d 	.word	0x08000d6d
 80010d0:	08000d55 	.word	0x08000d55
 80010d4:	50000300 	.word	0x50000300

080010d8 <HAL_ADC_ConfigChannel>:
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	4603      	mov	r3, r0
 80010dc:	b097      	sub	sp, #92	; 0x5c
  __HAL_LOCK(hadc);
 80010de:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
  __IO uint32_t wait_loop_index = 0U;
 80010e2:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 80010e4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80010e6:	9000      	str	r0, [sp, #0]
  __HAL_LOCK(hadc);
 80010e8:	d047      	beq.n	800117a <HAL_ADC_ConfigChannel+0xa2>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ea:	681a      	ldr	r2, [r3, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80010ec:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010ee:	6895      	ldr	r5, [r2, #8]
  __HAL_LOCK(hadc);
 80010f0:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010f2:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 80010f4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010f8:	d508      	bpl.n	800110c <HAL_ADC_ConfigChannel+0x34>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010fc:	f042 0220 	orr.w	r2, r2, #32
 8001100:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001108:	b017      	add	sp, #92	; 0x5c
 800110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank < 5U)
 800110c:	6848      	ldr	r0, [r1, #4]
 800110e:	2804      	cmp	r0, #4
 8001110:	d936      	bls.n	8001180 <HAL_ADC_ConfigChannel+0xa8>
    else if (sConfig->Rank < 10U)
 8001112:	2809      	cmp	r0, #9
 8001114:	d871      	bhi.n	80011fa <HAL_ADC_ConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->SQR2,
 8001116:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800111a:	0040      	lsls	r0, r0, #1
 800111c:	381e      	subs	r0, #30
 800111e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001120:	680d      	ldr	r5, [r1, #0]
 8001122:	271f      	movs	r7, #31
 8001124:	4087      	lsls	r7, r0
 8001126:	ea26 0607 	bic.w	r6, r6, r7
 800112a:	fa05 f000 	lsl.w	r0, r5, r0
 800112e:	4330      	orrs	r0, r6
 8001130:	6350      	str	r0, [r2, #52]	; 0x34
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001132:	6890      	ldr	r0, [r2, #8]
 8001134:	f010 0f0c 	tst.w	r0, #12
 8001138:	d133      	bne.n	80011a2 <HAL_ADC_ConfigChannel+0xca>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800113a:	2d09      	cmp	r5, #9
 800113c:	d94f      	bls.n	80011de <HAL_ADC_ConfigChannel+0x106>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800113e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8001142:	3f1e      	subs	r7, #30
 8001144:	6990      	ldr	r0, [r2, #24]
 8001146:	688e      	ldr	r6, [r1, #8]
 8001148:	f04f 0e07 	mov.w	lr, #7
 800114c:	fa0e fe07 	lsl.w	lr, lr, r7
 8001150:	ea20 000e 	bic.w	r0, r0, lr
 8001154:	40be      	lsls	r6, r7
 8001156:	4330      	orrs	r0, r6
 8001158:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800115a:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 800115c:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800115e:	694f      	ldr	r7, [r1, #20]
 8001160:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001164:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8001166:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001168:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 800116c:	2e03      	cmp	r6, #3
 800116e:	f200 80cf 	bhi.w	8001310 <HAL_ADC_ConfigChannel+0x238>
 8001172:	e8df f006 	tbb	[pc, r6]
 8001176:	747e      	.short	0x747e
 8001178:	606a      	.short	0x606a
  __HAL_LOCK(hadc);
 800117a:	2002      	movs	r0, #2
}
 800117c:	b017      	add	sp, #92	; 0x5c
 800117e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->SQR1,
 8001180:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001184:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001186:	680d      	ldr	r5, [r1, #0]
 8001188:	0040      	lsls	r0, r0, #1
 800118a:	271f      	movs	r7, #31
 800118c:	4087      	lsls	r7, r0
 800118e:	ea26 0607 	bic.w	r6, r6, r7
 8001192:	fa05 f000 	lsl.w	r0, r5, r0
 8001196:	4330      	orrs	r0, r6
 8001198:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800119a:	6890      	ldr	r0, [r2, #8]
 800119c:	f010 0f0c 	tst.w	r0, #12
 80011a0:	d0cb      	beq.n	800113a <HAL_ADC_ConfigChannel+0x62>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011a2:	6890      	ldr	r0, [r2, #8]
 80011a4:	f000 0003 	and.w	r0, r0, #3
 80011a8:	2801      	cmp	r0, #1
 80011aa:	d014      	beq.n	80011d6 <HAL_ADC_ConfigChannel+0xfe>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011ac:	2c01      	cmp	r4, #1
 80011ae:	f000 8093 	beq.w	80012d8 <HAL_ADC_ConfigChannel+0x200>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011b2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80011b6:	2001      	movs	r0, #1
 80011b8:	40a8      	lsls	r0, r5
 80011ba:	ea21 0100 	bic.w	r1, r1, r0
 80011be:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011c2:	2d10      	cmp	r5, #16
 80011c4:	f000 8083 	beq.w	80012ce <HAL_ADC_ConfigChannel+0x1f6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011c8:	2d11      	cmp	r5, #17
 80011ca:	f000 809c 	beq.w	8001306 <HAL_ADC_ConfigChannel+0x22e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80011ce:	2d12      	cmp	r5, #18
 80011d0:	d059      	beq.n	8001286 <HAL_ADC_ConfigChannel+0x1ae>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d2:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80011d4:	e795      	b.n	8001102 <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d6:	6810      	ldr	r0, [r2, #0]
 80011d8:	07c0      	lsls	r0, r0, #31
 80011da:	d5e7      	bpl.n	80011ac <HAL_ADC_ConfigChannel+0xd4>
 80011dc:	e7f9      	b.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011de:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80011e2:	6950      	ldr	r0, [r2, #20]
 80011e4:	688e      	ldr	r6, [r1, #8]
 80011e6:	2707      	movs	r7, #7
 80011e8:	fa07 f70e 	lsl.w	r7, r7, lr
 80011ec:	ea20 0007 	bic.w	r0, r0, r7
 80011f0:	fa06 f60e 	lsl.w	r6, r6, lr
 80011f4:	4330      	orrs	r0, r6
 80011f6:	6150      	str	r0, [r2, #20]
 80011f8:	e7af      	b.n	800115a <HAL_ADC_ConfigChannel+0x82>
    else if (sConfig->Rank < 15U)
 80011fa:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80011fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001200:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8001204:	d80b      	bhi.n	800121e <HAL_ADC_ConfigChannel+0x146>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001206:	383c      	subs	r0, #60	; 0x3c
 8001208:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800120a:	680d      	ldr	r5, [r1, #0]
 800120c:	271f      	movs	r7, #31
 800120e:	4087      	lsls	r7, r0
 8001210:	ea26 0607 	bic.w	r6, r6, r7
 8001214:	fa05 f000 	lsl.w	r0, r5, r0
 8001218:	4330      	orrs	r0, r6
 800121a:	6390      	str	r0, [r2, #56]	; 0x38
 800121c:	e789      	b.n	8001132 <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800121e:	385a      	subs	r0, #90	; 0x5a
 8001220:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8001222:	680d      	ldr	r5, [r1, #0]
 8001224:	271f      	movs	r7, #31
 8001226:	4087      	lsls	r7, r0
 8001228:	ea26 0607 	bic.w	r6, r6, r7
 800122c:	fa05 f000 	lsl.w	r0, r5, r0
 8001230:	4330      	orrs	r0, r6
 8001232:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001234:	e77d      	b.n	8001132 <HAL_ADC_ConfigChannel+0x5a>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001236:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8001238:	4e6d      	ldr	r6, [pc, #436]	; (80013f0 <HAL_ADC_ConfigChannel+0x318>)
 800123a:	403e      	ands	r6, r7
 800123c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001240:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8001244:	4338      	orrs	r0, r7
 8001246:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8001248:	e7ab      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800124a:	6e97      	ldr	r7, [r2, #104]	; 0x68
 800124c:	4e68      	ldr	r6, [pc, #416]	; (80013f0 <HAL_ADC_ConfigChannel+0x318>)
 800124e:	403e      	ands	r6, r7
 8001250:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001254:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8001258:	4338      	orrs	r0, r7
 800125a:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 800125c:	e7a1      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR2               ,
 800125e:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8001260:	4e63      	ldr	r6, [pc, #396]	; (80013f0 <HAL_ADC_ConfigChannel+0x318>)
 8001262:	403e      	ands	r6, r7
 8001264:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001268:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 800126c:	4338      	orrs	r0, r7
 800126e:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8001270:	e797      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xca>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001272:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8001274:	4e5e      	ldr	r6, [pc, #376]	; (80013f0 <HAL_ADC_ConfigChannel+0x318>)
 8001276:	403e      	ands	r6, r7
 8001278:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800127c:	f046 4700 	orr.w	r7, r6, #2147483648	; 0x80000000
 8001280:	4338      	orrs	r0, r7
 8001282:	6610      	str	r0, [r2, #96]	; 0x60
      break;
 8001284:	e78d      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xca>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001286:	495b      	ldr	r1, [pc, #364]	; (80013f4 <HAL_ADC_ConfigChannel+0x31c>)
 8001288:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800128a:	024c      	lsls	r4, r1, #9
 800128c:	d4a1      	bmi.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800128e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001292:	bf0c      	ite	eq
 8001294:	4958      	ldreq	r1, [pc, #352]	; (80013f8 <HAL_ADC_ConfigChannel+0x320>)
 8001296:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
 800129a:	9101      	str	r1, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800129c:	6891      	ldr	r1, [r2, #8]
 800129e:	f001 0103 	and.w	r1, r1, #3
 80012a2:	2901      	cmp	r1, #1
 80012a4:	d05d      	beq.n	8001362 <HAL_ADC_ConfigChannel+0x28a>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012a6:	9801      	ldr	r0, [sp, #4]
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012a8:	6881      	ldr	r1, [r0, #8]
 80012aa:	f001 0103 	and.w	r1, r1, #3
 80012ae:	2901      	cmp	r1, #1
 80012b0:	d05e      	beq.n	8001370 <HAL_ADC_ConfigChannel+0x298>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012b2:	2d10      	cmp	r5, #16
 80012b4:	d074      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0x2c8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012b6:	2d11      	cmp	r5, #17
 80012b8:	f000 808f 	beq.w	80013da <HAL_ADC_ConfigChannel+0x302>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012bc:	2d12      	cmp	r5, #18
 80012be:	d188      	bne.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80012c0:	494c      	ldr	r1, [pc, #304]	; (80013f4 <HAL_ADC_ConfigChannel+0x31c>)
 80012c2:	688a      	ldr	r2, [r1, #8]
 80012c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012c8:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2000      	movs	r0, #0
 80012cc:	e719      	b.n	8001102 <HAL_ADC_ConfigChannel+0x2a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012ce:	4949      	ldr	r1, [pc, #292]	; (80013f4 <HAL_ADC_ConfigChannel+0x31c>)
 80012d0:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012d2:	020f      	lsls	r7, r1, #8
 80012d4:	d5db      	bpl.n	800128e <HAL_ADC_ConfigChannel+0x1b6>
 80012d6:	e77c      	b.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012d8:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80012dc:	40ac      	lsls	r4, r5
 80012de:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e0:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012e2:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e6:	d92e      	bls.n	8001346 <HAL_ADC_ConfigChannel+0x26e>
        MODIFY_REG(hadc->Instance->SMPR2,
 80012e8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80012ec:	688e      	ldr	r6, [r1, #8]
 80012ee:	6994      	ldr	r4, [r2, #24]
 80012f0:	f1a0 011b 	sub.w	r1, r0, #27
 80012f4:	2707      	movs	r7, #7
 80012f6:	408f      	lsls	r7, r1
 80012f8:	fa06 f001 	lsl.w	r0, r6, r1
 80012fc:	ea24 0107 	bic.w	r1, r4, r7
 8001300:	4301      	orrs	r1, r0
 8001302:	6191      	str	r1, [r2, #24]
 8001304:	e75d      	b.n	80011c2 <HAL_ADC_ConfigChannel+0xea>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001306:	493b      	ldr	r1, [pc, #236]	; (80013f4 <HAL_ADC_ConfigChannel+0x31c>)
 8001308:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800130a:	01ce      	lsls	r6, r1, #7
 800130c:	d5bf      	bpl.n	800128e <HAL_ADC_ConfigChannel+0x1b6>
 800130e:	e760      	b.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001310:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8001312:	06a8      	lsls	r0, r5, #26
 8001314:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001318:	4286      	cmp	r6, r0
 800131a:	d037      	beq.n	800138c <HAL_ADC_ConfigChannel+0x2b4>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800131c:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800131e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001322:	42b0      	cmp	r0, r6
 8001324:	d02d      	beq.n	8001382 <HAL_ADC_ConfigChannel+0x2aa>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001326:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8001328:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800132c:	42b0      	cmp	r0, r6
 800132e:	d032      	beq.n	8001396 <HAL_ADC_ConfigChannel+0x2be>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001330:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
 8001332:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001336:	42b0      	cmp	r0, r6
 8001338:	f47f af33 	bne.w	80011a2 <HAL_ADC_ConfigChannel+0xca>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800133c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 800133e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001342:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001344:	e72d      	b.n	80011a2 <HAL_ADC_ConfigChannel+0xca>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001346:	1c68      	adds	r0, r5, #1
 8001348:	688e      	ldr	r6, [r1, #8]
 800134a:	6954      	ldr	r4, [r2, #20]
 800134c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8001350:	2707      	movs	r7, #7
 8001352:	408f      	lsls	r7, r1
 8001354:	fa06 f001 	lsl.w	r0, r6, r1
 8001358:	ea24 0107 	bic.w	r1, r4, r7
 800135c:	4301      	orrs	r1, r0
 800135e:	6151      	str	r1, [r2, #20]
 8001360:	e732      	b.n	80011c8 <HAL_ADC_ConfigChannel+0xf0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001362:	6811      	ldr	r1, [r2, #0]
 8001364:	07c8      	lsls	r0, r1, #31
 8001366:	d406      	bmi.n	8001376 <HAL_ADC_ConfigChannel+0x29e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001368:	9801      	ldr	r0, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800136a:	2800      	cmp	r0, #0
 800136c:	d0a1      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x1da>
 800136e:	e79b      	b.n	80012a8 <HAL_ADC_ConfigChannel+0x1d0>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001370:	6801      	ldr	r1, [r0, #0]
 8001372:	07c9      	lsls	r1, r1, #31
 8001374:	d59d      	bpl.n	80012b2 <HAL_ADC_ConfigChannel+0x1da>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001376:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001378:	f042 0220 	orr.w	r2, r2, #32
 800137c:	645a      	str	r2, [r3, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 800137e:	2001      	movs	r0, #1
 8001380:	e6bf      	b.n	8001102 <HAL_ADC_ConfigChannel+0x2a>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001382:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001384:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001388:	6656      	str	r6, [r2, #100]	; 0x64
 800138a:	e7cc      	b.n	8001326 <HAL_ADC_ConfigChannel+0x24e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800138c:	6e16      	ldr	r6, [r2, #96]	; 0x60
 800138e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 8001392:	6616      	str	r6, [r2, #96]	; 0x60
 8001394:	e7c2      	b.n	800131c <HAL_ADC_ConfigChannel+0x244>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001396:	6e96      	ldr	r6, [r2, #104]	; 0x68
 8001398:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
 800139c:	6696      	str	r6, [r2, #104]	; 0x68
 800139e:	e7c7      	b.n	8001330 <HAL_ADC_ConfigChannel+0x258>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013a0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80013a4:	f47f af15 	bne.w	80011d2 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013a8:	4912      	ldr	r1, [pc, #72]	; (80013f4 <HAL_ADC_ConfigChannel+0x31c>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013aa:	4c14      	ldr	r4, [pc, #80]	; (80013fc <HAL_ADC_ConfigChannel+0x324>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013ac:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ae:	4814      	ldr	r0, [pc, #80]	; (8001400 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013b4:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b6:	220a      	movs	r2, #10
 80013b8:	6821      	ldr	r1, [r4, #0]
 80013ba:	fbb1 f1f0 	udiv	r1, r1, r0
 80013be:	fb02 f201 	mul.w	r2, r2, r1
 80013c2:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80013c4:	9a00      	ldr	r2, [sp, #0]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	f43f af03 	beq.w	80011d2 <HAL_ADC_ConfigChannel+0xfa>
            wait_loop_index--;
 80013cc:	9a00      	ldr	r2, [sp, #0]
 80013ce:	3a01      	subs	r2, #1
 80013d0:	9200      	str	r2, [sp, #0]
          while(wait_loop_index != 0U)
 80013d2:	9a00      	ldr	r2, [sp, #0]
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	d1f9      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x2f4>
 80013d8:	e6fb      	b.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80013da:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80013de:	f47f aef8 	bne.w	80011d2 <HAL_ADC_ConfigChannel+0xfa>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80013e2:	4904      	ldr	r1, [pc, #16]	; (80013f4 <HAL_ADC_ConfigChannel+0x31c>)
 80013e4:	688a      	ldr	r2, [r1, #8]
 80013e6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013ea:	608a      	str	r2, [r1, #8]
 80013ec:	e6f1      	b.n	80011d2 <HAL_ADC_ConfigChannel+0xfa>
 80013ee:	bf00      	nop
 80013f0:	83fff000 	.word	0x83fff000
 80013f4:	50000300 	.word	0x50000300
 80013f8:	50000100 	.word	0x50000100
 80013fc:	20000010 	.word	0x20000010
 8001400:	000f4240 	.word	0x000f4240

08001404 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001404:	4603      	mov	r3, r0
 8001406:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001408:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 800140a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800140e:	4834      	ldr	r0, [pc, #208]	; (80014e0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001410:	680d      	ldr	r5, [r1, #0]
 8001412:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001416:	bf18      	it	ne
 8001418:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 800141c:	2a01      	cmp	r2, #1
 800141e:	d035      	beq.n	800148c <HAL_ADCEx_MultiModeConfigChannel+0x88>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001420:	68a2      	ldr	r2, [r4, #8]
  __HAL_LOCK(hadc);
 8001422:	2601      	movs	r6, #1
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001424:	0757      	lsls	r7, r2, #29
  __HAL_LOCK(hadc);
 8001426:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800142a:	d508      	bpl.n	800143e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800142e:	f042 0220 	orr.w	r2, r2, #32
 8001432:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001434:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return tmp_hal_status;
 800143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800143e:	6882      	ldr	r2, [r0, #8]
 8001440:	0756      	lsls	r6, r2, #29
 8001442:	d4f3      	bmi.n	800142c <HAL_ADCEx_MultiModeConfigChannel+0x28>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001444:	b325      	cbz	r5, 8001490 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001446:	f8df e09c 	ldr.w	lr, [pc, #156]	; 80014e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800144a:	684f      	ldr	r7, [r1, #4]
 800144c:	f8de 6008 	ldr.w	r6, [lr, #8]
 8001450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001452:	f426 4660 	bic.w	r6, r6, #57344	; 0xe000
 8001456:	ea47 3242 	orr.w	r2, r7, r2, lsl #13
 800145a:	4332      	orrs	r2, r6
 800145c:	f8ce 2008 	str.w	r2, [lr, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001460:	68a2      	ldr	r2, [r4, #8]
 8001462:	f002 0203 	and.w	r2, r2, #3
 8001466:	2a01      	cmp	r2, #1
 8001468:	d02e      	beq.n	80014c8 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800146a:	6882      	ldr	r2, [r0, #8]
 800146c:	f002 0203 	and.w	r2, r2, #3
 8001470:	2a01      	cmp	r2, #1
 8001472:	d031      	beq.n	80014d8 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001474:	481b      	ldr	r0, [pc, #108]	; (80014e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001476:	6889      	ldr	r1, [r1, #8]
 8001478:	6882      	ldr	r2, [r0, #8]
 800147a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800147e:	430d      	orrs	r5, r1
 8001480:	f022 020f 	bic.w	r2, r2, #15
 8001484:	4315      	orrs	r5, r2
 8001486:	6085      	str	r5, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2000      	movs	r0, #0
 800148a:	e7d4      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x32>
  __HAL_LOCK(hadc);
 800148c:	2002      	movs	r0, #2
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001490:	4914      	ldr	r1, [pc, #80]	; (80014e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001492:	688a      	ldr	r2, [r1, #8]
 8001494:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001498:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800149a:	68a2      	ldr	r2, [r4, #8]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	2a01      	cmp	r2, #1
 80014a2:	d00d      	beq.n	80014c0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014a4:	6882      	ldr	r2, [r0, #8]
 80014a6:	f002 0203 	and.w	r2, r2, #3
 80014aa:	2a01      	cmp	r2, #1
 80014ac:	d010      	beq.n	80014d0 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80014ae:	490d      	ldr	r1, [pc, #52]	; (80014e4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80014b0:	688a      	ldr	r2, [r1, #8]
 80014b2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80014b6:	f022 020f 	bic.w	r2, r2, #15
 80014ba:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014bc:	2000      	movs	r0, #0
 80014be:	e7ba      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x32>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014c0:	6822      	ldr	r2, [r4, #0]
 80014c2:	07d1      	lsls	r1, r2, #31
 80014c4:	d4e0      	bmi.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 80014c6:	e7ed      	b.n	80014a4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014c8:	6822      	ldr	r2, [r4, #0]
 80014ca:	07d4      	lsls	r4, r2, #31
 80014cc:	d5cd      	bpl.n	800146a <HAL_ADCEx_MultiModeConfigChannel+0x66>
 80014ce:	e7db      	b.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0x84>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	07d2      	lsls	r2, r2, #31
 80014d4:	d4d8      	bmi.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 80014d6:	e7ea      	b.n	80014ae <HAL_ADCEx_MultiModeConfigChannel+0xaa>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014d8:	6802      	ldr	r2, [r0, #0]
 80014da:	07d0      	lsls	r0, r2, #31
 80014dc:	d4d4      	bmi.n	8001488 <HAL_ADCEx_MultiModeConfigChannel+0x84>
 80014de:	e7c9      	b.n	8001474 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 80014e0:	50000100 	.word	0x50000100
 80014e4:	50000300 	.word	0x50000300

080014e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ec:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80014f0:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014f2:	0200      	lsls	r0, r0, #8
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001500:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001502:	60d3      	str	r3, [r2, #12]
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150e:	b470      	push	{r4, r5, r6}
 8001510:	68dc      	ldr	r4, [r3, #12]
 8001512:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001516:	f1c4 0607 	rsb	r6, r4, #7
 800151a:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	bf28      	it	cs
 8001522:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001524:	2b06      	cmp	r3, #6
 8001526:	d917      	bls.n	8001558 <HAL_NVIC_SetPriority+0x4c>
 8001528:	3c03      	subs	r4, #3
 800152a:	2501      	movs	r5, #1
 800152c:	40a5      	lsls	r5, r4
 800152e:	3d01      	subs	r5, #1
 8001530:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001532:	2301      	movs	r3, #1
 8001534:	40b3      	lsls	r3, r6
 8001536:	3b01      	subs	r3, #1
 8001538:	4019      	ands	r1, r3
 800153a:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 800153c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8001542:	db0c      	blt.n	800155e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001544:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001548:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800154c:	0109      	lsls	r1, r1, #4
 800154e:	b2c9      	uxtb	r1, r1
 8001550:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001554:	bc70      	pop	{r4, r5, r6}
 8001556:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001558:	2200      	movs	r2, #0
 800155a:	4614      	mov	r4, r2
 800155c:	e7e9      	b.n	8001532 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_NVIC_SetPriority+0x68>)
 8001560:	f000 000f 	and.w	r0, r0, #15
 8001564:	0109      	lsls	r1, r1, #4
 8001566:	4403      	add	r3, r0
 8001568:	b2c9      	uxtb	r1, r1
 800156a:	7619      	strb	r1, [r3, #24]
 800156c:	bc70      	pop	{r4, r5, r6}
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	e000ecfc 	.word	0xe000ecfc

08001578 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001578:	f000 011f 	and.w	r1, r0, #31
 800157c:	2301      	movs	r3, #1
 800157e:	0940      	lsrs	r0, r0, #5
 8001580:	4a02      	ldr	r2, [pc, #8]	; (800158c <HAL_NVIC_EnableIRQ+0x14>)
 8001582:	408b      	lsls	r3, r1
 8001584:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	3801      	subs	r0, #1
 8001592:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001596:	d20e      	bcs.n	80015b6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	4c08      	ldr	r4, [pc, #32]	; (80015c0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	20f0      	movs	r0, #240	; 0xf0
 80015a2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015aa:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80015b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80015c6:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80015c8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015ca:	bf0c      	ite	eq
 80015cc:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015d0:	f023 0304 	bicne.w	r3, r3, #4
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4770      	bx	lr
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <HAL_SYSTICK_IRQHandler>:
{
 80015e0:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015e2:	f7ff fffb 	bl	80015dc <HAL_SYSTICK_Callback>
 80015e6:	bd08      	pop	{r3, pc}

080015e8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80015e8:	2800      	cmp	r0, #0
 80015ea:	d02d      	beq.n	8001648 <HAL_DMA_Init+0x60>
{ 
 80015ec:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015ee:	6842      	ldr	r2, [r0, #4]
 80015f0:	6887      	ldr	r7, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f2:	68c6      	ldr	r6, [r0, #12]
 80015f4:	6904      	ldr	r4, [r0, #16]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015f6:	4915      	ldr	r1, [pc, #84]	; (800164c <HAL_DMA_Init+0x64>)
 80015f8:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 80015fa:	433a      	orrs	r2, r7
  tmp = hdma->Instance->CCR;
 80015fc:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fe:	695d      	ldr	r5, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001600:	4f13      	ldr	r7, [pc, #76]	; (8001650 <HAL_DMA_Init+0x68>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	4332      	orrs	r2, r6
 8001604:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	699e      	ldr	r6, [r3, #24]
  tmp = hdma->Instance->CCR;
 8001608:	6804      	ldr	r4, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160a:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800160c:	69dd      	ldr	r5, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001610:	4401      	add	r1, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001612:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001616:	fba7 6101 	umull	r6, r1, r7, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800161c:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001620:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001622:	0909      	lsrs	r1, r1, #4
  hdma->Instance->CCR = tmp;  
 8001624:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 8001626:	4c0b      	ldr	r4, [pc, #44]	; (8001654 <HAL_DMA_Init+0x6c>)
 8001628:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 800162a:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800162c:	0089      	lsls	r1, r1, #2
  hdma->State = HAL_DMA_STATE_READY;
 800162e:	2201      	movs	r2, #1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001630:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->XferCpltCallback = NULL;
 8001632:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001634:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001636:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001638:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800163a:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 800163c:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001640:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}  
 8001644:	bcf0      	pop	{r4, r5, r6, r7}
 8001646:	4770      	bx	lr
    return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
 800164a:	4770      	bx	lr
 800164c:	bffdfff8 	.word	0xbffdfff8
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_DMA_Start_IT>:
{
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800165a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800165e:	2c01      	cmp	r4, #1
 8001660:	d00b      	beq.n	800167a <HAL_DMA_Start_IT+0x22>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001662:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001666:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001668:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 800166a:	f880 5020 	strb.w	r5, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800166e:	d006      	beq.n	800167e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8001670:	2300      	movs	r3, #0
 8001672:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001676:	2002      	movs	r0, #2
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 800167a:	2002      	movs	r0, #2
} 
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800167e:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001680:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8001682:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001686:	2600      	movs	r6, #0
 8001688:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168a:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800168c:	40bc      	lsls	r4, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168e:	f026 0601 	bic.w	r6, r6, #1
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001692:	6847      	ldr	r7, [r0, #4]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001694:	f04f 0c02 	mov.w	ip, #2
 8001698:	f880 c021 	strb.w	ip, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800169c:	602e      	str	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800169e:	f8ce 4004 	str.w	r4, [lr, #4]
  hdma->Instance->CNDTR = DataLength;
 80016a2:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 80016a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016a6:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 80016a8:	bf0b      	itete	eq
 80016aa:	60aa      	streq	r2, [r5, #8]
    hdma->Instance->CPAR = SrcAddress;
 80016ac:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 80016ae:	60e9      	streq	r1, [r5, #12]
    hdma->Instance->CMAR = DstAddress;
 80016b0:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80016b2:	b14b      	cbz	r3, 80016c8 <HAL_DMA_Start_IT+0x70>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016b4:	682b      	ldr	r3, [r5, #0]
 80016b6:	f043 030e 	orr.w	r3, r3, #14
 80016ba:	602b      	str	r3, [r5, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	602b      	str	r3, [r5, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2000      	movs	r0, #0
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	f043 030a 	orr.w	r3, r3, #10
 80016ce:	602b      	str	r3, [r5, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	602b      	str	r3, [r5, #0]
 80016d8:	e7f0      	b.n	80016bc <HAL_DMA_Start_IT+0x64>
 80016da:	bf00      	nop

080016dc <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016dc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80016e0:	2a02      	cmp	r2, #2
{  
 80016e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e4:	d003      	beq.n	80016ee <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	2204      	movs	r2, #4
 80016e8:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80016ea:	2001      	movs	r0, #1
 80016ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016ee:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016f0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f2:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016f4:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
    if(hdma->XferAbortCallback != NULL)
 80016f6:	6b46      	ldr	r6, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f8:	f024 040e 	bic.w	r4, r4, #14
 80016fc:	6014      	str	r4, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016fe:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001700:	2501      	movs	r5, #1
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001702:	f024 0401 	bic.w	r4, r4, #1
 8001706:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001708:	fa05 f101 	lsl.w	r1, r5, r1
    __HAL_UNLOCK(hdma);
 800170c:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800170e:	6079      	str	r1, [r7, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001710:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001714:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001718:	b116      	cbz	r6, 8001720 <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 800171a:	47b0      	blx	r6
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	4620      	mov	r0, r4
 800171e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001720:	4630      	mov	r0, r6
}
 8001722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001724 <HAL_DMA_IRQHandler>:
{
 8001724:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001726:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001728:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172a:	6829      	ldr	r1, [r5, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800172c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800172e:	2304      	movs	r3, #4
 8001730:	4093      	lsls	r3, r2
 8001732:	4219      	tst	r1, r3
  uint32_t source_it = hdma->Instance->CCR;
 8001734:	6826      	ldr	r6, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001736:	d00d      	beq.n	8001754 <HAL_DMA_IRQHandler+0x30>
 8001738:	0777      	lsls	r7, r6, #29
 800173a:	d50b      	bpl.n	8001754 <HAL_DMA_IRQHandler+0x30>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173c:	6822      	ldr	r2, [r4, #0]
 800173e:	0692      	lsls	r2, r2, #26
 8001740:	d403      	bmi.n	800174a <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001742:	6822      	ldr	r2, [r4, #0]
 8001744:	f022 0204 	bic.w	r2, r2, #4
 8001748:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800174a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800174c:	606b      	str	r3, [r5, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800174e:	b1c2      	cbz	r2, 8001782 <HAL_DMA_IRQHandler+0x5e>
}  
 8001750:	bcf0      	pop	{r4, r5, r6, r7}
  		hdma->XferCpltCallback(hdma);
 8001752:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001754:	2302      	movs	r3, #2
 8001756:	4093      	lsls	r3, r2
 8001758:	4219      	tst	r1, r3
 800175a:	d014      	beq.n	8001786 <HAL_DMA_IRQHandler+0x62>
 800175c:	07b7      	lsls	r7, r6, #30
 800175e:	d512      	bpl.n	8001786 <HAL_DMA_IRQHandler+0x62>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	0692      	lsls	r2, r2, #26
 8001764:	d406      	bmi.n	8001774 <HAL_DMA_IRQHandler+0x50>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001766:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001768:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800176a:	f022 020a 	bic.w	r2, r2, #10
 800176e:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001770:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001774:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001776:	606b      	str	r3, [r5, #4]
  	__HAL_UNLOCK(hdma);
 8001778:	2300      	movs	r3, #0
 800177a:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800177e:	2a00      	cmp	r2, #0
 8001780:	d1e6      	bne.n	8001750 <HAL_DMA_IRQHandler+0x2c>
}  
 8001782:	bcf0      	pop	{r4, r5, r6, r7}
 8001784:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001786:	2308      	movs	r3, #8
 8001788:	4093      	lsls	r3, r2
 800178a:	420b      	tst	r3, r1
 800178c:	d0f9      	beq.n	8001782 <HAL_DMA_IRQHandler+0x5e>
 800178e:	0733      	lsls	r3, r6, #28
 8001790:	d5f7      	bpl.n	8001782 <HAL_DMA_IRQHandler+0x5e>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001792:	6821      	ldr	r1, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001794:	6b06      	ldr	r6, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001796:	2301      	movs	r3, #1
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001798:	f021 010e 	bic.w	r1, r1, #14
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800179c:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80017a0:	2700      	movs	r7, #0
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017a2:	6021      	str	r1, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017a4:	606a      	str	r2, [r5, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017a6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80017a8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 80017ac:	f880 7020 	strb.w	r7, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 80017b0:	2e00      	cmp	r6, #0
 80017b2:	d0e6      	beq.n	8001782 <HAL_DMA_IRQHandler+0x5e>
    	hdma->XferErrorCallback(hdma);
 80017b4:	4633      	mov	r3, r6
}  
 80017b6:	bcf0      	pop	{r4, r5, r6, r7}
    	hdma->XferErrorCallback(hdma);
 80017b8:	4718      	bx	r3
 80017ba:	bf00      	nop

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	468c      	mov	ip, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017be:	6809      	ldr	r1, [r1, #0]
 80017c0:	2900      	cmp	r1, #0
 80017c2:	f000 80d9 	beq.w	8001978 <HAL_GPIO_Init+0x1bc>
{
 80017c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ca:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800198c <HAL_GPIO_Init+0x1d0>
{
 80017ce:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != RESET)
 80017d0:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017d2:	f04f 0801 	mov.w	r8, #1
 80017d6:	e079      	b.n	80018cc <HAL_GPIO_Init+0x110>
 80017d8:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017dc:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80017de:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e2:	fa03 f309 	lsl.w	r3, r3, r9
 80017e6:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e8:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ec:	ea0b 0b03 	and.w	fp, fp, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	fa06 f609 	lsl.w	r6, r6, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f8:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001800:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001802:	f240 8098 	bls.w	8001936 <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8001806:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	f8dc 2008 	ldr.w	r2, [ip, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800180c:	4033      	ands	r3, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800180e:	fa02 f209 	lsl.w	r2, r2, r9
 8001812:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001814:	00e3      	lsls	r3, r4, #3
      GPIOx->PUPDR = temp;
 8001816:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001818:	d554      	bpl.n	80018c4 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_GPIO_Init+0x1c0>)
 800181c:	4a57      	ldr	r2, [pc, #348]	; (800197c <HAL_GPIO_Init+0x1c0>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	6993      	ldr	r3, [r2, #24]
 8001828:	f025 0603 	bic.w	r6, r5, #3
 800182c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001838:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800183a:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001840:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	f04f 090f 	mov.w	r9, #15
 8001848:	fa09 f903 	lsl.w	r9, r9, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800184c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001850:	ea22 0a09 	bic.w	sl, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001854:	f000 8086 	beq.w	8001964 <HAL_GPIO_Init+0x1a8>
 8001858:	4a49      	ldr	r2, [pc, #292]	; (8001980 <HAL_GPIO_Init+0x1c4>)
 800185a:	4290      	cmp	r0, r2
 800185c:	f000 8084 	beq.w	8001968 <HAL_GPIO_Init+0x1ac>
 8001860:	4a48      	ldr	r2, [pc, #288]	; (8001984 <HAL_GPIO_Init+0x1c8>)
 8001862:	4290      	cmp	r0, r2
 8001864:	f000 8083 	beq.w	800196e <HAL_GPIO_Init+0x1b2>
 8001868:	4a47      	ldr	r2, [pc, #284]	; (8001988 <HAL_GPIO_Init+0x1cc>)
 800186a:	4290      	cmp	r0, r2
 800186c:	bf0b      	itete	eq
 800186e:	f04f 0903 	moveq.w	r9, #3
 8001872:	2205      	movne	r2, #5
 8001874:	fa09 f303 	lsleq.w	r3, r9, r3
 8001878:	fa02 f303 	lslne.w	r3, r2, r3
 800187c:	ea43 030a 	orr.w	r3, r3, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 8001880:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8001882:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8001886:	43fa      	mvns	r2, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001888:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 800188a:	bf54      	ite	pl
 800188c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800188e:	433b      	orrmi	r3, r7
        }
        EXTI->IMR = temp;
 8001890:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001894:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001898:	03a6      	lsls	r6, r4, #14
        temp &= ~((uint32_t)iocurrent);
 800189a:	bf54      	ite	pl
 800189c:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 800189e:	433b      	orrmi	r3, r7
        }
        EXTI->EMR = temp;
 80018a0:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018a4:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a8:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 80018aa:	bf54      	ite	pl
 80018ac:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80018ae:	433b      	orrmi	r3, r7
        }
        EXTI->RTSR = temp;
 80018b0:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80018b4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b8:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80018ba:	bf54      	ite	pl
 80018bc:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80018be:	433b      	orrmi	r3, r7
        }
        EXTI->FTSR = temp;
 80018c0:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }
    
    position++;
 80018c4:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80018c6:	fa31 f305 	lsrs.w	r3, r1, r5
 80018ca:	d048      	beq.n	800195e <HAL_GPIO_Init+0x1a2>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80018cc:	fa08 f205 	lsl.w	r2, r8, r5
    if(iocurrent)
 80018d0:	ea12 0701 	ands.w	r7, r2, r1
 80018d4:	d0f6      	beq.n	80018c4 <HAL_GPIO_Init+0x108>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80018da:	f024 0a10 	bic.w	sl, r4, #16
 80018de:	f1ba 0f02 	cmp.w	sl, #2
 80018e2:	f47f af79 	bne.w	80017d8 <HAL_GPIO_Init+0x1c>
        temp = GPIOx->AFR[position >> 3];
 80018e6:	ea4f 09d5 	mov.w	r9, r5, lsr #3
 80018ea:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ee:	f005 0307 	and.w	r3, r5, #7
        temp = GPIOx->AFR[position >> 3];
 80018f2:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	f04f 0a0f 	mov.w	sl, #15
 80018fc:	fa0a fb03 	lsl.w	fp, sl, r3
 8001900:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001904:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8001908:	fa06 f303 	lsl.w	r3, r6, r3
 800190c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3] = temp;
 8001910:	f8c9 3020 	str.w	r3, [r9, #32]
 8001914:	ea4f 0945 	mov.w	r9, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001918:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800191a:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800191e:	fa03 f309 	lsl.w	r3, r3, r9
 8001922:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001924:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001928:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192c:	fa06 f609 	lsl.w	r6, r6, r9
 8001930:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8001934:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR;
 8001936:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001938:	ea06 0a03 	and.w	sl, r6, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8001940:	fa06 f609 	lsl.w	r6, r6, r9
 8001944:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8001948:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800194a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800194e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001952:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001956:	40ae      	lsls	r6, r5
 8001958:	4316      	orrs	r6, r2
        GPIOx->OTYPER = temp;
 800195a:	6046      	str	r6, [r0, #4]
 800195c:	e753      	b.n	8001806 <HAL_GPIO_Init+0x4a>
  }
}
 800195e:	b003      	add	sp, #12
 8001960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001964:	2300      	movs	r3, #0
 8001966:	e789      	b.n	800187c <HAL_GPIO_Init+0xc0>
 8001968:	fa08 f303 	lsl.w	r3, r8, r3
 800196c:	e786      	b.n	800187c <HAL_GPIO_Init+0xc0>
 800196e:	f04f 0902 	mov.w	r9, #2
 8001972:	fa09 f303 	lsl.w	r3, r9, r3
 8001976:	e781      	b.n	800187c <HAL_GPIO_Init+0xc0>
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	48000400 	.word	0x48000400
 8001984:	48000800 	.word	0x48000800
 8001988:	48000c00 	.word	0x48000c00
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	b90a      	cbnz	r2, 8001996 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001992:	6281      	str	r1, [r0, #40]	; 0x28
 8001994:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	6181      	str	r1, [r0, #24]
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop

0800199c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80019a2:	6951      	ldr	r1, [r2, #20]
 80019a4:	4201      	tst	r1, r0
 80019a6:	d100      	bne.n	80019aa <HAL_GPIO_EXTI_IRQHandler+0xa>
 80019a8:	4770      	bx	lr
{
 80019aa:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ac:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ae:	f7ff fff5 	bl	800199c <HAL_GPIO_EXTI_Callback>
 80019b2:	bd08      	pop	{r3, pc}
 80019b4:	40010400 	.word	0x40010400

080019b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019bc:	4680      	mov	r8, r0
 80019be:	460f      	mov	r7, r1
 80019c0:	4616      	mov	r6, r2
 80019c2:	461d      	mov	r5, r3
 80019c4:	f8d8 4000 	ldr.w	r4, [r8]
 80019c8:	e001      	b.n	80019ce <I2C_WaitOnFlagUntilTimeout+0x16>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019ca:	1c6b      	adds	r3, r5, #1
 80019cc:	d10a      	bne.n	80019e4 <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019ce:	69a0      	ldr	r0, [r4, #24]
 80019d0:	ea37 0300 	bics.w	r3, r7, r0
 80019d4:	bf0c      	ite	eq
 80019d6:	2001      	moveq	r0, #1
 80019d8:	2000      	movne	r0, #0
 80019da:	42b0      	cmp	r0, r6
 80019dc:	d0f5      	beq.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x12>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80019de:	2000      	movs	r0, #0
}
 80019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019e4:	b12d      	cbz	r5, 80019f2 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80019e6:	f7ff f923 	bl	8000c30 <HAL_GetTick>
 80019ea:	9b06      	ldr	r3, [sp, #24]
 80019ec:	1ac0      	subs	r0, r0, r3
 80019ee:	4285      	cmp	r5, r0
 80019f0:	d2e8      	bcs.n	80019c4 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80019f4:	2220      	movs	r2, #32
 80019f6:	f888 2041 	strb.w	r2, [r8, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80019fa:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	f888 3042 	strb.w	r3, [r8, #66]	; 0x42
        return HAL_TIMEOUT;
 8001a02:	2003      	movs	r0, #3
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a08 <I2C_IsAcknowledgeFailed.part.0>:
  *                the configuration information for the specified I2C.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	4605      	mov	r5, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	4616      	mov	r6, r2
 8001a10:	6828      	ldr	r0, [r5, #0]
 8001a12:	e001      	b.n	8001a18 <I2C_IsAcknowledgeFailed.part.0+0x10>
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a14:	1c63      	adds	r3, r4, #1
 8001a16:	d122      	bne.n	8001a5e <I2C_IsAcknowledgeFailed.part.0+0x56>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a18:	6983      	ldr	r3, [r0, #24]
 8001a1a:	0699      	lsls	r1, r3, #26
 8001a1c:	d5fa      	bpl.n	8001a14 <I2C_IsAcknowledgeFailed.part.0+0xc>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1e:	2210      	movs	r2, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a20:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a22:	61c2      	str	r2, [r0, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a24:	61c3      	str	r3, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a26:	6983      	ldr	r3, [r0, #24]
 8001a28:	079a      	lsls	r2, r3, #30
    hi2c->Instance->TXDR = 0x00U;
 8001a2a:	bf44      	itt	mi
 8001a2c:	2300      	movmi	r3, #0
 8001a2e:	6283      	strmi	r3, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a30:	6983      	ldr	r3, [r0, #24]
 8001a32:	07db      	lsls	r3, r3, #31
 8001a34:	d403      	bmi.n	8001a3e <I2C_IsAcknowledgeFailed.part.0+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a36:	6983      	ldr	r3, [r0, #24]
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6183      	str	r3, [r0, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a3e:	6843      	ldr	r3, [r0, #4]
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <I2C_IsAcknowledgeFailed.part.0+0x78>)

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a42:	2404      	movs	r4, #4
    I2C_RESET_CR2(hi2c);
 8001a44:	4013      	ands	r3, r2
    hi2c->State = HAL_I2C_STATE_READY;
 8001a46:	2120      	movs	r1, #32
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a48:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 8001a4a:	6043      	str	r3, [r0, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a4c:	646c      	str	r4, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001a54:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a58:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  }
  return HAL_OK;
}
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a5e:	b124      	cbz	r4, 8001a6a <I2C_IsAcknowledgeFailed.part.0+0x62>
 8001a60:	f7ff f8e6 	bl	8000c30 <HAL_GetTick>
 8001a64:	1b80      	subs	r0, r0, r6
 8001a66:	4284      	cmp	r4, r0
 8001a68:	d2d2      	bcs.n	8001a10 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6a:	2300      	movs	r3, #0
          hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f885 2041 	strb.w	r2, [r5, #65]	; 0x41
          __HAL_UNLOCK(hi2c);
 8001a72:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a76:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          return HAL_TIMEOUT;
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	bf00      	nop
 8001a80:	fe00e800 	.word	0xfe00e800

08001a84 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4605      	mov	r5, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a8c:	e001      	b.n	8001a92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8001a8e:	1c61      	adds	r1, r4, #1
 8001a90:	d111      	bne.n	8001ab6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	0792      	lsls	r2, r2, #30
 8001a98:	d40b      	bmi.n	8001ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	06d8      	lsls	r0, r3, #27
 8001a9e:	d5f6      	bpl.n	8001a8e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 8001aa0:	4632      	mov	r2, r6
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f7ff ffaf 	bl	8001a08 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0ef      	beq.n	8001a8e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
}
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ab6:	b124      	cbz	r4, 8001ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ab8:	f7ff f8ba 	bl	8000c30 <HAL_GetTick>
 8001abc:	1b80      	subs	r0, r0, r6
 8001abe:	4284      	cmp	r4, r0
 8001ac0:	d2e7      	bcs.n	8001a92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ac4:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac6:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001acc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001ad4:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ad6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8001ada:	bd70      	pop	{r4, r5, r6, pc}

08001adc <I2C_RequestMemoryWrite>:
{
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8001ade:	6806      	ldr	r6, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ae0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001b58 <I2C_RequestMemoryWrite+0x7c>
  tmpreg = hi2c->Instance->CR2;
 8001ae4:	6874      	ldr	r4, [r6, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001ae6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001aea:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001aee:	ea04 040e 	and.w	r4, r4, lr
 8001af2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
{
 8001af6:	b083      	sub	sp, #12
 8001af8:	4321      	orrs	r1, r4
 8001afa:	461f      	mov	r7, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001b02:	4614      	mov	r4, r2
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001b04:	6071      	str	r1, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b08:	9908      	ldr	r1, [sp, #32]
{
 8001b0a:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b0c:	f7ff ffba 	bl	8001a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b10:	b950      	cbnz	r0, 8001b28 <I2C_RequestMemoryWrite+0x4c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b12:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b14:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b16:	d00e      	beq.n	8001b36 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b18:	0a22      	lsrs	r2, r4, #8
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b1c:	9908      	ldr	r1, [sp, #32]
 8001b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b20:	4628      	mov	r0, r5
 8001b22:	f7ff ffaf 	bl	8001a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b26:	b128      	cbz	r0, 8001b34 <I2C_RequestMemoryWrite+0x58>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b28:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d011      	beq.n	8001b52 <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8001b2e:	2003      	movs	r0, #3
}
 8001b30:	b003      	add	sp, #12
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	b2e4      	uxtb	r4, r4
 8001b38:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	4628      	mov	r0, r5
 8001b40:	9b08      	ldr	r3, [sp, #32]
 8001b42:	2200      	movs	r2, #0
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	f7ff ff37 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d1ef      	bne.n	8001b2e <I2C_RequestMemoryWrite+0x52>
}
 8001b4e:	b003      	add	sp, #12
 8001b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
}
 8001b54:	b003      	add	sp, #12
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b58:	fc009800 	.word	0xfc009800

08001b5c <I2C_RequestMemoryRead>:
{
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmpreg = hi2c->Instance->CR2;
 8001b5e:	6806      	ldr	r6, [r0, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001b60:	f8df e070 	ldr.w	lr, [pc, #112]	; 8001bd4 <I2C_RequestMemoryRead+0x78>
  tmpreg = hi2c->Instance->CR2;
 8001b64:	6874      	ldr	r4, [r6, #4]
 8001b66:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001b6a:	ea04 040e 	and.w	r4, r4, lr
 8001b6e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
{
 8001b72:	b083      	sub	sp, #12
 8001b74:	4321      	orrs	r1, r4
 8001b76:	461f      	mov	r7, r3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
{
 8001b7e:	4614      	mov	r4, r2
  hi2c->Instance->CR2 = tmpreg;
 8001b80:	6071      	str	r1, [r6, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b84:	9908      	ldr	r1, [sp, #32]
{
 8001b86:	4605      	mov	r5, r0
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b88:	f7ff ff7c 	bl	8001a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b8c:	b950      	cbnz	r0, 8001ba4 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b8e:	2f01      	cmp	r7, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b90:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b92:	d00e      	beq.n	8001bb2 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b94:	0a22      	lsrs	r2, r4, #8
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b98:	9908      	ldr	r1, [sp, #32]
 8001b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f7ff ff71 	bl	8001a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ba2:	b128      	cbz	r0, 8001bb0 <I2C_RequestMemoryRead+0x54>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ba4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d011      	beq.n	8001bce <I2C_RequestMemoryRead+0x72>
      return HAL_TIMEOUT;
 8001baa:	2003      	movs	r0, #3
}
 8001bac:	b003      	add	sp, #12
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	b2e4      	uxtb	r4, r4
 8001bb4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	4628      	mov	r0, r5
 8001bbc:	9b08      	ldr	r3, [sp, #32]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2140      	movs	r1, #64	; 0x40
 8001bc2:	f7ff fef9 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d1ef      	bne.n	8001baa <I2C_RequestMemoryRead+0x4e>
}
 8001bca:	b003      	add	sp, #12
 8001bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001bce:	2001      	movs	r0, #1
}
 8001bd0:	b003      	add	sp, #12
 8001bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd4:	fc009800 	.word	0xfc009800

08001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	4605      	mov	r5, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	0692      	lsls	r2, r2, #26
 8001be6:	d41e      	bmi.n	8001c26 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	06d9      	lsls	r1, r3, #27
 8001bec:	d412      	bmi.n	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001bee:	b124      	cbz	r4, 8001bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8001bf0:	f7ff f81e 	bl	8000c30 <HAL_GetTick>
 8001bf4:	1b80      	subs	r0, r0, r6
 8001bf6:	4284      	cmp	r4, r0
 8001bf8:	d2f2      	bcs.n	8001be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bfa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bfe:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c00:	430b      	orrs	r3, r1
 8001c02:	646b      	str	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001c04:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
      hi2c->State = HAL_I2C_STATE_READY;
 8001c08:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001c0c:	2003      	movs	r0, #3
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0e:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	4632      	mov	r2, r6
 8001c16:	4621      	mov	r1, r4
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f7ff fef5 	bl	8001a08 <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	d0e5      	beq.n	8001bee <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
      return HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001c26:	2000      	movs	r0, #0
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
 8001c2a:	bf00      	nop

08001c2c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d051      	beq.n	8001cd4 <HAL_I2C_Init+0xa8>
{
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c32:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c36:	4604      	mov	r4, r0
 8001c38:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d040      	beq.n	8001cc2 <HAL_I2C_Init+0x96>
  __HAL_I2C_DISABLE(hi2c);
 8001c40:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c42:	68e0      	ldr	r0, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	2224      	movs	r2, #36	; 0x24
 8001c46:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001c4a:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c4c:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8001c4e:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8001c56:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c58:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c5a:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5c:	2801      	cmp	r0, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c62:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c64:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c66:	d031      	beq.n	8001ccc <HAL_I2C_Init+0xa0>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c68:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c6c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c6e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c70:	bf04      	itt	eq
 8001c72:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001c76:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c78:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c7a:	6922      	ldr	r2, [r4, #16]
 8001c7c:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8001c80:	69a7      	ldr	r7, [r4, #24]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c82:	69e0      	ldr	r0, [r4, #28]
 8001c84:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c86:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001c8a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001c8e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c90:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c92:	ea42 020e 	orr.w	r2, r2, lr
 8001c96:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c9a:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c9c:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
 8001ca0:	60dd      	str	r5, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca4:	6018      	str	r0, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001ca6:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8001caa:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8001cb0:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 8001cb2:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb4:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cba:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8001cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001cc2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001cc6:	f002 fd65 	bl	8004794 <HAL_I2C_MspInit>
 8001cca:	e7b9      	b.n	8001c40 <HAL_I2C_Init+0x14>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ccc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	e7d1      	b.n	8001c78 <HAL_I2C_Init+0x4c>
    return HAL_ERROR;
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_I2C_Mem_Write>:
{
 8001cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cdc:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001ce0:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce2:	2c20      	cmp	r4, #32
{
 8001ce4:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ce8:	d003      	beq.n	8001cf2 <HAL_I2C_Mem_Write+0x1a>
    return HAL_BUSY;
 8001cea:	2002      	movs	r0, #2
}
 8001cec:	b002      	add	sp, #8
 8001cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8001cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d03b      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x98>
 8001cf8:	2d00      	cmp	r5, #0
 8001cfa:	d039      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x98>
    __HAL_LOCK(hi2c);
 8001cfc:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001d00:	2c01      	cmp	r4, #1
 8001d02:	d0f2      	beq.n	8001cea <HAL_I2C_Mem_Write+0x12>
 8001d04:	461f      	mov	r7, r3
 8001d06:	2301      	movs	r3, #1
 8001d08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001d0c:	4690      	mov	r8, r2
 8001d0e:	4689      	mov	r9, r1
 8001d10:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001d12:	f7fe ff8d 	bl	8000c30 <HAL_GetTick>
 8001d16:	4682      	mov	sl, r0
 8001d18:	e005      	b.n	8001d26 <HAL_I2C_Mem_Write+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d1a:	f7fe ff89 	bl	8000c30 <HAL_GetTick>
 8001d1e:	eba0 000a 	sub.w	r0, r0, sl
 8001d22:	2819      	cmp	r0, #25
 8001d24:	d826      	bhi.n	8001d74 <HAL_I2C_Mem_Write+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d26:	6823      	ldr	r3, [r4, #0]
 8001d28:	699e      	ldr	r6, [r3, #24]
 8001d2a:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8001d2e:	d1f4      	bne.n	8001d1a <HAL_I2C_Mem_Write+0x42>
    hi2c->pBuffPtr  = pData;
 8001d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d32:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d34:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d36:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 8001d3a:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d3c:	4642      	mov	r2, r8
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f8cd a004 	str.w	sl, [sp, #4]
 8001d44:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d46:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d4a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d4e:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d50:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d52:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 8001d54:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d56:	f7ff fec1 	bl	8001adc <I2C_RequestMemoryWrite>
 8001d5a:	b1a8      	cbz	r0, 8001d88 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001d5e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d004      	beq.n	8001d70 <HAL_I2C_Mem_Write+0x98>
          return HAL_TIMEOUT;
 8001d66:	2003      	movs	r0, #3
 8001d68:	e7c0      	b.n	8001cec <HAL_I2C_Mem_Write+0x14>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d1fa      	bne.n	8001d66 <HAL_I2C_Mem_Write+0x8e>
        return HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
 8001d72:	e7bb      	b.n	8001cec <HAL_I2C_Mem_Write+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	2220      	movs	r2, #32
 8001d78:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001d7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
 8001d86:	e7b1      	b.n	8001cec <HAL_I2C_Mem_Write+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2bff      	cmp	r3, #255	; 0xff
 8001d8e:	d959      	bls.n	8001e44 <HAL_I2C_Mem_Write+0x16c>
  tmpreg = hi2c->Instance->CR2;
 8001d90:	6820      	ldr	r0, [r4, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001d92:	4d40      	ldr	r5, [pc, #256]	; (8001e94 <HAL_I2C_Mem_Write+0x1bc>)
  tmpreg = hi2c->Instance->CR2;
 8001d94:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001d96:	f3c9 0109 	ubfx	r1, r9, #0, #10
 8001d9a:	f041 73ff 	orr.w	r3, r1, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001d9e:	402a      	ands	r2, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001daa:	6043      	str	r3, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001dac:	b28d      	uxth	r5, r1
 8001dae:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 8001db2:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8001db6:	e003      	b.n	8001dc0 <HAL_I2C_Mem_Write+0xe8>
    while (hi2c->XferCount > 0U);
 8001db8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d052      	beq.n	8001e66 <HAL_I2C_Mem_Write+0x18e>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc0:	4652      	mov	r2, sl
 8001dc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff fe5d 	bl	8001a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d1cd      	bne.n	8001d6a <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001dd0:	6821      	ldr	r1, [r4, #0]
      hi2c->XferSize--;
 8001dd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001dd4:	1c58      	adds	r0, r3, #1
 8001dd6:	6260      	str	r0, [r4, #36]	; 0x24
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	628b      	str	r3, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8001ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001dde:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001de4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001de6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001de8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d1e4      	bne.n	8001db8 <HAL_I2C_Mem_Write+0xe0>
 8001dee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0e0      	beq.n	8001db8 <HAL_I2C_Mem_Write+0xe0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	f8cd a000 	str.w	sl, [sp]
 8001dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7ff fdda 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e04:	4923      	ldr	r1, [pc, #140]	; (8001e94 <HAL_I2C_Mem_Write+0x1bc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e06:	f04f 0eff 	mov.w	lr, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e0a:	460f      	mov	r7, r1
 8001e0c:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d1a8      	bne.n	8001d66 <HAL_I2C_Mem_Write+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4573      	cmp	r3, lr
 8001e1a:	d907      	bls.n	8001e2c <HAL_I2C_Mem_Write+0x154>
  tmpreg = hi2c->Instance->CR2;
 8001e1c:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e1e:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tmpreg = hi2c->Instance->CR2;
 8001e22:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e24:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001e26:	4333      	orrs	r3, r6
  hi2c->Instance->CR2 = tmpreg;
 8001e28:	6053      	str	r3, [r2, #4]
 8001e2a:	e7c5      	b.n	8001db8 <HAL_I2C_Mem_Write+0xe0>
  tmpreg = hi2c->Instance->CR2;
 8001e2c:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001e2e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 8001e30:	6843      	ldr	r3, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001e32:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e34:	403b      	ands	r3, r7
 8001e36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001e38:	b2cf      	uxtb	r7, r1
 8001e3a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 8001e3e:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001e40:	6043      	str	r3, [r0, #4]
 8001e42:	e7b9      	b.n	8001db8 <HAL_I2C_Mem_Write+0xe0>
  tmpreg = hi2c->Instance->CR2;
 8001e44:	6825      	ldr	r5, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001e46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e48:	4812      	ldr	r0, [pc, #72]	; (8001e94 <HAL_I2C_Mem_Write+0x1bc>)
  tmpreg = hi2c->Instance->CR2;
 8001e4a:	686b      	ldr	r3, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001e4c:	f3c9 0109 	ubfx	r1, r9, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001e50:	4018      	ands	r0, r3
      hi2c->XferSize = hi2c->XferCount;
 8001e52:	b292      	uxth	r2, r2
 8001e54:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
 8001e58:	4303      	orrs	r3, r0
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001e5a:	b2d0      	uxtb	r0, r2
 8001e5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 8001e60:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001e62:	606b      	str	r3, [r5, #4]
 8001e64:	e7a2      	b.n	8001dac <HAL_I2C_Mem_Write+0xd4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e66:	4652      	mov	r2, sl
 8001e68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff feb4 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	f47f af7a 	bne.w	8001d6a <HAL_I2C_Mem_Write+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e76:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001e78:	4d07      	ldr	r5, [pc, #28]	; (8001e98 <HAL_I2C_Mem_Write+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	402a      	ands	r2, r5
 8001e82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001e88:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e8c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001e90:	e72c      	b.n	8001cec <HAL_I2C_Mem_Write+0x14>
 8001e92:	bf00      	nop
 8001e94:	fc009800 	.word	0xfc009800
 8001e98:	fe00e800 	.word	0xfe00e800

08001e9c <HAL_I2C_Mem_Read>:
{
 8001e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea0:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
{
 8001ea4:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea6:	2c20      	cmp	r4, #32
{
 8001ea8:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eac:	d003      	beq.n	8001eb6 <HAL_I2C_Mem_Read+0x1a>
    return HAL_BUSY;
 8001eae:	2002      	movs	r0, #2
}
 8001eb0:	b002      	add	sp, #8
 8001eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((pData == NULL) || (Size == 0U))
 8001eb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001eb8:	2c00      	cmp	r4, #0
 8001eba:	d043      	beq.n	8001f44 <HAL_I2C_Mem_Read+0xa8>
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d041      	beq.n	8001f44 <HAL_I2C_Mem_Read+0xa8>
    __HAL_LOCK(hi2c);
 8001ec0:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8001ec4:	2c01      	cmp	r4, #1
 8001ec6:	d0f2      	beq.n	8001eae <HAL_I2C_Mem_Read+0x12>
 8001ec8:	461f      	mov	r7, r3
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001ed0:	4690      	mov	r8, r2
 8001ed2:	4689      	mov	r9, r1
 8001ed4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8001ed6:	f7fe feab 	bl	8000c30 <HAL_GetTick>
 8001eda:	4682      	mov	sl, r0
 8001edc:	e005      	b.n	8001eea <HAL_I2C_Mem_Read+0x4e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ede:	f7fe fea7 	bl	8000c30 <HAL_GetTick>
 8001ee2:	eba0 000a 	sub.w	r0, r0, sl
 8001ee6:	2819      	cmp	r0, #25
 8001ee8:	d82e      	bhi.n	8001f48 <HAL_I2C_Mem_Read+0xac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	699e      	ldr	r6, [r3, #24]
 8001eee:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8001ef2:	d1f4      	bne.n	8001ede <HAL_I2C_Mem_Read+0x42>
    hi2c->pBuffPtr  = pData;
 8001ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ef6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ef8:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001efa:	2140      	movs	r1, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->XferISR   = NULL;
 8001efe:	6366      	str	r6, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f00:	4642      	mov	r2, r8
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f8cd a004 	str.w	sl, [sp, #4]
 8001f08:	463b      	mov	r3, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f0a:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f0e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f12:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f14:	6466      	str	r6, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f16:	4649      	mov	r1, r9
    hi2c->XferCount = Size;
 8001f18:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f1a:	f7ff fe1f 	bl	8001b5c <I2C_RequestMemoryRead>
 8001f1e:	b1e8      	cbz	r0, 8001f5c <HAL_I2C_Mem_Read+0xc0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f20:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001f22:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d00c      	beq.n	8001f44 <HAL_I2C_Mem_Read+0xa8>
        return HAL_TIMEOUT;
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	e7c0      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x14>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2e:	4652      	mov	r2, sl
 8001f30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f32:	4620      	mov	r0, r4
 8001f34:	f7ff fe50 	bl	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	f000 8083 	beq.w	8002044 <HAL_I2C_Mem_Read+0x1a8>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d1f2      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x8e>
        return HAL_ERROR;
 8001f44:	2001      	movs	r0, #1
 8001f46:	e7b3      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x14>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 8001f50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_TIMEOUT;
 8001f58:	2003      	movs	r0, #3
 8001f5a:	e7a9      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x14>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	2bff      	cmp	r3, #255	; 0xff
 8001f62:	d95c      	bls.n	800201e <HAL_I2C_Mem_Read+0x182>
  tmpreg = hi2c->Instance->CR2;
 8001f64:	6820      	ldr	r0, [r4, #0]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001f66:	4d3e      	ldr	r5, [pc, #248]	; (8002060 <HAL_I2C_Mem_Read+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 8001f68:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001f6a:	f3c9 0109 	ubfx	r1, r9, #0, #10
 8001f6e:	f041 73ff 	orr.w	r3, r1, #33423360	; 0x1fe0000
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001f72:	402a      	ands	r2, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001f74:	f443 3392 	orr.w	r3, r3, #74752	; 0x12400
 8001f78:	4313      	orrs	r3, r2
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f7a:	22ff      	movs	r2, #255	; 0xff
 8001f7c:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8001f7e:	6043      	str	r3, [r0, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8001f80:	b28d      	uxth	r5, r1
 8001f82:	f045 76ff 	orr.w	r6, r5, #33423360	; 0x1fe0000
 8001f86:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8001f8a:	e003      	b.n	8001f94 <HAL_I2C_Mem_Read+0xf8>
    while (hi2c->XferCount > 0U);
 8001f8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0cc      	beq.n	8001f2e <HAL_I2C_Mem_Read+0x92>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f94:	f8cd a000 	str.w	sl, [sp]
 8001f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff fd0a 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d1c0      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x8e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001faa:	6822      	ldr	r2, [r4, #0]
 8001fac:	1c59      	adds	r1, r3, #1
 8001fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb0:	6261      	str	r1, [r4, #36]	; 0x24
 8001fb2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001fb4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001fb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fb8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001fba:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001fbc:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001fbe:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001fc0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001fc2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001fc4:	2a00      	cmp	r2, #0
 8001fc6:	d1e1      	bne.n	8001f8c <HAL_I2C_Mem_Read+0xf0>
 8001fc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0dd      	beq.n	8001f8c <HAL_I2C_Mem_Read+0xf0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	f8cd a000 	str.w	sl, [sp]
 8001fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f7ff fced 	bl	80019b8 <I2C_WaitOnFlagUntilTimeout>
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001fde:	4920      	ldr	r1, [pc, #128]	; (8002060 <HAL_I2C_Mem_Read+0x1c4>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fe0:	f04f 0eff 	mov.w	lr, #255	; 0xff
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001fe4:	460f      	mov	r7, r1
 8001fe6:	f045 7200 	orr.w	r2, r5, #33554432	; 0x2000000
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d19d      	bne.n	8001f2a <HAL_I2C_Mem_Read+0x8e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	4573      	cmp	r3, lr
 8001ff4:	d907      	bls.n	8002006 <HAL_I2C_Mem_Read+0x16a>
  tmpreg = hi2c->Instance->CR2;
 8001ff6:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff8:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
  tmpreg = hi2c->Instance->CR2;
 8001ffc:	6853      	ldr	r3, [r2, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001ffe:	400b      	ands	r3, r1
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002000:	4333      	orrs	r3, r6
  hi2c->Instance->CR2 = tmpreg;
 8002002:	6053      	str	r3, [r2, #4]
 8002004:	e7c2      	b.n	8001f8c <HAL_I2C_Mem_Read+0xf0>
  tmpreg = hi2c->Instance->CR2;
 8002006:	6820      	ldr	r0, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002008:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  tmpreg = hi2c->Instance->CR2;
 800200a:	6843      	ldr	r3, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 800200c:	b289      	uxth	r1, r1
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800200e:	403b      	ands	r3, r7
 8002010:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002012:	b2cf      	uxtb	r7, r1
 8002014:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
          hi2c->XferSize = hi2c->XferCount;
 8002018:	8521      	strh	r1, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 800201a:	6043      	str	r3, [r0, #4]
 800201c:	e7b6      	b.n	8001f8c <HAL_I2C_Mem_Read+0xf0>
  tmpreg = hi2c->Instance->CR2;
 800201e:	6825      	ldr	r5, [r4, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002020:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002022:	4e0f      	ldr	r6, [pc, #60]	; (8002060 <HAL_I2C_Mem_Read+0x1c4>)
  tmpreg = hi2c->Instance->CR2;
 8002024:	6868      	ldr	r0, [r5, #4]
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002026:	f3c9 0109 	ubfx	r1, r9, #0, #10
 800202a:	f041 7300 	orr.w	r3, r1, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800202e:	b292      	uxth	r2, r2
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8002030:	4030      	ands	r0, r6
 8002032:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 8002036:	b2d6      	uxtb	r6, r2
 8002038:	4303      	orrs	r3, r0
 800203a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
      hi2c->XferSize = hi2c->XferCount;
 800203e:	8522      	strh	r2, [r4, #40]	; 0x28
  hi2c->Instance->CR2 = tmpreg;
 8002040:	606b      	str	r3, [r5, #4]
 8002042:	e79d      	b.n	8001f80 <HAL_I2C_Mem_Read+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002044:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002046:	4d07      	ldr	r5, [pc, #28]	; (8002064 <HAL_I2C_Mem_Read+0x1c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002048:	2120      	movs	r1, #32
 800204a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	402a      	ands	r2, r5
 8002050:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002052:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002056:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800205a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800205e:	e727      	b.n	8001eb0 <HAL_I2C_Mem_Read+0x14>
 8002060:	fc009800 	.word	0xfc009800
 8002064:	fe00e800 	.word	0xfe00e800

08002068 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002068:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	d001      	beq.n	8002076 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002072:	2002      	movs	r0, #2
 8002074:	4770      	bx	lr
 8002076:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 8002078:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800207c:	2801      	cmp	r0, #1
 800207e:	d0f8      	beq.n	8002072 <HAL_I2CEx_ConfigAnalogFilter+0xa>
{
 8002080:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 8002082:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	2424      	movs	r4, #36	; 0x24
 8002086:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800208a:	6804      	ldr	r4, [r0, #0]
 800208c:	f024 0401 	bic.w	r4, r4, #1
 8002090:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002092:	6804      	ldr	r4, [r0, #0]
 8002094:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002098:	6004      	str	r4, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800209a:	6804      	ldr	r4, [r0, #0]
 800209c:	4321      	orrs	r1, r4
 800209e:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 80020a0:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80020a2:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 80020a4:	f041 0101 	orr.w	r1, r1, #1
 80020a8:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 80020aa:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80020ac:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80020b0:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 80020b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b20      	cmp	r3, #32
 80020c4:	d001      	beq.n	80020ca <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2002      	movs	r0, #2
 80020c8:	4770      	bx	lr
 80020ca:	4602      	mov	r2, r0
    __HAL_LOCK(hi2c);
 80020cc:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80020d0:	2801      	cmp	r0, #1
 80020d2:	d0f8      	beq.n	80020c6 <HAL_I2CEx_ConfigDigitalFilter+0xa>
{
 80020d4:	b410      	push	{r4}
    __HAL_I2C_DISABLE(hi2c);
 80020d6:	6810      	ldr	r0, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	2424      	movs	r4, #36	; 0x24
 80020da:	f882 4041 	strb.w	r4, [r2, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80020de:	6804      	ldr	r4, [r0, #0]
 80020e0:	f024 0401 	bic.w	r4, r4, #1
 80020e4:	6004      	str	r4, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 80020e6:	6804      	ldr	r4, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80020e8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80020ec:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80020f0:	6001      	str	r1, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 80020f2:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80020f4:	2400      	movs	r4, #0
    __HAL_I2C_ENABLE(hi2c);
 80020f6:	f041 0101 	orr.w	r1, r1, #1
 80020fa:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 80020fc:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80020fe:	f882 4040 	strb.w	r4, [r2, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002102:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
  }
}
 8002106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002110:	6803      	ldr	r3, [r0, #0]
 8002112:	07d9      	lsls	r1, r3, #31
{
 8002114:	b083      	sub	sp, #12
 8002116:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002118:	d543      	bpl.n	80021a2 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800211a:	49c0      	ldr	r1, [pc, #768]	; (800241c <HAL_RCC_OscConfig+0x310>)
 800211c:	684a      	ldr	r2, [r1, #4]
 800211e:	f002 020c 	and.w	r2, r2, #12
 8002122:	2a04      	cmp	r2, #4
 8002124:	f000 8184 	beq.w	8002430 <HAL_RCC_OscConfig+0x324>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002128:	684a      	ldr	r2, [r1, #4]
 800212a:	f002 020c 	and.w	r2, r2, #12
 800212e:	2a08      	cmp	r2, #8
 8002130:	f000 817a 	beq.w	8002428 <HAL_RCC_OscConfig+0x31c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213a:	f000 823d 	beq.w	80025b8 <HAL_RCC_OscConfig+0x4ac>
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 81a1 	beq.w	8002486 <HAL_RCC_OscConfig+0x37a>
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	f000 8297 	beq.w	800267a <HAL_RCC_OscConfig+0x56e>
 800214c:	4bb3      	ldr	r3, [pc, #716]	; (800241c <HAL_RCC_OscConfig+0x310>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800215c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215e:	4daf      	ldr	r5, [pc, #700]	; (800241c <HAL_RCC_OscConfig+0x310>)
 8002160:	68a2      	ldr	r2, [r4, #8]
 8002162:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002164:	f023 030f 	bic.w	r3, r3, #15
 8002168:	4313      	orrs	r3, r2
 800216a:	62eb      	str	r3, [r5, #44]	; 0x2c

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe fd60 	bl	8000c30 <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002174:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	2601      	movs	r6, #1
 8002178:	e005      	b.n	8002186 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800217a:	f7fe fd59 	bl	8000c30 <HAL_GetTick>
 800217e:	1bc0      	subs	r0, r0, r7
 8002180:	2864      	cmp	r0, #100	; 0x64
 8002182:	f200 81b9 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 8002186:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	682a      	ldr	r2, [r5, #0]
 800218c:	fa98 f3a8 	rbit	r3, r8
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	fa06 f303 	lsl.w	r3, r6, r3
 800219c:	4213      	tst	r3, r2
 800219e:	d0ec      	beq.n	800217a <HAL_RCC_OscConfig+0x6e>
 80021a0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a2:	079f      	lsls	r7, r3, #30
 80021a4:	d542      	bpl.n	800222c <HAL_RCC_OscConfig+0x120>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021a6:	4a9d      	ldr	r2, [pc, #628]	; (800241c <HAL_RCC_OscConfig+0x310>)
 80021a8:	6851      	ldr	r1, [r2, #4]
 80021aa:	f011 0f0c 	tst.w	r1, #12
 80021ae:	f000 80f7 	beq.w	80023a0 <HAL_RCC_OscConfig+0x294>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021b2:	6851      	ldr	r1, [r2, #4]
 80021b4:	f001 010c 	and.w	r1, r1, #12
 80021b8:	2908      	cmp	r1, #8
 80021ba:	f000 80ed 	beq.w	8002398 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021be:	6922      	ldr	r2, [r4, #16]
 80021c0:	2a00      	cmp	r2, #0
 80021c2:	f000 81d3 	beq.w	800256c <HAL_RCC_OscConfig+0x460>
 80021c6:	2201      	movs	r2, #1
 80021c8:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021d8:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 80021dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021de:	f7fe fd27 	bl	8000c30 <HAL_GetTick>
 80021e2:	f04f 0802 	mov.w	r8, #2
 80021e6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	4d8c      	ldr	r5, [pc, #560]	; (800241c <HAL_RCC_OscConfig+0x310>)
 80021ea:	e005      	b.n	80021f8 <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fd20 	bl	8000c30 <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	2802      	cmp	r0, #2
 80021f4:	f200 8180 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 80021f8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	682a      	ldr	r2, [r5, #0]
 80021fe:	fa98 f3a8 	rbit	r3, r8
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	fa06 f303 	lsl.w	r3, r6, r3
 800220e:	4213      	tst	r3, r2
 8002210:	d0ec      	beq.n	80021ec <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002212:	6829      	ldr	r1, [r5, #0]
 8002214:	22f8      	movs	r2, #248	; 0xf8
 8002216:	fa92 f2a2 	rbit	r2, r2
 800221a:	6963      	ldr	r3, [r4, #20]
 800221c:	fab2 f282 	clz	r2, r2
 8002220:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8002224:	4093      	lsls	r3, r2
 8002226:	430b      	orrs	r3, r1
 8002228:	602b      	str	r3, [r5, #0]
 800222a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222c:	071d      	lsls	r5, r3, #28
 800222e:	d44f      	bmi.n	80022d0 <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	0758      	lsls	r0, r3, #29
 8002232:	d57b      	bpl.n	800232c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002234:	4b79      	ldr	r3, [pc, #484]	; (800241c <HAL_RCC_OscConfig+0x310>)
 8002236:	69da      	ldr	r2, [r3, #28]
 8002238:	00d1      	lsls	r1, r2, #3
 800223a:	f100 8110 	bmi.w	800245e <HAL_RCC_OscConfig+0x352>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002244:	61da      	str	r2, [r3, #28]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002250:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4d72      	ldr	r5, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x314>)
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	05da      	lsls	r2, r3, #23
 800225a:	f140 813d 	bpl.w	80024d8 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225e:	68e3      	ldr	r3, [r4, #12]
 8002260:	2b01      	cmp	r3, #1
 8002262:	f000 81af 	beq.w	80025c4 <HAL_RCC_OscConfig+0x4b8>
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8154 	beq.w	8002514 <HAL_RCC_OscConfig+0x408>
 800226c:	2b05      	cmp	r3, #5
 800226e:	4b6b      	ldr	r3, [pc, #428]	; (800241c <HAL_RCC_OscConfig+0x310>)
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	f000 820f 	beq.w	8002694 <HAL_RCC_OscConfig+0x588>
 8002276:	f022 0201 	bic.w	r2, r2, #1
 800227a:	621a      	str	r2, [r3, #32]
 800227c:	6a1a      	ldr	r2, [r3, #32]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002284:	f7fe fcd4 	bl	8000c30 <HAL_GetTick>
 8002288:	f04f 0902 	mov.w	r9, #2
 800228c:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	4e63      	ldr	r6, [pc, #396]	; (800241c <HAL_RCC_OscConfig+0x310>)
 8002290:	2501      	movs	r5, #1
 8002292:	e015      	b.n	80022c0 <HAL_RCC_OscConfig+0x1b4>
 8002294:	fa99 f3a9 	rbit	r3, r9
 8002298:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800229a:	fa99 f3a9 	rbit	r3, r9
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	f003 031f 	and.w	r3, r3, #31
 80022a6:	fa05 f303 	lsl.w	r3, r5, r3
 80022aa:	4213      	tst	r3, r2
 80022ac:	f040 8128 	bne.w	8002500 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fcbe 	bl	8000c30 <HAL_GetTick>
 80022b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80022b8:	1bc0      	subs	r0, r0, r7
 80022ba:	4298      	cmp	r0, r3
 80022bc:	f200 811c 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 80022c0:	fa99 f3a9 	rbit	r3, r9
 80022c4:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0e3      	beq.n	8002294 <HAL_RCC_OscConfig+0x188>
 80022cc:	6a32      	ldr	r2, [r6, #32]
 80022ce:	e7e4      	b.n	800229a <HAL_RCC_OscConfig+0x18e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d0:	69a2      	ldr	r2, [r4, #24]
 80022d2:	2a00      	cmp	r2, #0
 80022d4:	d07b      	beq.n	80023ce <HAL_RCC_OscConfig+0x2c2>
 80022d6:	2201      	movs	r2, #1
 80022d8:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 80022dc:	4b51      	ldr	r3, [pc, #324]	; (8002424 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4e4f      	ldr	r6, [pc, #316]	; (800241c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_ENABLE();
 80022e0:	fab1 f181 	clz	r1, r1
 80022e4:	440b      	add	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e8:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 80022ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022ec:	f7fe fca0 	bl	8000c30 <HAL_GetTick>
 80022f0:	f04f 0802 	mov.w	r8, #2
 80022f4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	e005      	b.n	8002304 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f8:	f7fe fc9a 	bl	8000c30 <HAL_GetTick>
 80022fc:	1bc0      	subs	r0, r0, r7
 80022fe:	2802      	cmp	r0, #2
 8002300:	f200 80fa 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 8002304:	fa98 f3a8 	rbit	r3, r8
 8002308:	fa98 f3a8 	rbit	r3, r8
 800230c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002310:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002312:	fa98 f3a8 	rbit	r3, r8
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	fa05 f303 	lsl.w	r3, r5, r3
 8002322:	4213      	tst	r3, r2
 8002324:	d0e8      	beq.n	80022f8 <HAL_RCC_OscConfig+0x1ec>
 8002326:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	0758      	lsls	r0, r3, #29
 800232a:	d483      	bmi.n	8002234 <HAL_RCC_OscConfig+0x128>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232c:	69e3      	ldr	r3, [r4, #28]
 800232e:	b37b      	cbz	r3, 8002390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002330:	4d3a      	ldr	r5, [pc, #232]	; (800241c <HAL_RCC_OscConfig+0x310>)
 8002332:	686a      	ldr	r2, [r5, #4]
 8002334:	f002 020c 	and.w	r2, r2, #12
 8002338:	2a08      	cmp	r2, #8
 800233a:	d044      	beq.n	80023c6 <HAL_RCC_OscConfig+0x2ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	2b02      	cmp	r3, #2
 800233e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002342:	f000 8145 	beq.w	80025d0 <HAL_RCC_OscConfig+0x4c4>
 8002346:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fc68 	bl	8000c30 <HAL_GetTick>
 8002360:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002364:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	2601      	movs	r6, #1
 8002368:	e005      	b.n	8002376 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800236a:	f7fe fc61 	bl	8000c30 <HAL_GetTick>
 800236e:	1bc0      	subs	r0, r0, r7
 8002370:	2802      	cmp	r0, #2
 8002372:	f200 80c1 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 8002376:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237a:	682a      	ldr	r2, [r5, #0]
 800237c:	fa94 f3a4 	rbit	r3, r4
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	fa06 f303 	lsl.w	r3, r6, r3
 800238c:	4213      	tst	r3, r2
 800238e:	d1ec      	bne.n	800236a <HAL_RCC_OscConfig+0x25e>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002390:	2000      	movs	r0, #0
}
 8002392:	b003      	add	sp, #12
 8002394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002398:	6852      	ldr	r2, [r2, #4]
 800239a:	03d6      	lsls	r6, r2, #15
 800239c:	f53f af0f 	bmi.w	80021be <HAL_RCC_OscConfig+0xb2>
 80023a0:	2202      	movs	r2, #2
 80023a2:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	491d      	ldr	r1, [pc, #116]	; (800241c <HAL_RCC_OscConfig+0x310>)
 80023a8:	6808      	ldr	r0, [r1, #0]
 80023aa:	fa92 f2a2 	rbit	r2, r2
 80023ae:	fab2 f282 	clz	r2, r2
 80023b2:	f002 021f 	and.w	r2, r2, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f202 	lsl.w	r2, r1, r2
 80023bc:	4202      	tst	r2, r0
 80023be:	d051      	beq.n	8002464 <HAL_RCC_OscConfig+0x358>
 80023c0:	6922      	ldr	r2, [r4, #16]
 80023c2:	428a      	cmp	r2, r1
 80023c4:	d04e      	beq.n	8002464 <HAL_RCC_OscConfig+0x358>
        return HAL_ERROR;
 80023c6:	2001      	movs	r0, #1
}
 80023c8:	b003      	add	sp, #12
 80023ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023ce:	2501      	movs	r5, #1
 80023d0:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d6:	4e11      	ldr	r6, [pc, #68]	; (800241c <HAL_RCC_OscConfig+0x310>)
      __HAL_RCC_LSI_DISABLE();
 80023d8:	fab1 f181 	clz	r1, r1
 80023dc:	440b      	add	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	f04f 0802 	mov.w	r8, #2
 80023e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023e6:	f7fe fc23 	bl	8000c30 <HAL_GetTick>
 80023ea:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	e004      	b.n	80023f8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ee:	f7fe fc1f 	bl	8000c30 <HAL_GetTick>
 80023f2:	1bc0      	subs	r0, r0, r7
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d87f      	bhi.n	80024f8 <HAL_RCC_OscConfig+0x3ec>
 80023f8:	fa98 f3a8 	rbit	r3, r8
 80023fc:	fa98 f3a8 	rbit	r3, r8
 8002400:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002404:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8002406:	fa98 f3a8 	rbit	r3, r8
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	fa05 f303 	lsl.w	r3, r5, r3
 8002416:	4213      	tst	r3, r2
 8002418:	d1e9      	bne.n	80023ee <HAL_RCC_OscConfig+0x2e2>
 800241a:	e784      	b.n	8002326 <HAL_RCC_OscConfig+0x21a>
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002428:	684a      	ldr	r2, [r1, #4]
 800242a:	03d2      	lsls	r2, r2, #15
 800242c:	f57f ae82 	bpl.w	8002134 <HAL_RCC_OscConfig+0x28>
 8002430:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002434:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	499a      	ldr	r1, [pc, #616]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 800243a:	6808      	ldr	r0, [r1, #0]
 800243c:	fa92 f2a2 	rbit	r2, r2
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	f002 021f 	and.w	r2, r2, #31
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	4202      	tst	r2, r0
 8002450:	f43f aea7 	beq.w	80021a2 <HAL_RCC_OscConfig+0x96>
 8002454:	6862      	ldr	r2, [r4, #4]
 8002456:	2a00      	cmp	r2, #0
 8002458:	f47f aea3 	bne.w	80021a2 <HAL_RCC_OscConfig+0x96>
 800245c:	e7b3      	b.n	80023c6 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800245e:	f04f 0800 	mov.w	r8, #0
 8002462:	e6f7      	b.n	8002254 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4d8f      	ldr	r5, [pc, #572]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 8002466:	21f8      	movs	r1, #248	; 0xf8
 8002468:	6828      	ldr	r0, [r5, #0]
 800246a:	fa91 f1a1 	rbit	r1, r1
 800246e:	6962      	ldr	r2, [r4, #20]
 8002470:	fab1 f181 	clz	r1, r1
 8002474:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002478:	408a      	lsls	r2, r1
 800247a:	4302      	orrs	r2, r0
 800247c:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	071d      	lsls	r5, r3, #28
 8002480:	f57f aed6 	bpl.w	8002230 <HAL_RCC_OscConfig+0x124>
 8002484:	e724      	b.n	80022d0 <HAL_RCC_OscConfig+0x1c4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002486:	4d87      	ldr	r5, [pc, #540]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248e:	602b      	str	r3, [r5, #0]
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002498:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800249a:	68a2      	ldr	r2, [r4, #8]
 800249c:	f023 030f 	bic.w	r3, r3, #15
 80024a0:	4313      	orrs	r3, r2
 80024a2:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80024a4:	f7fe fbc4 	bl	8000c30 <HAL_GetTick>
 80024a8:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80024ac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ae:	2601      	movs	r6, #1
 80024b0:	e004      	b.n	80024bc <HAL_RCC_OscConfig+0x3b0>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b2:	f7fe fbbd 	bl	8000c30 <HAL_GetTick>
 80024b6:	1bc0      	subs	r0, r0, r7
 80024b8:	2864      	cmp	r0, #100	; 0x64
 80024ba:	d81d      	bhi.n	80024f8 <HAL_RCC_OscConfig+0x3ec>
 80024bc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c0:	682a      	ldr	r2, [r5, #0]
 80024c2:	fa98 f3a8 	rbit	r3, r8
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	fa06 f303 	lsl.w	r3, r6, r3
 80024d2:	4213      	tst	r3, r2
 80024d4:	d1ed      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3a6>
 80024d6:	e663      	b.n	80021a0 <HAL_RCC_OscConfig+0x94>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80024e0:	f7fe fba6 	bl	8000c30 <HAL_GetTick>
 80024e4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	682b      	ldr	r3, [r5, #0]
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	f53f aeb8 	bmi.w	800225e <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe fb9f 	bl	8000c30 <HAL_GetTick>
 80024f2:	1b80      	subs	r0, r0, r6
 80024f4:	2864      	cmp	r0, #100	; 0x64
 80024f6:	d9f6      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3da>
            return HAL_TIMEOUT;
 80024f8:	2003      	movs	r0, #3
}
 80024fa:	b003      	add	sp, #12
 80024fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(pwrclkchanged == SET)
 8002500:	f1b8 0f00 	cmp.w	r8, #0
 8002504:	f43f af12 	beq.w	800232c <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4a66      	ldr	r2, [pc, #408]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 800250a:	69d3      	ldr	r3, [r2, #28]
 800250c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002510:	61d3      	str	r3, [r2, #28]
 8002512:	e70b      	b.n	800232c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002514:	4d63      	ldr	r5, [pc, #396]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 8002516:	6a2b      	ldr	r3, [r5, #32]
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	622b      	str	r3, [r5, #32]
 800251e:	6a2b      	ldr	r3, [r5, #32]
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8002526:	f7fe fb83 	bl	8000c30 <HAL_GetTick>
 800252a:	f04f 0902 	mov.w	r9, #2
 800252e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	2601      	movs	r6, #1
 8002532:	e013      	b.n	800255c <HAL_RCC_OscConfig+0x450>
 8002534:	fa99 f3a9 	rbit	r3, r9
 8002538:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800253a:	fa99 f3a9 	rbit	r3, r9
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	fa06 f303 	lsl.w	r3, r6, r3
 800254a:	4213      	tst	r3, r2
 800254c:	d0d8      	beq.n	8002500 <HAL_RCC_OscConfig+0x3f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fb6f 	bl	8000c30 <HAL_GetTick>
 8002552:	f241 3388 	movw	r3, #5000	; 0x1388
 8002556:	1bc0      	subs	r0, r0, r7
 8002558:	4298      	cmp	r0, r3
 800255a:	d8cd      	bhi.n	80024f8 <HAL_RCC_OscConfig+0x3ec>
 800255c:	fa99 f3a9 	rbit	r3, r9
 8002560:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0e5      	beq.n	8002534 <HAL_RCC_OscConfig+0x428>
 8002568:	6a2a      	ldr	r2, [r5, #32]
 800256a:	e7e6      	b.n	800253a <HAL_RCC_OscConfig+0x42e>
 800256c:	2501      	movs	r5, #1
 800256e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800257a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f04f 0802 	mov.w	r8, #2
 8002584:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002586:	f7fe fb53 	bl	8000c30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4e46      	ldr	r6, [pc, #280]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800258c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e004      	b.n	800259a <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7fe fb4e 	bl	8000c30 <HAL_GetTick>
 8002594:	1bc0      	subs	r0, r0, r7
 8002596:	2802      	cmp	r0, #2
 8002598:	d8ae      	bhi.n	80024f8 <HAL_RCC_OscConfig+0x3ec>
 800259a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259e:	6832      	ldr	r2, [r6, #0]
 80025a0:	fa98 f3a8 	rbit	r3, r8
 80025a4:	fab3 f383 	clz	r3, r3
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa05 f303 	lsl.w	r3, r5, r3
 80025b0:	4213      	tst	r3, r2
 80025b2:	d1ed      	bne.n	8002590 <HAL_RCC_OscConfig+0x484>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	e639      	b.n	800222c <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e5cc      	b.n	800215e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	4a37      	ldr	r2, [pc, #220]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
 80025c6:	6a13      	ldr	r3, [r2, #32]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6213      	str	r3, [r2, #32]
 80025ce:	e659      	b.n	8002284 <HAL_RCC_OscConfig+0x178>
 80025d0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025e6:	f7fe fb23 	bl	8000c30 <HAL_GetTick>
 80025ea:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80025ee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f0:	2601      	movs	r6, #1
 80025f2:	e005      	b.n	8002600 <HAL_RCC_OscConfig+0x4f4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fb1c 	bl	8000c30 <HAL_GetTick>
 80025f8:	1bc0      	subs	r0, r0, r7
 80025fa:	2802      	cmp	r0, #2
 80025fc:	f63f af7c 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 8002600:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	682a      	ldr	r2, [r5, #0]
 8002606:	fa98 f3a8 	rbit	r3, r8
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	fa06 f303 	lsl.w	r3, r6, r3
 8002616:	4213      	tst	r3, r2
 8002618:	d1ec      	bne.n	80025f4 <HAL_RCC_OscConfig+0x4e8>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	686a      	ldr	r2, [r5, #4]
 800261c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800261e:	6a21      	ldr	r1, [r4, #32]
 8002620:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002624:	430b      	orrs	r3, r1
 8002626:	4313      	orrs	r3, r2
 8002628:	606b      	str	r3, [r5, #4]
 800262a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800262e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800263a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002644:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8002646:	f7fe faf3 	bl	8000c30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264a:	4e16      	ldr	r6, [pc, #88]	; (80026a4 <HAL_RCC_OscConfig+0x598>)
        tickstart = HAL_GetTick();
 800264c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264e:	2501      	movs	r5, #1
 8002650:	e005      	b.n	800265e <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002652:	f7fe faed 	bl	8000c30 <HAL_GetTick>
 8002656:	1bc0      	subs	r0, r0, r7
 8002658:	2802      	cmp	r0, #2
 800265a:	f63f af4d 	bhi.w	80024f8 <HAL_RCC_OscConfig+0x3ec>
 800265e:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002662:	6832      	ldr	r2, [r6, #0]
 8002664:	fa94 f3a4 	rbit	r3, r4
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa05 f303 	lsl.w	r3, r5, r3
 8002674:	4213      	tst	r3, r2
 8002676:	d0ec      	beq.n	8002652 <HAL_RCC_OscConfig+0x546>
 8002678:	e68a      	b.n	8002390 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800267e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e564      	b.n	800215e <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002694:	f042 0204 	orr.w	r2, r2, #4
 8002698:	621a      	str	r2, [r3, #32]
 800269a:	6a1a      	ldr	r2, [r3, #32]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	621a      	str	r2, [r3, #32]
 80026a2:	e5ef      	b.n	8002284 <HAL_RCC_OscConfig+0x178>
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <HAL_RCC_GetSysClockFreq+0x54>)
 80026aa:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026ac:	f003 010c 	and.w	r1, r3, #12
 80026b0:	2908      	cmp	r1, #8
 80026b2:	d121      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x50>
 80026b4:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 80026b8:	fa91 f1a1 	rbit	r1, r1
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026bc:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80026c0:	fab1 f181 	clz	r1, r1
 80026c4:	fa20 f101 	lsr.w	r1, r0, r1
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <HAL_RCC_GetSysClockFreq+0x58>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80026cc:	5c40      	ldrb	r0, [r0, r1]
 80026ce:	210f      	movs	r1, #15
 80026d0:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026d4:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026d6:	fab1 f181 	clz	r1, r1
 80026da:	f002 020f 	and.w	r2, r2, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80026de:	bf4c      	ite	mi
 80026e0:	4b08      	ldrmi	r3, [pc, #32]	; (8002704 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80026e2:	4b09      	ldrpl	r3, [pc, #36]	; (8002708 <HAL_RCC_GetSysClockFreq+0x60>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80026e4:	fa22 f201 	lsr.w	r2, r2, r1
 80026e8:	4908      	ldr	r1, [pc, #32]	; (800270c <HAL_RCC_GetSysClockFreq+0x64>)
 80026ea:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80026ec:	bf48      	it	mi
 80026ee:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80026f2:	fb03 f000 	mul.w	r0, r3, r0
 80026f6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000
 8002700:	08006304 	.word	0x08006304
 8002704:	007a1200 	.word	0x007a1200
 8002708:	003d0900 	.word	0x003d0900
 800270c:	08006314 	.word	0x08006314

08002710 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002710:	4a5f      	ldr	r2, [pc, #380]	; (8002890 <HAL_RCC_ClockConfig+0x180>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	428b      	cmp	r3, r1
 800271a:	d20b      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	430b      	orrs	r3, r1
 8002724:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4299      	cmp	r1, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8002730:	2001      	movs	r0, #1
}
 8002732:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	6803      	ldr	r3, [r0, #0]
{
 8002736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273a:	079c      	lsls	r4, r3, #30
 800273c:	d506      	bpl.n	800274c <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800273e:	4c55      	ldr	r4, [pc, #340]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002740:	6885      	ldr	r5, [r0, #8]
 8002742:	6862      	ldr	r2, [r4, #4]
 8002744:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002748:	432a      	orrs	r2, r5
 800274a:	6062      	str	r2, [r4, #4]
 800274c:	460c      	mov	r4, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274e:	07d9      	lsls	r1, r3, #31
 8002750:	4606      	mov	r6, r0
 8002752:	d531      	bpl.n	80027b8 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002754:	6842      	ldr	r2, [r0, #4]
 8002756:	2a01      	cmp	r2, #1
 8002758:	f000 8087 	beq.w	800286a <HAL_RCC_ClockConfig+0x15a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275c:	2a02      	cmp	r2, #2
 800275e:	bf0c      	ite	eq
 8002760:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002764:	2302      	movne	r3, #2
 8002766:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276a:	494a      	ldr	r1, [pc, #296]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 800276c:	6808      	ldr	r0, [r1, #0]
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4203      	tst	r3, r0
 8002782:	d029      	beq.n	80027d8 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002784:	4d43      	ldr	r5, [pc, #268]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002786:	686b      	ldr	r3, [r5, #4]
 8002788:	f023 0303 	bic.w	r3, r3, #3
 800278c:	4313      	orrs	r3, r2
 800278e:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002790:	f7fe fa4e 	bl	8000c30 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	6873      	ldr	r3, [r6, #4]
 8002796:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8002798:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	d023      	beq.n	80027e8 <HAL_RCC_ClockConfig+0xd8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xa0>
 80027a4:	e058      	b.n	8002858 <HAL_RCC_ClockConfig+0x148>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7fe fa43 	bl	8000c30 <HAL_GetTick>
 80027aa:	1bc0      	subs	r0, r0, r7
 80027ac:	4540      	cmp	r0, r8
 80027ae:	d859      	bhi.n	8002864 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b0:	686b      	ldr	r3, [r5, #4]
 80027b2:	f013 0f0c 	tst.w	r3, #12
 80027b6:	d1f6      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x96>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80027b8:	4a35      	ldr	r2, [pc, #212]	; (8002890 <HAL_RCC_ClockConfig+0x180>)
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	429c      	cmp	r4, r3
 80027c2:	d217      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c4:	6813      	ldr	r3, [r2, #0]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	4323      	orrs	r3, r4
 80027cc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ce:	6813      	ldr	r3, [r2, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	429c      	cmp	r4, r3
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCC_ClockConfig+0xe4>
      return HAL_ERROR;
 80027d8:	2001      	movs	r0, #1
 80027da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fe fa27 	bl	8000c30 <HAL_GetTick>
 80027e2:	1bc0      	subs	r0, r0, r7
 80027e4:	4540      	cmp	r0, r8
 80027e6:	d83d      	bhi.n	8002864 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e8:	686b      	ldr	r3, [r5, #4]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d1f5      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
 80027f2:	e7e1      	b.n	80027b8 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	6833      	ldr	r3, [r6, #0]
 80027f6:	075a      	lsls	r2, r3, #29
 80027f8:	d506      	bpl.n	8002808 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fa:	4926      	ldr	r1, [pc, #152]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 80027fc:	68f0      	ldr	r0, [r6, #12]
 80027fe:	684a      	ldr	r2, [r1, #4]
 8002800:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002804:	4302      	orrs	r2, r0
 8002806:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002808:	071b      	lsls	r3, r3, #28
 800280a:	d507      	bpl.n	800281c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800280c:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 800280e:	6931      	ldr	r1, [r6, #16]
 8002810:	6853      	ldr	r3, [r2, #4]
 8002812:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002816:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800281a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800281c:	f7ff ff44 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002820:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002822:	4601      	mov	r1, r0
 8002824:	22f0      	movs	r2, #240	; 0xf0
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	fab2 f282 	clz	r2, r2
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	40d3      	lsrs	r3, r2
 8002836:	4818      	ldr	r0, [pc, #96]	; (8002898 <HAL_RCC_ClockConfig+0x188>)
 8002838:	4a18      	ldr	r2, [pc, #96]	; (800289c <HAL_RCC_ClockConfig+0x18c>)
 800283a:	5cc3      	ldrb	r3, [r0, r3]
  HAL_InitTick (TICK_INT_PRIORITY);
 800283c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283e:	fa21 f303 	lsr.w	r3, r1, r3
 8002842:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002844:	f7fe f9c4 	bl	8000bd0 <HAL_InitTick>
  return HAL_OK;
 8002848:	2000      	movs	r0, #0
}
 800284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284e:	f7fe f9ef 	bl	8000c30 <HAL_GetTick>
 8002852:	1bc0      	subs	r0, r0, r7
 8002854:	4540      	cmp	r0, r8
 8002856:	d805      	bhi.n	8002864 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	686b      	ldr	r3, [r5, #4]
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	2b08      	cmp	r3, #8
 8002860:	d1f5      	bne.n	800284e <HAL_RCC_ClockConfig+0x13e>
 8002862:	e7a9      	b.n	80027b8 <HAL_RCC_ClockConfig+0xa8>
          return HAL_TIMEOUT;
 8002864:	2003      	movs	r0, #3
 8002866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800286a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800286e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <HAL_RCC_ClockConfig+0x184>)
 8002874:	6809      	ldr	r1, [r1, #0]
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	420b      	tst	r3, r1
 8002888:	f47f af7c 	bne.w	8002784 <HAL_RCC_ClockConfig+0x74>
 800288c:	e7a4      	b.n	80027d8 <HAL_RCC_ClockConfig+0xc8>
 800288e:	bf00      	nop
 8002890:	40022000 	.word	0x40022000
 8002894:	40021000 	.word	0x40021000
 8002898:	0800638c 	.word	0x0800638c
 800289c:	20000010 	.word	0x20000010

080028a0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80028a0:	4b01      	ldr	r3, [pc, #4]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000010 	.word	0x20000010

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	fa92 f2a2 	rbit	r2, r2
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028c0:	40d3      	lsrs	r3, r2
 80028c2:	4904      	ldr	r1, [pc, #16]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	6810      	ldr	r0, [r2, #0]
}    
 80028ca:	40d8      	lsrs	r0, r3
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	0800639c 	.word	0x0800639c
 80028d8:	20000010 	.word	0x20000010

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	fab2 f282 	clz	r2, r2
 80028ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028f0:	40d3      	lsrs	r3, r2
 80028f2:	4904      	ldr	r1, [pc, #16]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	6810      	ldr	r0, [r2, #0]
} 
 80028fa:	40d8      	lsrs	r0, r3
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	0800639c 	.word	0x0800639c
 8002908:	20000010 	.word	0x20000010

0800290c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800290c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002910:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002912:	6800      	ldr	r0, [r0, #0]
 8002914:	03c5      	lsls	r5, r0, #15
{
 8002916:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002918:	d538      	bpl.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	00d1      	lsls	r1, r2, #3
 8002920:	d567      	bpl.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4d59      	ldr	r5, [pc, #356]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	05da      	lsls	r2, r3, #23
    FlagStatus       pwrclkchanged = RESET;
 8002928:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	d570      	bpl.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292e:	4d55      	ldr	r5, [pc, #340]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002930:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002932:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002936:	d01f      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002938:	6861      	ldr	r1, [r4, #4]
 800293a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800293e:	4293      	cmp	r3, r2
 8002940:	d01b      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002942:	6a29      	ldr	r1, [r5, #32]
 8002944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002948:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800294c:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002950:	4f4e      	ldr	r7, [pc, #312]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	443a      	add	r2, r7
 8002958:	0092      	lsls	r2, r2, #2
 800295a:	f04f 0e01 	mov.w	lr, #1
 800295e:	f8c2 e000 	str.w	lr, [r2]
 8002962:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	443b      	add	r3, r7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002970:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002972:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8002974:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002976:	d461      	bmi.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002978:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800297a:	4a42      	ldr	r2, [pc, #264]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800297c:	6a13      	ldr	r3, [r2, #32]
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	430b      	orrs	r3, r1
 8002984:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002986:	2e00      	cmp	r6, #0
 8002988:	d153      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x126>
 800298a:	6820      	ldr	r0, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298c:	07c5      	lsls	r5, r0, #31
 800298e:	d506      	bpl.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002990:	4a3c      	ldr	r2, [pc, #240]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002992:	68a1      	ldr	r1, [r4, #8]
 8002994:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	430b      	orrs	r3, r1
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800299e:	0681      	lsls	r1, r0, #26
 80029a0:	d506      	bpl.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029a2:	4a38      	ldr	r2, [pc, #224]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80029a4:	68e1      	ldr	r1, [r4, #12]
 80029a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029a8:	f023 0310 	bic.w	r3, r3, #16
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029b0:	0602      	lsls	r2, r0, #24
 80029b2:	d506      	bpl.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029b4:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80029b6:	6921      	ldr	r1, [r4, #16]
 80029b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029ba:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80029be:	430b      	orrs	r3, r1
 80029c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029c2:	04c3      	lsls	r3, r0, #19
 80029c4:	d40d      	bmi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80029c6:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80029ca:	d007      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80029cc:	4a2d      	ldr	r2, [pc, #180]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80029ce:	69a1      	ldr	r1, [r4, #24]
 80029d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029d6:	430b      	orrs	r3, r1
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029da:	2000      	movs	r0, #0
}
 80029dc:	b003      	add	sp, #12
 80029de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029e2:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80029e4:	6961      	ldr	r1, [r4, #20]
 80029e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6313      	str	r3, [r2, #48]	; 0x30
 80029f0:	e7e9      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4d24      	ldr	r5, [pc, #144]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029fa:	61da      	str	r2, [r3, #28]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	682b      	ldr	r3, [r5, #0]
 8002a08:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 8002a0a:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0e:	d48e      	bmi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x22>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002a18:	f7fe f90a 	bl	8000c30 <HAL_GetTick>
 8002a1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	05db      	lsls	r3, r3, #23
 8002a22:	d484      	bmi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x22>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a24:	f7fe f904 	bl	8000c30 <HAL_GetTick>
 8002a28:	1bc0      	subs	r0, r0, r7
 8002a2a:	2864      	cmp	r0, #100	; 0x64
 8002a2c:	d9f7      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 8002a2e:	2003      	movs	r0, #3
 8002a30:	e7d4      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a32:	69d3      	ldr	r3, [r2, #28]
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	61d3      	str	r3, [r2, #28]
 8002a3a:	e7a6      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	4677      	mov	r7, lr
        tickstart = HAL_GetTick();
 8002a3e:	f7fe f8f7 	bl	8000c30 <HAL_GetTick>
 8002a42:	f04f 0902 	mov.w	r9, #2
 8002a46:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e014      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a4a:	fa99 f3a9 	rbit	r3, r9
 8002a4e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002a50:	fa99 f3a9 	rbit	r3, r9
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	fa07 f303 	lsl.w	r3, r7, r3
 8002a60:	4213      	tst	r3, r2
 8002a62:	d189      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x6c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7fe f8e4 	bl	8000c30 <HAL_GetTick>
 8002a68:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a6c:	eba0 0008 	sub.w	r0, r0, r8
 8002a70:	4298      	cmp	r0, r3
 8002a72:	d8dc      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002a74:	fa99 f3a9 	rbit	r3, r9
 8002a78:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0e4      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8002a80:	6a2a      	ldr	r2, [r5, #32]
 8002a82:	e7e5      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	10908100 	.word	0x10908100

08002a90 <HAL_RTC_GetTime>:

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002a90:	6803      	ldr	r3, [r0, #0]
{
 8002a92:	b5f0      	push	{r4, r5, r6, r7, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002a94:	6a9d      	ldr	r5, [r3, #40]	; 0x28

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002a96:	691c      	ldr	r4, [r3, #16]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002a98:	681b      	ldr	r3, [r3, #0]
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002a9a:	604d      	str	r5, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8002a9c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002aa0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  
  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002aa4:	0c18      	lsrs	r0, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002aa6:	f3c3 2706 	ubfx	r7, r3, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002aaa:	f3c4 040e 	ubfx	r4, r4, #0, #15
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002aae:	b2db      	uxtb	r3, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002ab0:	f000 0e40 	and.w	lr, r0, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002ab4:	f000 063f 	and.w	r6, r0, #63	; 0x3f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ab8:	608c      	str	r4, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8002aba:	f881 e003 	strb.w	lr, [r1, #3]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002abe:	700e      	strb	r6, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8002ac0:	704f      	strb	r7, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002ac2:	708b      	strb	r3, [r1, #2]
  
  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002ac4:	b9ba      	cbnz	r2, 8002af6 <HAL_RTC_GetTime+0x66>
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002ac6:	093d      	lsrs	r5, r7, #4
 8002ac8:	091c      	lsrs	r4, r3, #4
 8002aca:	0936      	lsrs	r6, r6, #4
 8002acc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002ad0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002ad4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8002ad8:	f000 000f 	and.w	r0, r0, #15
 8002adc:	f007 070f 	and.w	r7, r7, #15
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8002ae8:	eb07 0545 	add.w	r5, r7, r5, lsl #1
 8002aec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002af0:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002af2:	704d      	strb	r5, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8002af4:	708c      	strb	r4, [r1, #2]
}
 8002af6:	2000      	movs	r0, #0
 8002af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afa:	bf00      	nop

08002afc <HAL_RTC_GetDate>:
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8002afc:	6803      	ldr	r3, [r0, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
{
 8002b08:	b4f0      	push	{r4, r5, r6, r7}
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b0a:	f3c3 2407 	ubfx	r4, r3, #8, #8
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b0e:	b2dd      	uxtb	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002b10:	f3c3 3742 	ubfx	r7, r3, #13, #3
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b14:	f004 061f 	and.w	r6, r4, #31
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002b18:	0c1b      	lsrs	r3, r3, #16
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8002b1a:	700f      	strb	r7, [r1, #0]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002b1c:	704e      	strb	r6, [r1, #1]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002b1e:	70cb      	strb	r3, [r1, #3]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b20:	708d      	strb	r5, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8002b22:	b9ba      	cbnz	r2, 8002b54 <HAL_RTC_GetDate+0x58>
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002b24:	0936      	lsrs	r6, r6, #4
 8002b26:	0928      	lsrs	r0, r5, #4
 8002b28:	091a      	lsrs	r2, r3, #4
 8002b2a:	00b7      	lsls	r7, r6, #2
 8002b2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8002b30:	f004 040f 	and.w	r4, r4, #15
 8002b34:	f005 050f 	and.w	r5, r5, #15
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8002b38:	443e      	add	r6, r7
 8002b3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  return (tmp + (Value & (uint8_t)0x0FU));
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8002b46:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8002b4a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8002b4e:	7088      	strb	r0, [r1, #2]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b50:	704c      	strb	r4, [r1, #1]
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b52:	70cb      	strb	r3, [r1, #3]
}
 8002b54:	2000      	movs	r0, #0
 8002b56:	bcf0      	pop	{r4, r5, r6, r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <HAL_RTC_WaitForSynchro>:
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b5c:	6802      	ldr	r2, [r0, #0]
{
 8002b5e:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b60:	68d3      	ldr	r3, [r2, #12]
 8002b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b66:	60d3      	str	r3, [r2, #12]
{
 8002b68:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8002b6a:	f7fe f861 	bl	8000c30 <HAL_GetTick>
 8002b6e:	4605      	mov	r5, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b70:	e005      	b.n	8002b7e <HAL_RTC_WaitForSynchro+0x22>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002b72:	f7fe f85d 	bl	8000c30 <HAL_GetTick>
 8002b76:	1b40      	subs	r0, r0, r5
 8002b78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002b7c:	d805      	bhi.n	8002b8a <HAL_RTC_WaitForSynchro+0x2e>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	d5f5      	bpl.n	8002b72 <HAL_RTC_WaitForSynchro+0x16>
  return HAL_OK;
 8002b86:	2000      	movs	r0, #0
 8002b88:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8002b8a:	2003      	movs	r0, #3
}
 8002b8c:	bd38      	pop	{r3, r4, r5, pc}
 8002b8e:	bf00      	nop

08002b90 <RTC_EnterInitMode>:
{
 8002b90:	b538      	push	{r3, r4, r5, lr}
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002b92:	6803      	ldr	r3, [r0, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	0652      	lsls	r2, r2, #25
 8002b98:	d501      	bpl.n	8002b9e <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8002ba6:	f7fe f843 	bl	8000c30 <HAL_GetTick>
 8002baa:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	065b      	lsls	r3, r3, #25
 8002bb2:	d4f2      	bmi.n	8002b9a <RTC_EnterInitMode+0xa>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8002bb4:	f7fe f83c 	bl	8000c30 <HAL_GetTick>
 8002bb8:	1b40      	subs	r0, r0, r5
 8002bba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002bbe:	d9f5      	bls.n	8002bac <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002bc0:	2003      	movs	r0, #3
}
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}

08002bc4 <HAL_RTC_Init>:
{
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hrtc == NULL)
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d050      	beq.n	8002c6c <HAL_RTC_Init+0xa8>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002bca:	7f43      	ldrb	r3, [r0, #29]
 8002bcc:	4604      	mov	r4, r0
 8002bce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d03f      	beq.n	8002c56 <HAL_RTC_Init+0x92>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bd6:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002bd8:	2002      	movs	r0, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bda:	21ca      	movs	r1, #202	; 0xca
 8002bdc:	2253      	movs	r2, #83	; 0x53
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002bde:	7760      	strb	r0, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be0:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002be2:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002be6:	f7ff ffd3 	bl	8002b90 <RTC_EnterInitMode>
 8002bea:	4605      	mov	r5, r0
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d12a      	bne.n	8002c46 <HAL_RTC_Init+0x82>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bf0:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bf2:	6862      	ldr	r2, [r4, #4]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bf4:	6899      	ldr	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bf6:	6927      	ldr	r7, [r4, #16]
 8002bf8:	6966      	ldr	r6, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002bfa:	68e0      	ldr	r0, [r4, #12]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bfc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8002c00:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002c04:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	433a      	orrs	r2, r7
 8002c0a:	4332      	orrs	r2, r6
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c10:	6118      	str	r0, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68a1      	ldr	r1, [r4, #8]
 8002c16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c22:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	0692      	lsls	r2, r2, #26
 8002c28:	d519      	bpl.n	8002c5e <HAL_RTC_Init+0x9a>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002c2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002c2c:	69a6      	ldr	r6, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002c2e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002c32:	6419      	str	r1, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c36:	20ff      	movs	r0, #255	; 0xff
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002c38:	4332      	orrs	r2, r6
    hrtc->State = HAL_RTC_STATE_READY;
 8002c3a:	2101      	movs	r1, #1
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c3e:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002c40:	7761      	strb	r1, [r4, #29]
}
 8002c42:	4628      	mov	r0, r5
 8002c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	2304      	movs	r3, #4
        return HAL_ERROR;
 8002c4c:	2501      	movs	r5, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c4e:	6251      	str	r1, [r2, #36]	; 0x24
}
 8002c50:	4628      	mov	r0, r5
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c52:	7763      	strb	r3, [r4, #29]
}
 8002c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002c56:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002c58:	f001 fdc6 	bl	80047e8 <HAL_RTC_MspInit>
 8002c5c:	e7bb      	b.n	8002bd6 <HAL_RTC_Init+0x12>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff ff7c 	bl	8002b5c <HAL_RTC_WaitForSynchro>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RTC_Init+0x82>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	e7de      	b.n	8002c2a <HAL_RTC_Init+0x66>
     return HAL_ERROR;
 8002c6c:	2501      	movs	r5, #1
}
 8002c6e:	4628      	mov	r0, r5
 8002c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c72:	bf00      	nop

08002c74 <HAL_RTC_SetTime>:
{
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002c76:	7f03      	ldrb	r3, [r0, #28]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d07b      	beq.n	8002d74 <HAL_RTC_SetTime+0x100>
 8002c7c:	460e      	mov	r6, r1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c7e:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8002c80:	2101      	movs	r1, #1
 8002c82:	7701      	strb	r1, [r0, #28]
 8002c84:	4605      	mov	r5, r0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c86:	7743      	strb	r3, [r0, #29]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c88:	6801      	ldr	r1, [r0, #0]
  if(Format == RTC_FORMAT_BIN)
 8002c8a:	2a00      	cmp	r2, #0
 8002c8c:	d039      	beq.n	8002d02 <HAL_RTC_SetTime+0x8e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c8e:	688c      	ldr	r4, [r1, #8]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002c90:	7870      	ldrb	r0, [r6, #1]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002c92:	7832      	ldrb	r2, [r6, #0]
              ((uint32_t)sTime->Seconds) | \
 8002c94:	78b3      	ldrb	r3, [r6, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002c96:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8002c9a:	bf14      	ite	ne
 8002c9c:	78f4      	ldrbne	r4, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8002c9e:	70f4      	strbeq	r4, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ca0:	ea4f 2000 	mov.w	r0, r0, lsl #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ca4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002ca8:	bf18      	it	ne
 8002caa:	0424      	lslne	r4, r4, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002cac:	4318      	orrs	r0, r3
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002cae:	4304      	orrs	r4, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb0:	22ca      	movs	r2, #202	; 0xca
 8002cb2:	2353      	movs	r3, #83	; 0x53
 8002cb4:	624a      	str	r2, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cb6:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cb8:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cba:	f7ff ff69 	bl	8002b90 <RTC_EnterInitMode>
 8002cbe:	4607      	mov	r7, r0
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d15a      	bne.n	8002d7a <HAL_RTC_SetTime+0x106>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cc4:	682b      	ldr	r3, [r5, #0]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cc6:	68f2      	ldr	r2, [r6, #12]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cc8:	f004 307f 	and.w	r0, r4, #2139062143	; 0x7f7f7f7f
 8002ccc:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cd0:	6934      	ldr	r4, [r6, #16]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002cd2:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002cda:	6099      	str	r1, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	4322      	orrs	r2, r4
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cea:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	0692      	lsls	r2, r2, #26
 8002cf0:	d54d      	bpl.n	8002d8e <HAL_RTC_SetTime+0x11a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf2:	20ff      	movs	r0, #255	; 0xff
   hrtc->State = HAL_RTC_STATE_READY;
 8002cf4:	2101      	movs	r1, #1
   __HAL_UNLOCK(hrtc); 
 8002cf6:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf8:	6258      	str	r0, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002cfa:	7769      	strb	r1, [r5, #29]
   __HAL_UNLOCK(hrtc); 
 8002cfc:	772a      	strb	r2, [r5, #28]
}
 8002cfe:	4638      	mov	r0, r7
 8002d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d02:	688f      	ldr	r7, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d04:	7830      	ldrb	r0, [r6, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d06:	f017 0740 	ands.w	r7, r7, #64	; 0x40
 8002d0a:	bf16      	itet	ne
 8002d0c:	78f7      	ldrbne	r7, [r6, #3]
      sTime->TimeFormat = 0x00U;
 8002d0e:	70f7      	strbeq	r7, [r6, #3]
 8002d10:	043f      	lslne	r7, r7, #16
  while(Value >= 10U)
 8002d12:	2809      	cmp	r0, #9
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	d907      	bls.n	8002d2a <HAL_RTC_SetTime+0xb6>
    Value -= 10U;
 8002d1a:	380a      	subs	r0, #10
 8002d1c:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002d1e:	2809      	cmp	r0, #9
    bcdhigh++;
 8002d20:	f104 0401 	add.w	r4, r4, #1
  while(Value >= 10U)
 8002d24:	d8f9      	bhi.n	8002d1a <HAL_RTC_SetTime+0xa6>
 8002d26:	0124      	lsls	r4, r4, #4
 8002d28:	b2e4      	uxtb	r4, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d2a:	7873      	ldrb	r3, [r6, #1]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d2c:	4320      	orrs	r0, r4
  while(Value >= 10U)
 8002d2e:	2b09      	cmp	r3, #9
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d30:	ea4f 4400 	mov.w	r4, r0, lsl #16
  while(Value >= 10U)
 8002d34:	d939      	bls.n	8002daa <HAL_RTC_SetTime+0x136>
 8002d36:	2000      	movs	r0, #0
    Value -= 10U;
 8002d38:	3b0a      	subs	r3, #10
 8002d3a:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002d3c:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002d3e:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002d42:	d8f9      	bhi.n	8002d38 <HAL_RTC_SetTime+0xc4>
 8002d44:	0100      	lsls	r0, r0, #4
 8002d46:	fa5f fe80 	uxtb.w	lr, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002d4a:	78b0      	ldrb	r0, [r6, #2]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d4c:	ea43 030e 	orr.w	r3, r3, lr
  while(Value >= 10U)
 8002d50:	2809      	cmp	r0, #9
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d52:	ea4f 2303 	mov.w	r3, r3, lsl #8
  while(Value >= 10U)
 8002d56:	d92b      	bls.n	8002db0 <HAL_RTC_SetTime+0x13c>
    Value -= 10U;
 8002d58:	380a      	subs	r0, #10
 8002d5a:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002d5c:	2809      	cmp	r0, #9
    bcdhigh++;
 8002d5e:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002d62:	d8f9      	bhi.n	8002d58 <HAL_RTC_SetTime+0xe4>
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d68:	433c      	orrs	r4, r7
 8002d6a:	4323      	orrs	r3, r4
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002d6c:	4310      	orrs	r0, r2
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d6e:	ea43 0400 	orr.w	r4, r3, r0
 8002d72:	e79d      	b.n	8002cb0 <HAL_RTC_SetTime+0x3c>
  __HAL_LOCK(hrtc);
 8002d74:	2702      	movs	r7, #2
}
 8002d76:	4638      	mov	r0, r7
 8002d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d7a:	6829      	ldr	r1, [r5, #0]
 8002d7c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d7e:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8002d80:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002d82:	2701      	movs	r7, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d84:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d86:	776a      	strb	r2, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002d88:	772b      	strb	r3, [r5, #28]
}
 8002d8a:	4638      	mov	r0, r7
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f7ff fee4 	bl	8002b5c <HAL_RTC_WaitForSynchro>
 8002d94:	b908      	cbnz	r0, 8002d9a <HAL_RTC_SetTime+0x126>
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	e7ab      	b.n	8002cf2 <HAL_RTC_SetTime+0x7e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d9a:	682a      	ldr	r2, [r5, #0]
 8002d9c:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d9e:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002da0:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002da2:	772f      	strb	r7, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002da4:	776b      	strb	r3, [r5, #29]
        return HAL_ERROR;
 8002da6:	2701      	movs	r7, #1
 8002da8:	e7a9      	b.n	8002cfe <HAL_RTC_SetTime+0x8a>
  while(Value >= 10U)
 8002daa:	f04f 0e00 	mov.w	lr, #0
 8002dae:	e7cc      	b.n	8002d4a <HAL_RTC_SetTime+0xd6>
 8002db0:	2200      	movs	r2, #0
 8002db2:	e7d9      	b.n	8002d68 <HAL_RTC_SetTime+0xf4>

08002db4 <HAL_RTC_SetDate>:
 __HAL_LOCK(hrtc);
 8002db4:	7f03      	ldrb	r3, [r0, #28]
 8002db6:	2b01      	cmp	r3, #1
{
 8002db8:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002dba:	d063      	beq.n	8002e84 <HAL_RTC_SetDate+0xd0>
 8002dbc:	4604      	mov	r4, r0
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002dbe:	2302      	movs	r3, #2
 __HAL_LOCK(hrtc);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002dc4:	7763      	strb	r3, [r4, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002dc6:	b34a      	cbz	r2, 8002e1c <HAL_RTC_SetDate+0x68>
                  (((uint32_t)sDate->Month) << 8U) | \
 8002dc8:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dca:	78ca      	ldrb	r2, [r1, #3]
                  ((uint32_t)sDate->Date) | \
 8002dcc:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8002dce:	780d      	ldrb	r5, [r1, #0]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002dd0:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002dd6:	4318      	orrs	r0, r3
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002dd8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	21ca      	movs	r1, #202	; 0xca
 8002de0:	2253      	movs	r2, #83	; 0x53
 8002de2:	6259      	str	r1, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002de4:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002de8:	f7ff fed2 	bl	8002b90 <RTC_EnterInitMode>
 8002dec:	4606      	mov	r6, r0
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d14b      	bne.n	8002e8a <HAL_RTC_SetDate+0xd6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002df8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002dfc:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e04:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	0692      	lsls	r2, r2, #26
 8002e0a:	d54e      	bpl.n	8002eaa <HAL_RTC_SetDate+0xf6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e0c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e0e:	2101      	movs	r1, #1
    __HAL_UNLOCK(hrtc);
 8002e10:	2200      	movs	r2, #0
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e12:	6258      	str	r0, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002e14:	7761      	strb	r1, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002e16:	7722      	strb	r2, [r4, #28]
}
 8002e18:	4630      	mov	r0, r6
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002e1c:	784e      	ldrb	r6, [r1, #1]
 8002e1e:	06f0      	lsls	r0, r6, #27
 8002e20:	d43d      	bmi.n	8002e9e <HAL_RTC_SetDate+0xea>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e22:	78cb      	ldrb	r3, [r1, #3]
  while(Value >= 10U)
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	d907      	bls.n	8002e3c <HAL_RTC_SetDate+0x88>
    Value -= 10U;
 8002e2c:	3b0a      	subs	r3, #10
 8002e2e:	b2db      	uxtb	r3, r3
  while(Value >= 10U)
 8002e30:	2b09      	cmp	r3, #9
    bcdhigh++;
 8002e32:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002e36:	d8f9      	bhi.n	8002e2c <HAL_RTC_SetDate+0x78>
 8002e38:	0100      	lsls	r0, r0, #4
 8002e3a:	b2c0      	uxtb	r0, r0
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e3c:	4303      	orrs	r3, r0
  while(Value >= 10U)
 8002e3e:	2e09      	cmp	r6, #9
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e40:	ea4f 4303 	mov.w	r3, r3, lsl #16
  while(Value >= 10U)
 8002e44:	d93f      	bls.n	8002ec6 <HAL_RTC_SetDate+0x112>
 8002e46:	2000      	movs	r0, #0
    Value -= 10U;
 8002e48:	f1a6 050a 	sub.w	r5, r6, #10
 8002e4c:	b2ee      	uxtb	r6, r5
  while(Value >= 10U)
 8002e4e:	2e09      	cmp	r6, #9
    bcdhigh++;
 8002e50:	f100 0001 	add.w	r0, r0, #1
  while(Value >= 10U)
 8002e54:	d8f8      	bhi.n	8002e48 <HAL_RTC_SetDate+0x94>
 8002e56:	0105      	lsls	r5, r0, #4
 8002e58:	b2ed      	uxtb	r5, r5
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e5a:	7888      	ldrb	r0, [r1, #2]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e5c:	4335      	orrs	r5, r6
  while(Value >= 10U)
 8002e5e:	2809      	cmp	r0, #9
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002e60:	ea4f 2505 	mov.w	r5, r5, lsl #8
  while(Value >= 10U)
 8002e64:	d931      	bls.n	8002eca <HAL_RTC_SetDate+0x116>
    Value -= 10U;
 8002e66:	380a      	subs	r0, #10
 8002e68:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8002e6a:	2809      	cmp	r0, #9
    bcdhigh++;
 8002e6c:	f102 0201 	add.w	r2, r2, #1
  while(Value >= 10U)
 8002e70:	d8f9      	bhi.n	8002e66 <HAL_RTC_SetDate+0xb2>
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
                 ((uint32_t)sDate->WeekDay << 13U));   
 8002e76:	7809      	ldrb	r1, [r1, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e78:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8002e7c:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002e7e:	4310      	orrs	r0, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002e80:	4305      	orrs	r5, r0
 8002e82:	e7ab      	b.n	8002ddc <HAL_RTC_SetDate+0x28>
 __HAL_LOCK(hrtc);
 8002e84:	2602      	movs	r6, #2
}
 8002e86:	4630      	mov	r0, r6
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e8a:	6821      	ldr	r1, [r4, #0]
 8002e8c:	20ff      	movs	r0, #255	; 0xff
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e8e:	2204      	movs	r2, #4
    __HAL_UNLOCK(hrtc);
 8002e90:	2300      	movs	r3, #0
    return HAL_ERROR;
 8002e92:	2601      	movs	r6, #1
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002e94:	6248      	str	r0, [r1, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e96:	7762      	strb	r2, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8002e98:	7723      	strb	r3, [r4, #28]
}
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002e9e:	f026 0510 	bic.w	r5, r6, #16
 8002ea2:	350a      	adds	r5, #10
 8002ea4:	b2ee      	uxtb	r6, r5
 8002ea6:	704e      	strb	r6, [r1, #1]
 8002ea8:	e7bb      	b.n	8002e22 <HAL_RTC_SetDate+0x6e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f7ff fe56 	bl	8002b5c <HAL_RTC_WaitForSynchro>
 8002eb0:	b908      	cbnz	r0, 8002eb6 <HAL_RTC_SetDate+0x102>
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	e7aa      	b.n	8002e0c <HAL_RTC_SetDate+0x58>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002eb6:	6822      	ldr	r2, [r4, #0]
 8002eb8:	21ff      	movs	r1, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002eba:	2304      	movs	r3, #4
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002ebc:	6251      	str	r1, [r2, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8002ebe:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ec0:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8002ec2:	2601      	movs	r6, #1
 8002ec4:	e7a8      	b.n	8002e18 <HAL_RTC_SetDate+0x64>
  while(Value >= 10U)
 8002ec6:	2500      	movs	r5, #0
 8002ec8:	e7c7      	b.n	8002e5a <HAL_RTC_SetDate+0xa6>
 8002eca:	2200      	movs	r2, #0
 8002ecc:	e7d3      	b.n	8002e76 <HAL_RTC_SetDate+0xc2>
 8002ece:	bf00      	nop

08002ed0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ed4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop

08002edc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0U;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002edc:	6803      	ldr	r3, [r0, #0]
 8002ede:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ee0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ee8:	6803      	ldr	r3, [r0, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002efa:	2000      	movs	r0, #0
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002f00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d040      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x8a>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	2202      	movs	r2, #2
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f0a:	6803      	ldr	r3, [r0, #0]
{
 8002f0c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f12:	689d      	ldr	r5, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002f14:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f16:	4a5d      	ldr	r2, [pc, #372]	; (800308c <HAL_TIM_ConfigClockSource+0x18c>)
  switch (sClockSourceConfig->ClockSource)
 8002f18:	2c40      	cmp	r4, #64	; 0x40
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f1a:	ea02 0205 	and.w	r2, r2, r5
  __HAL_LOCK(htim);
 8002f1e:	f04f 0501 	mov.w	r5, #1
 8002f22:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8002f26:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f28:	d079      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x11e>
 8002f2a:	d918      	bls.n	8002f5e <HAL_TIM_ConfigClockSource+0x5e>
 8002f2c:	2c70      	cmp	r4, #112	; 0x70
 8002f2e:	d062      	beq.n	8002ff6 <HAL_TIM_ConfigClockSource+0xf6>
 8002f30:	d92d      	bls.n	8002f8e <HAL_TIM_ConfigClockSource+0x8e>
 8002f32:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002f36:	d057      	beq.n	8002fe8 <HAL_TIM_ConfigClockSource+0xe8>
 8002f38:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8002f3c:	d11c      	bne.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f3e:	688a      	ldr	r2, [r1, #8]
 8002f40:	684d      	ldr	r5, [r1, #4]
 8002f42:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002f44:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f46:	432a      	orrs	r2, r5
 8002f48:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f50:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f5a:	609a      	str	r2, [r3, #8]
    break;
 8002f5c:	e00c      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002f5e:	2c10      	cmp	r4, #16
 8002f60:	d032      	beq.n	8002fc8 <HAL_TIM_ConfigClockSource+0xc8>
 8002f62:	d938      	bls.n	8002fd6 <HAL_TIM_ConfigClockSource+0xd6>
 8002f64:	2c20      	cmp	r4, #32
 8002f66:	d072      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x14e>
 8002f68:	2c30      	cmp	r4, #48	; 0x30
 8002f6a:	d105      	bne.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002f6c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002f6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002f72:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 8002f76:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8002f78:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002f84:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8002f86:	4618      	mov	r0, r3
}
 8002f88:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002f8e:	2c50      	cmp	r4, #80	; 0x50
 8002f90:	d064      	beq.n	800305c <HAL_TIM_ConfigClockSource+0x15c>
 8002f92:	2c60      	cmp	r4, #96	; 0x60
 8002f94:	d1f0      	bne.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f96:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002f98:	684d      	ldr	r5, [r1, #4]
 8002f9a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f9c:	f024 0410 	bic.w	r4, r4, #16
 8002fa0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002faa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fae:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb8:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002fba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fc0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	e7d7      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002fc8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fce:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	e7d0      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8002fd6:	2c00      	cmp	r4, #0
 8002fd8:	d1ce      	bne.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8002fda:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002fdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002fe0:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	e7c7      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fee:	f022 0207 	bic.w	r2, r2, #7
 8002ff2:	609a      	str	r2, [r3, #8]
    break;
 8002ff4:	e7c0      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff6:	688a      	ldr	r2, [r1, #8]
 8002ff8:	684d      	ldr	r5, [r1, #4]
 8002ffa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002ffc:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ffe:	432a      	orrs	r2, r5
 8003000:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003004:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003008:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800300a:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800300c:	689a      	ldr	r2, [r3, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800300e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003012:	f022 0277 	bic.w	r2, r2, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003016:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800301a:	609a      	str	r2, [r3, #8]
    break;
 800301c:	e7ac      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 800301e:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003020:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003022:	684c      	ldr	r4, [r1, #4]
 8003024:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003026:	f026 0601 	bic.w	r6, r6, #1
 800302a:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800302c:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302e:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003032:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003036:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800303a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800303c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8003040:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003046:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e794      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 800304e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003050:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003054:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	e78d      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 800305c:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305e:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8003060:	684c      	ldr	r4, [r1, #4]
 8003062:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003064:	f026 0601 	bic.w	r6, r6, #1
 8003068:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800306a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800306c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003070:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003074:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003078:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800307a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800307c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800307e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8003080:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003084:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	e775      	b.n	8002f78 <HAL_TIM_ConfigClockSource+0x78>
 800308c:	fffe0088 	.word	0xfffe0088

08003090 <HAL_TIM_PeriodElapsedCallback>:
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop

08003094 <HAL_TIM_OC_DelayElapsedCallback>:
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <HAL_TIM_IC_CaptureCallback>:
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop

0800309c <HAL_TIM_PWM_PulseFinishedCallback>:
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop

080030a0 <HAL_TIM_TriggerCallback>:
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop

080030a4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a4:	6803      	ldr	r3, [r0, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	0791      	lsls	r1, r2, #30
{
 80030aa:	b510      	push	{r4, lr}
 80030ac:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030ae:	d502      	bpl.n	80030b6 <HAL_TIM_IRQHandler+0x12>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	0792      	lsls	r2, r2, #30
 80030b4:	d465      	bmi.n	8003182 <HAL_TIM_IRQHandler+0xde>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	0752      	lsls	r2, r2, #29
 80030ba:	d502      	bpl.n	80030c2 <HAL_TIM_IRQHandler+0x1e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	0750      	lsls	r0, r2, #29
 80030c0:	d44c      	bmi.n	800315c <HAL_TIM_IRQHandler+0xb8>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	0711      	lsls	r1, r2, #28
 80030c6:	d502      	bpl.n	80030ce <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80030c8:	68da      	ldr	r2, [r3, #12]
 80030ca:	0712      	lsls	r2, r2, #28
 80030cc:	d434      	bmi.n	8003138 <HAL_TIM_IRQHandler+0x94>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	06d0      	lsls	r0, r2, #27
 80030d2:	d502      	bpl.n	80030da <HAL_TIM_IRQHandler+0x36>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	06d1      	lsls	r1, r2, #27
 80030d8:	d41e      	bmi.n	8003118 <HAL_TIM_IRQHandler+0x74>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	07d2      	lsls	r2, r2, #31
 80030de:	d502      	bpl.n	80030e6 <HAL_TIM_IRQHandler+0x42>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	07d0      	lsls	r0, r2, #31
 80030e4:	d46b      	bmi.n	80031be <HAL_TIM_IRQHandler+0x11a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	0611      	lsls	r1, r2, #24
 80030ea:	d502      	bpl.n	80030f2 <HAL_TIM_IRQHandler+0x4e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	0612      	lsls	r2, r2, #24
 80030f0:	d46d      	bmi.n	80031ce <HAL_TIM_IRQHandler+0x12a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	05d0      	lsls	r0, r2, #23
 80030f6:	d502      	bpl.n	80030fe <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	0611      	lsls	r1, r2, #24
 80030fc:	d46f      	bmi.n	80031de <HAL_TIM_IRQHandler+0x13a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	0652      	lsls	r2, r2, #25
 8003102:	d502      	bpl.n	800310a <HAL_TIM_IRQHandler+0x66>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	0650      	lsls	r0, r2, #25
 8003108:	d451      	bmi.n	80031ae <HAL_TIM_IRQHandler+0x10a>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	0691      	lsls	r1, r2, #26
 800310e:	d502      	bpl.n	8003116 <HAL_TIM_IRQHandler+0x72>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	0692      	lsls	r2, r2, #26
 8003114:	d443      	bmi.n	800319e <HAL_TIM_IRQHandler+0xfa>
 8003116:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003118:	f06f 0210 	mvn.w	r2, #16
 800311c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800311e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003120:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003122:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003126:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003128:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312a:	d06c      	beq.n	8003206 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_IC_CaptureCallback(htim);
 800312c:	f7ff ffb4 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003130:	2200      	movs	r2, #0
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	7722      	strb	r2, [r4, #28]
 8003136:	e7d0      	b.n	80030da <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003138:	f06f 0208 	mvn.w	r2, #8
 800313c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003140:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003142:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003144:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003148:	d15a      	bne.n	8003200 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314a:	f7ff ffa3 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff ffa4 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003154:	2200      	movs	r2, #0
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	7722      	strb	r2, [r4, #28]
 800315a:	e7b8      	b.n	80030ce <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800315c:	f06f 0204 	mvn.w	r2, #4
 8003160:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003162:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003164:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003166:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800316c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800316e:	d144      	bne.n	80031fa <HAL_TIM_IRQHandler+0x156>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003170:	f7ff ff90 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff ff91 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	2200      	movs	r2, #0
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	7722      	strb	r2, [r4, #28]
 8003180:	e79f      	b.n	80030c2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003182:	f06f 0202 	mvn.w	r2, #2
 8003186:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003188:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003190:	d02d      	beq.n	80031ee <HAL_TIM_IRQHandler+0x14a>
          HAL_TIM_IC_CaptureCallback(htim);
 8003192:	f7ff ff81 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	2200      	movs	r2, #0
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	7722      	strb	r2, [r4, #28]
 800319c:	e78b      	b.n	80030b6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800319e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80031a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031a4:	611a      	str	r2, [r3, #16]
}
 80031a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80031aa:	f000 b8d5 	b.w	8003358 <HAL_TIMEx_CommutationCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80031b4:	4620      	mov	r0, r4
 80031b6:	f7ff ff73 	bl	80030a0 <HAL_TIM_TriggerCallback>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	e7a5      	b.n	800310a <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031be:	f06f 0201 	mvn.w	r2, #1
 80031c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff ff63 	bl	8003090 <HAL_TIM_PeriodElapsedCallback>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	e78b      	b.n	80030e6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80031d4:	4620      	mov	r0, r4
 80031d6:	f000 f8c1 	bl	800335c <HAL_TIMEx_BreakCallback>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	e789      	b.n	80030f2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 f8bb 	bl	8003360 <HAL_TIMEx_Break2Callback>
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	e787      	b.n	80030fe <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	f7ff ff51 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f2:	4620      	mov	r0, r4
 80031f4:	f7ff ff52 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
 80031f8:	e7cd      	b.n	8003196 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	f7ff ff4d 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
 80031fe:	e7bc      	b.n	800317a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003200:	f7ff ff4a 	bl	8003098 <HAL_TIM_IC_CaptureCallback>
 8003204:	e7a6      	b.n	8003154 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	f7ff ff45 	bl	8003094 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff ff46 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
 8003210:	e78e      	b.n	8003130 <HAL_TIM_IRQHandler+0x8c>
 8003212:	bf00      	nop

08003214 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <TIM_Base_SetConfig+0xb8>)
  tmpcr1 = TIMx->CR1;
 8003216:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003218:	4290      	cmp	r0, r2
{
 800321a:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	d04e      	beq.n	80032bc <TIM_Base_SetConfig+0xa8>
 800321e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003222:	d02f      	beq.n	8003284 <TIM_Base_SetConfig+0x70>
 8003224:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003228:	4290      	cmp	r0, r2
 800322a:	d02b      	beq.n	8003284 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322c:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8003230:	4290      	cmp	r0, r2
 8003232:	d014      	beq.n	800325e <TIM_Base_SetConfig+0x4a>
 8003234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003238:	4290      	cmp	r0, r2
 800323a:	d010      	beq.n	800325e <TIM_Base_SetConfig+0x4a>
 800323c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003240:	4290      	cmp	r0, r2
 8003242:	d00c      	beq.n	800325e <TIM_Base_SetConfig+0x4a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003246:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003248:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003250:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003252:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003254:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003256:	6282      	str	r2, [r0, #40]	; 0x28
}
 8003258:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800325a:	6143      	str	r3, [r0, #20]
}
 800325c:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325e:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003268:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800326c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800326e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003270:	688b      	ldr	r3, [r1, #8]
 8003272:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003274:	680b      	ldr	r3, [r1, #0]
 8003276:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003278:	690b      	ldr	r3, [r1, #16]
 800327a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800327c:	2301      	movs	r3, #1
 800327e:	6143      	str	r3, [r0, #20]
}
 8003280:	bcf0      	pop	{r4, r5, r6, r7}
 8003282:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003284:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003286:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003288:	694a      	ldr	r2, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800328a:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800328c:	680d      	ldr	r5, [r1, #0]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003292:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003298:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800329a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800329e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80032a0:	6003      	str	r3, [r0, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <TIM_Base_SetConfig+0xbc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a4:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032a6:	4298      	cmp	r0, r3
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80032a8:	6285      	str	r5, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80032aa:	d0e5      	beq.n	8003278 <TIM_Base_SetConfig+0x64>
 80032ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b0:	4298      	cmp	r0, r3
 80032b2:	d0e1      	beq.n	8003278 <TIM_Base_SetConfig+0x64>
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	2301      	movs	r3, #1
 80032b6:	6143      	str	r3, [r0, #20]
}
 80032b8:	bcf0      	pop	{r4, r5, r6, r7}
 80032ba:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80032bc:	684d      	ldr	r5, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032be:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c0:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80032c6:	432b      	orrs	r3, r5
 80032c8:	e7cb      	b.n	8003262 <TIM_Base_SetConfig+0x4e>
 80032ca:	bf00      	nop
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	40014400 	.word	0x40014400

080032d4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80032d4:	b1b8      	cbz	r0, 8003306 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 80032d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{ 
 80032da:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80032dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e0:	4604      	mov	r4, r0
 80032e2:	b15b      	cbz	r3, 80032fc <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 80032e4:	2302      	movs	r3, #2
 80032e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80032ea:	6820      	ldr	r0, [r4, #0]
 80032ec:	1d21      	adds	r1, r4, #4
 80032ee:	f7ff ff91 	bl	8003214 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80032f8:	2000      	movs	r0, #0
 80032fa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80032fc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003300:	f001 fa88 	bl	8004814 <HAL_TIM_Base_MspInit>
 8003304:	e7ee      	b.n	80032e4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003306:	2001      	movs	r0, #1
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop

0800330c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800330c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003310:	2b01      	cmp	r3, #1
 8003312:	d016      	beq.n	8003342 <HAL_TIMEx_MasterConfigSynchronization+0x36>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003314:	6802      	ldr	r2, [r0, #0]
{
 8003316:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003318:	4d0e      	ldr	r5, [pc, #56]	; (8003354 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800331a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800331c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800331e:	42aa      	cmp	r2, r5
 8003320:	d012      	beq.n	8003348 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003322:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003324:	688d      	ldr	r5, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800332a:	f024 0180 	bic.w	r1, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800332e:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8003330:	2400      	movs	r4, #0
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003332:	4329      	orrs	r1, r5
  htim->Instance->CR2 = tmpcr2;
 8003334:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8003336:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8003338:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  
  return HAL_OK;
} 
 800333c:	4620      	mov	r0, r4
 800333e:	bc70      	pop	{r4, r5, r6}
 8003340:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003342:	2302      	movs	r3, #2
} 
 8003344:	4618      	mov	r0, r3
 8003346:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003348:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800334a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800334e:	432b      	orrs	r3, r5
 8003350:	e7e7      	b.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0x16>
 8003352:	bf00      	nop
 8003354:	40012c00 	.word	0x40012c00

08003358 <HAL_TIMEx_CommutationCallback>:
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_TIMEx_BreakCallback>:
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003364:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8003368:	2b20      	cmp	r3, #32
 800336a:	d001      	beq.n	8003370 <HAL_UART_Receive_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800336c:	2002      	movs	r0, #2
  }
}
 800336e:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8003370:	b349      	cbz	r1, 80033c6 <HAL_UART_Receive_IT+0x62>
 8003372:	b342      	cbz	r2, 80033c6 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8003374:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8003378:	2b01      	cmp	r3, #1
 800337a:	d0f7      	beq.n	800336c <HAL_UART_Receive_IT+0x8>
    UART_MASK_COMPUTATION(huart);
 800337c:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 800337e:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    __HAL_LOCK(huart);
 8003384:	f04f 0101 	mov.w	r1, #1
    huart->RxXferSize = Size;
 8003388:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800338c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    __HAL_LOCK(huart);
 8003390:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8003394:	d027      	beq.n	80033e6 <HAL_UART_Receive_IT+0x82>
 8003396:	b9c3      	cbnz	r3, 80033ca <HAL_UART_Receive_IT+0x66>
 8003398:	6903      	ldr	r3, [r0, #16]
 800339a:	b303      	cbz	r3, 80033de <HAL_UART_Receive_IT+0x7a>
 800339c:	237f      	movs	r3, #127	; 0x7f
 800339e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	6802      	ldr	r2, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a6:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033aa:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	6891      	ldr	r1, [r2, #8]
    __HAL_UNLOCK(huart);
 80033b0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b4:	f041 0101 	orr.w	r1, r1, #1
 80033b8:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	f441 7190 	orr.w	r1, r1, #288	; 0x120
    return HAL_OK;
 80033c0:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033c2:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 80033c4:	4770      	bx	lr
      return HAL_ERROR;
 80033c6:	2001      	movs	r0, #1
 80033c8:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80033ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033ce:	d1e8      	bne.n	80033a2 <HAL_UART_Receive_IT+0x3e>
 80033d0:	6903      	ldr	r3, [r0, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0e2      	beq.n	800339c <HAL_UART_Receive_IT+0x38>
 80033d6:	233f      	movs	r3, #63	; 0x3f
 80033d8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033dc:	e7e1      	b.n	80033a2 <HAL_UART_Receive_IT+0x3e>
 80033de:	23ff      	movs	r3, #255	; 0xff
 80033e0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033e4:	e7dd      	b.n	80033a2 <HAL_UART_Receive_IT+0x3e>
 80033e6:	6903      	ldr	r3, [r0, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f8      	bne.n	80033de <HAL_UART_Receive_IT+0x7a>
 80033ec:	f240 13ff 	movw	r3, #511	; 0x1ff
 80033f0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80033f4:	e7d5      	b.n	80033a2 <HAL_UART_Receive_IT+0x3e>
 80033f6:	bf00      	nop

080033f8 <HAL_UART_TxCpltCallback>:
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop

080033fc <HAL_UART_ErrorCallback>:
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop

08003400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003400:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003402:	6a43      	ldr	r3, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003404:	2200      	movs	r2, #0
 8003406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;

  HAL_UART_ErrorCallback(huart);
 800340a:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 800340c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003410:	f7ff fff4 	bl	80033fc <HAL_UART_ErrorCallback>
 8003414:	bd08      	pop	{r3, pc}
 8003416:	bf00      	nop

08003418 <UART_SetConfig>:
{
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800341a:	6804      	ldr	r4, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800341c:	6907      	ldr	r7, [r0, #16]
 800341e:	6883      	ldr	r3, [r0, #8]
 8003420:	6946      	ldr	r6, [r0, #20]
 8003422:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003424:	4a62      	ldr	r2, [pc, #392]	; (80035b0 <UART_SetConfig+0x198>)
{
 8003426:	4605      	mov	r5, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003428:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800342a:	6820      	ldr	r0, [r4, #0]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800342c:	6a2f      	ldr	r7, [r5, #32]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800342e:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003430:	4002      	ands	r2, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003432:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003434:	4313      	orrs	r3, r2
 8003436:	6023      	str	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003438:	6862      	ldr	r2, [r4, #4]
 800343a:	68ee      	ldr	r6, [r5, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800343c:	69ab      	ldr	r3, [r5, #24]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800343e:	485d      	ldr	r0, [pc, #372]	; (80035b4 <UART_SetConfig+0x19c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003444:	4332      	orrs	r2, r6
 8003446:	6062      	str	r2, [r4, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003448:	68a2      	ldr	r2, [r4, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800344a:	433b      	orrs	r3, r7
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800344c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003450:	4313      	orrs	r3, r2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003452:	4284      	cmp	r4, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003454:	60a3      	str	r3, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003456:	d01b      	beq.n	8003490 <UART_SetConfig+0x78>
 8003458:	4b57      	ldr	r3, [pc, #348]	; (80035b8 <UART_SetConfig+0x1a0>)
 800345a:	429c      	cmp	r4, r3
 800345c:	d00a      	beq.n	8003474 <UART_SetConfig+0x5c>
 800345e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003462:	429c      	cmp	r4, r3
 8003464:	d006      	beq.n	8003474 <UART_SetConfig+0x5c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003466:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800346a:	d158      	bne.n	800351e <UART_SetConfig+0x106>
 800346c:	2300      	movs	r3, #0
        ret = HAL_ERROR;
 800346e:	2001      	movs	r0, #1
    huart->Instance->BRR = brrtemp;
 8003470:	60e3      	str	r3, [r4, #12]
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003474:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003478:	d053      	beq.n	8003522 <UART_SetConfig+0x10a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800347a:	f7ff fa17 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 800347e:	686b      	ldr	r3, [r5, #4]
 8003480:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003484:	fbb0 f0f3 	udiv	r0, r0, r3
 8003488:	b280      	uxth	r0, r0
 800348a:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800348c:	2000      	movs	r0, #0
        break;
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003490:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <UART_SetConfig+0x1a4>)
 8003492:	4a4b      	ldr	r2, [pc, #300]	; (80035c0 <UART_SetConfig+0x1a8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800349e:	5cd3      	ldrb	r3, [r2, r3]
 80034a0:	d051      	beq.n	8003546 <UART_SetConfig+0x12e>
    switch (clocksource)
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d83b      	bhi.n	800351e <UART_SetConfig+0x106>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <UART_SetConfig+0x94>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	0800347b 	.word	0x0800347b
 80034b0:	08003519 	.word	0x08003519
 80034b4:	080034ff 	.word	0x080034ff
 80034b8:	0800351f 	.word	0x0800351f
 80034bc:	080034e7 	.word	0x080034e7
 80034c0:	0800351f 	.word	0x0800351f
 80034c4:	0800351f 	.word	0x0800351f
 80034c8:	0800351f 	.word	0x0800351f
 80034cc:	080034d1 	.word	0x080034d1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034d0:	686a      	ldr	r2, [r5, #4]
 80034d2:	4938      	ldr	r1, [pc, #224]	; (80035b4 <UART_SetConfig+0x19c>)
 80034d4:	0853      	lsrs	r3, r2, #1
 80034d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034da:	fbb3 f3f2 	udiv	r3, r3, r2
 80034de:	b29b      	uxth	r3, r3
 80034e0:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034e2:	2000      	movs	r0, #0
        break;
 80034e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034e6:	f7ff f8df 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 80034ea:	686b      	ldr	r3, [r5, #4]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <UART_SetConfig+0x19c>)
 80034ee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80034f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80034f6:	b280      	uxth	r0, r0
 80034f8:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034fa:	2000      	movs	r0, #0
        break;
 80034fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034fe:	686a      	ldr	r2, [r5, #4]
 8003500:	492c      	ldr	r1, [pc, #176]	; (80035b4 <UART_SetConfig+0x19c>)
 8003502:	0853      	lsrs	r3, r2, #1
 8003504:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003508:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800350c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003510:	b29b      	uxth	r3, r3
 8003512:	60cb      	str	r3, [r1, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003514:	2000      	movs	r0, #0
        break;
 8003516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003518:	f7ff f9e0 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 800351c:	e7e5      	b.n	80034ea <UART_SetConfig+0xd2>
        ret = HAL_ERROR;
 800351e:	2001      	movs	r0, #1
  return ret;
 8003520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003522:	f7ff f9c3 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003526:	686a      	ldr	r2, [r5, #4]
 8003528:	682c      	ldr	r4, [r5, #0]
 800352a:	0853      	lsrs	r3, r2, #1
 800352c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003530:	fbb0 f0f2 	udiv	r0, r0, r2
 8003534:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8003538:	f020 000f 	bic.w	r0, r0, #15
 800353c:	4303      	orrs	r3, r0
 800353e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003540:	2000      	movs	r0, #0
    huart->Instance->BRR = brrtemp;
 8003542:	60e3      	str	r3, [r4, #12]
 8003544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (clocksource)
 8003546:	2b08      	cmp	r3, #8
 8003548:	d890      	bhi.n	800346c <UART_SetConfig+0x54>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_SetConfig+0x138>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003523 	.word	0x08003523
 8003554:	08003575 	.word	0x08003575
 8003558:	0800359d 	.word	0x0800359d
 800355c:	0800346d 	.word	0x0800346d
 8003560:	08003597 	.word	0x08003597
 8003564:	0800346d 	.word	0x0800346d
 8003568:	0800346d 	.word	0x0800346d
 800356c:	0800346d 	.word	0x0800346d
 8003570:	0800357b 	.word	0x0800357b
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003574:	f7ff f9b2 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 8003578:	e7d5      	b.n	8003526 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800357a:	686b      	ldr	r3, [r5, #4]
 800357c:	085a      	lsrs	r2, r3, #1
 800357e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003582:	fbb2 f2f3 	udiv	r2, r2, r3
 8003586:	f3c2 0342 	ubfx	r3, r2, #1, #3
 800358a:	f022 020f 	bic.w	r2, r2, #15
 800358e:	4313      	orrs	r3, r2
 8003590:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003592:	2000      	movs	r0, #0
        break;
 8003594:	e76c      	b.n	8003470 <UART_SetConfig+0x58>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003596:	f7ff f887 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 800359a:	e7c4      	b.n	8003526 <UART_SetConfig+0x10e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800359c:	686a      	ldr	r2, [r5, #4]
 800359e:	0853      	lsrs	r3, r2, #1
 80035a0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035a4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80035ac:	e7eb      	b.n	8003586 <UART_SetConfig+0x16e>
 80035ae:	bf00      	nop
 80035b0:	efff69f3 	.word	0xefff69f3
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40004400 	.word	0x40004400
 80035bc:	40021000 	.word	0x40021000
 80035c0:	08006324 	.word	0x08006324

080035c4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035c6:	07da      	lsls	r2, r3, #31
{
 80035c8:	b410      	push	{r4}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ca:	d506      	bpl.n	80035da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035cc:	6801      	ldr	r1, [r0, #0]
 80035ce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80035d0:	684a      	ldr	r2, [r1, #4]
 80035d2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80035d6:	4322      	orrs	r2, r4
 80035d8:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035da:	079c      	lsls	r4, r3, #30
 80035dc:	d506      	bpl.n	80035ec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035de:	6801      	ldr	r1, [r0, #0]
 80035e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80035e2:	684a      	ldr	r2, [r1, #4]
 80035e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035e8:	4322      	orrs	r2, r4
 80035ea:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ec:	0759      	lsls	r1, r3, #29
 80035ee:	d506      	bpl.n	80035fe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f0:	6801      	ldr	r1, [r0, #0]
 80035f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80035f4:	684a      	ldr	r2, [r1, #4]
 80035f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035fa:	4322      	orrs	r2, r4
 80035fc:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fe:	071a      	lsls	r2, r3, #28
 8003600:	d506      	bpl.n	8003610 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003602:	6801      	ldr	r1, [r0, #0]
 8003604:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003606:	684a      	ldr	r2, [r1, #4]
 8003608:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800360c:	4322      	orrs	r2, r4
 800360e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003610:	06dc      	lsls	r4, r3, #27
 8003612:	d506      	bpl.n	8003622 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003614:	6801      	ldr	r1, [r0, #0]
 8003616:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003618:	688a      	ldr	r2, [r1, #8]
 800361a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800361e:	4322      	orrs	r2, r4
 8003620:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003622:	0699      	lsls	r1, r3, #26
 8003624:	d506      	bpl.n	8003634 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003626:	6801      	ldr	r1, [r0, #0]
 8003628:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800362a:	688a      	ldr	r2, [r1, #8]
 800362c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003630:	4322      	orrs	r2, r4
 8003632:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003634:	065a      	lsls	r2, r3, #25
 8003636:	d509      	bpl.n	800364c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003638:	6801      	ldr	r1, [r0, #0]
 800363a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800363c:	684a      	ldr	r2, [r1, #4]
 800363e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003642:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003644:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003648:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800364a:	d00b      	beq.n	8003664 <UART_AdvFeatureConfig+0xa0>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	d506      	bpl.n	800365e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003654:	6853      	ldr	r3, [r2, #4]
 8003656:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800365a:	430b      	orrs	r3, r1
 800365c:	6053      	str	r3, [r2, #4]
}
 800365e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003662:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003664:	684a      	ldr	r2, [r1, #4]
 8003666:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003668:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800366c:	4322      	orrs	r2, r4
 800366e:	604a      	str	r2, [r1, #4]
 8003670:	e7ec      	b.n	800364c <UART_AdvFeatureConfig+0x88>
 8003672:	bf00      	nop

08003674 <UART_WaitOnFlagUntilTimeout>:
{
 8003674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003678:	9d08      	ldr	r5, [sp, #32]
 800367a:	4680      	mov	r8, r0
 800367c:	460f      	mov	r7, r1
 800367e:	4616      	mov	r6, r2
 8003680:	4699      	mov	r9, r3
 8003682:	f8d8 4000 	ldr.w	r4, [r8]
 8003686:	e001      	b.n	800368c <UART_WaitOnFlagUntilTimeout+0x18>
    if(Timeout != HAL_MAX_DELAY)
 8003688:	1c6b      	adds	r3, r5, #1
 800368a:	d10a      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	69e0      	ldr	r0, [r4, #28]
 800368e:	ea37 0300 	bics.w	r3, r7, r0
 8003692:	bf0c      	ite	eq
 8003694:	2001      	moveq	r0, #1
 8003696:	2000      	movne	r0, #0
 8003698:	42b0      	cmp	r0, r6
 800369a:	d0f5      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800369c:	2000      	movs	r0, #0
}
 800369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80036a2:	b13d      	cbz	r5, 80036b4 <UART_WaitOnFlagUntilTimeout+0x40>
 80036a4:	f7fd fac4 	bl	8000c30 <HAL_GetTick>
 80036a8:	eba0 0009 	sub.w	r0, r0, r9
 80036ac:	4285      	cmp	r5, r0
 80036ae:	d2e8      	bcs.n	8003682 <UART_WaitOnFlagUntilTimeout+0xe>
 80036b0:	f8d8 4000 	ldr.w	r4, [r8]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ba:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	68a3      	ldr	r3, [r4, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80036be:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c0:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 80036c4:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c6:	60a3      	str	r3, [r4, #8]
        __HAL_UNLOCK(huart);
 80036c8:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80036ca:	f888 2069 	strb.w	r2, [r8, #105]	; 0x69
        __HAL_UNLOCK(huart);
 80036ce:	f888 1068 	strb.w	r1, [r8, #104]	; 0x68
        huart->RxState = HAL_UART_STATE_READY;
 80036d2:	f888 206a 	strb.w	r2, [r8, #106]	; 0x6a
 80036d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036da:	bf00      	nop

080036dc <HAL_UART_Transmit>:
{
 80036dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e0:	460d      	mov	r5, r1
  if(huart->gState == HAL_UART_STATE_READY)
 80036e2:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 80036e6:	2920      	cmp	r1, #32
{
 80036e8:	b084      	sub	sp, #16
  if(huart->gState == HAL_UART_STATE_READY)
 80036ea:	d003      	beq.n	80036f4 <HAL_UART_Transmit+0x18>
    return HAL_BUSY;
 80036ec:	2002      	movs	r0, #2
}
 80036ee:	b004      	add	sp, #16
 80036f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((pData == NULL ) || (Size == 0U))
 80036f4:	b395      	cbz	r5, 800375c <HAL_UART_Transmit+0x80>
 80036f6:	b38a      	cbz	r2, 800375c <HAL_UART_Transmit+0x80>
 80036f8:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 80036fa:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80036fe:	2b01      	cmp	r3, #1
 8003700:	4604      	mov	r4, r0
 8003702:	d0f3      	beq.n	80036ec <HAL_UART_Transmit+0x10>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	2000      	movs	r0, #0
    __HAL_LOCK(huart);
 8003706:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003708:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	66e0      	str	r0, [r4, #108]	; 0x6c
    __HAL_LOCK(huart);
 800370c:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003710:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8003714:	9203      	str	r2, [sp, #12]
    tickstart = HAL_GetTick();
 8003716:	f7fd fa8b 	bl	8000c30 <HAL_GetTick>
    huart->TxXferSize = Size;
 800371a:	9a03      	ldr	r2, [sp, #12]
 800371c:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8003720:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8003722:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003726:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
 800372a:	b2b6      	uxth	r6, r6
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372c:	4643      	mov	r3, r8
 800372e:	2200      	movs	r2, #0
 8003730:	2180      	movs	r1, #128	; 0x80
 8003732:	4620      	mov	r0, r4
    while(huart->TxXferCount > 0U)
 8003734:	b306      	cbz	r6, 8003778 <HAL_UART_Transmit+0x9c>
      huart->TxXferCount--;
 8003736:	f8b4 6052 	ldrh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373a:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 800373c:	3e01      	subs	r6, #1
 800373e:	b2b6      	uxth	r6, r6
 8003740:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003744:	f7ff ff96 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8003748:	b9a0      	cbnz	r0, 8003774 <HAL_UART_Transmit+0x98>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800374a:	68a3      	ldr	r3, [r4, #8]
 800374c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003750:	d006      	beq.n	8003760 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	782a      	ldrb	r2, [r5, #0]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
 8003758:	3501      	adds	r5, #1
 800375a:	e7e4      	b.n	8003726 <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 800375c:	2001      	movs	r0, #1
 800375e:	e7c6      	b.n	80036ee <HAL_UART_Transmit+0x12>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003760:	6923      	ldr	r3, [r4, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f5      	bne.n	8003752 <HAL_UART_Transmit+0x76>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003766:	f835 3b02 	ldrh.w	r3, [r5], #2
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003770:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8003772:	e7d8      	b.n	8003726 <HAL_UART_Transmit+0x4a>
        return HAL_TIMEOUT;
 8003774:	2003      	movs	r0, #3
 8003776:	e7ba      	b.n	80036ee <HAL_UART_Transmit+0x12>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003778:	9700      	str	r7, [sp, #0]
 800377a:	4632      	mov	r2, r6
 800377c:	2140      	movs	r1, #64	; 0x40
 800377e:	f7ff ff79 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 8003782:	2800      	cmp	r0, #0
 8003784:	d1f6      	bne.n	8003774 <HAL_UART_Transmit+0x98>
    huart->gState = HAL_UART_STATE_READY;
 8003786:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003788:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    huart->gState = HAL_UART_STATE_READY;
 800378c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    return HAL_OK;
 8003790:	e7ad      	b.n	80036ee <HAL_UART_Transmit+0x12>
 8003792:	bf00      	nop

08003794 <UART_CheckIdleState>:
{
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	2500      	movs	r5, #0
{
 800379a:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379c:	66c5      	str	r5, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800379e:	f7fd fa47 	bl	8000c30 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80037a8:	4606      	mov	r6, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037aa:	d40c      	bmi.n	80037c6 <UART_CheckIdleState+0x32>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	075b      	lsls	r3, r3, #29
 80037b0:	d417      	bmi.n	80037e2 <UART_CheckIdleState+0x4e>
  huart->gState  = HAL_UART_STATE_READY;
 80037b2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80037b4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80037b6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80037ba:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80037be:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80037c2:	b002      	add	sp, #8
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	462a      	mov	r2, r5
 80037ce:	4603      	mov	r3, r0
 80037d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff ff4d 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 80037da:	b180      	cbz	r0, 80037fe <UART_CheckIdleState+0x6a>
      return HAL_TIMEOUT;
 80037dc:	2003      	movs	r0, #3
}
 80037de:	b002      	add	sp, #8
 80037e0:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037e2:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80037e6:	9200      	str	r2, [sp, #0]
 80037e8:	4633      	mov	r3, r6
 80037ea:	2200      	movs	r2, #0
 80037ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037f0:	4620      	mov	r0, r4
 80037f2:	f7ff ff3f 	bl	8003674 <UART_WaitOnFlagUntilTimeout>
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d0db      	beq.n	80037b2 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 80037fa:	2003      	movs	r0, #3
 80037fc:	e7ef      	b.n	80037de <UART_CheckIdleState+0x4a>
 80037fe:	6823      	ldr	r3, [r4, #0]
 8003800:	e7d4      	b.n	80037ac <UART_CheckIdleState+0x18>
 8003802:	bf00      	nop

08003804 <HAL_UART_Init>:
  if(huart == NULL)
 8003804:	b390      	cbz	r0, 800386c <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003806:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
{
 800380a:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 800380c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003810:	4604      	mov	r4, r0
 8003812:	b303      	cbz	r3, 8003856 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8003814:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003816:	2324      	movs	r3, #36	; 0x24
 8003818:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 800381c:	6813      	ldr	r3, [r2, #0]
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003824:	4620      	mov	r0, r4
 8003826:	f7ff fdf7 	bl	8003418 <UART_SetConfig>
 800382a:	2801      	cmp	r0, #1
 800382c:	d018      	beq.n	8003860 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003830:	b9c3      	cbnz	r3, 8003864 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003842:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800384a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003852:	f7ff bf9f 	b.w	8003794 <UART_CheckIdleState>
    huart->Lock = HAL_UNLOCKED;
 8003856:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800385a:	f000 fff9 	bl	8004850 <HAL_UART_MspInit>
 800385e:	e7d9      	b.n	8003814 <HAL_UART_Init+0x10>
}
 8003860:	2001      	movs	r0, #1
 8003862:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff fead 	bl	80035c4 <UART_AdvFeatureConfig>
 800386a:	e7e2      	b.n	8003832 <HAL_UART_Init+0x2e>
}
 800386c:	2001      	movs	r0, #1
 800386e:	4770      	bx	lr

08003870 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003870:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8003874:	2b21      	cmp	r3, #33	; 0x21
 8003876:	d001      	beq.n	800387c <UART_Transmit_IT+0xc>
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003878:	2002      	movs	r0, #2
  }
}
 800387a:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 800387c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003880:	b29b      	uxth	r3, r3
 8003882:	b18b      	cbz	r3, 80038a8 <UART_Transmit_IT+0x38>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003884:	6883      	ldr	r3, [r0, #8]
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	d018      	beq.n	80038be <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800388c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800388e:	6802      	ldr	r2, [r0, #0]
 8003890:	1c59      	adds	r1, r3, #1
 8003892:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003898:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800389c:	3b01      	subs	r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
      return HAL_OK;
 80038a4:	2000      	movs	r0, #0
 80038a6:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038a8:	6802      	ldr	r2, [r0, #0]
 80038aa:	6811      	ldr	r1, [r2, #0]
 80038ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80038b0:	6011      	str	r1, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038b2:	6811      	ldr	r1, [r2, #0]
 80038b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80038b8:	4618      	mov	r0, r3
 80038ba:	6011      	str	r1, [r2, #0]
 80038bc:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038be:	6903      	ldr	r3, [r0, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e3      	bne.n	800388c <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80038c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038c6:	6801      	ldr	r1, [r0, #0]
 80038c8:	f833 2b02 	ldrh.w	r2, [r3], #2
 80038cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d0:	850a      	strh	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80038d2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80038d4:	e7e0      	b.n	8003898 <UART_Transmit_IT+0x28>
 80038d6:	bf00      	nop

080038d8 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038d8:	b538      	push	{r3, r4, r5, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038da:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80038de:	2b22      	cmp	r3, #34	; 0x22
 80038e0:	d006      	beq.n	80038f0 <UART_Receive_IT+0x18>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038e2:	6802      	ldr	r2, [r0, #0]
 80038e4:	6993      	ldr	r3, [r2, #24]
 80038e6:	f043 0308 	orr.w	r3, r3, #8
 80038ea:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80038ec:	2002      	movs	r0, #2
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038f0:	6803      	ldr	r3, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	6882      	ldr	r2, [r0, #8]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t  uhMask = huart->Mask;
 80038f6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038fe:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	d01d      	beq.n	800393e <UART_Receive_IT+0x66>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003902:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003904:	400b      	ands	r3, r1
 8003906:	1c51      	adds	r1, r2, #1
 8003908:	6541      	str	r1, [r0, #84]	; 0x54
 800390a:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 800390c:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8003910:	3c01      	subs	r4, #1
 8003912:	b2a4      	uxth	r4, r4
 8003914:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8003918:	b10c      	cbz	r4, 800391e <UART_Receive_IT+0x46>
    return HAL_OK;
 800391a:	2000      	movs	r0, #0
  }
}
 800391c:	bd38      	pop	{r3, r4, r5, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391e:	6803      	ldr	r3, [r0, #0]
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8003926:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	6899      	ldr	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800392a:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392c:	f021 0101 	bic.w	r1, r1, #1
 8003930:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003932:	f880 506a 	strb.w	r5, [r0, #106]	; 0x6a
      HAL_UART_RxCpltCallback(huart);
 8003936:	f001 fc05 	bl	8005144 <HAL_UART_RxCpltCallback>
 800393a:	4620      	mov	r0, r4
 800393c:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393e:	6902      	ldr	r2, [r0, #16]
 8003940:	2a00      	cmp	r2, #0
 8003942:	d1de      	bne.n	8003902 <UART_Receive_IT+0x2a>
      *tmp = (uint16_t)(uhdata & uhMask);
 8003944:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003946:	400b      	ands	r3, r1
 8003948:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr +=2U;
 800394c:	6542      	str	r2, [r0, #84]	; 0x54
 800394e:	e7dd      	b.n	800390c <UART_Receive_IT+0x34>

08003950 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003950:	6803      	ldr	r3, [r0, #0]
 8003952:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003954:	6819      	ldr	r1, [r3, #0]
{
 8003956:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8003958:	0715      	lsls	r5, r2, #28
{
 800395a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800395c:	d110      	bne.n	8003980 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395e:	0696      	lsls	r6, r2, #26
 8003960:	d45b      	bmi.n	8003a1a <HAL_UART_IRQHandler+0xca>
  cr3its = READ_REG(huart->Instance->CR3);
 8003962:	6898      	ldr	r0, [r3, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003964:	02d5      	lsls	r5, r2, #11
 8003966:	d501      	bpl.n	800396c <HAL_UART_IRQHandler+0x1c>
 8003968:	0240      	lsls	r0, r0, #9
 800396a:	d47f      	bmi.n	8003a6c <HAL_UART_IRQHandler+0x11c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800396c:	0616      	lsls	r6, r2, #24
 800396e:	d502      	bpl.n	8003976 <HAL_UART_IRQHandler+0x26>
 8003970:	060d      	lsls	r5, r1, #24
 8003972:	f100 808c 	bmi.w	8003a8e <HAL_UART_IRQHandler+0x13e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003976:	0650      	lsls	r0, r2, #25
 8003978:	d501      	bpl.n	800397e <HAL_UART_IRQHandler+0x2e>
 800397a:	064a      	lsls	r2, r1, #25
 800397c:	d464      	bmi.n	8003a48 <HAL_UART_IRQHandler+0xf8>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003980:	6898      	ldr	r0, [r3, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003982:	f010 0501 	ands.w	r5, r0, #1
 8003986:	d04e      	beq.n	8003a26 <HAL_UART_IRQHandler+0xd6>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003988:	07d6      	lsls	r6, r2, #31
 800398a:	d507      	bpl.n	800399c <HAL_UART_IRQHandler+0x4c>
 800398c:	05c8      	lsls	r0, r1, #23
 800398e:	d505      	bpl.n	800399c <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003990:	2001      	movs	r0, #1
 8003992:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003994:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003996:	f040 0001 	orr.w	r0, r0, #1
 800399a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800399c:	0796      	lsls	r6, r2, #30
 800399e:	d548      	bpl.n	8003a32 <HAL_UART_IRQHandler+0xe2>
 80039a0:	b13d      	cbz	r5, 80039b2 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80039a2:	2002      	movs	r0, #2
 80039a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039a8:	f040 0004 	orr.w	r0, r0, #4
 80039ac:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ae:	0750      	lsls	r0, r2, #29
 80039b0:	d443      	bmi.n	8003a3a <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80039b2:	0710      	lsls	r0, r2, #28
 80039b4:	d503      	bpl.n	80039be <HAL_UART_IRQHandler+0x6e>
 80039b6:	068e      	lsls	r6, r1, #26
 80039b8:	d451      	bmi.n	8003a5e <HAL_UART_IRQHandler+0x10e>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039ba:	2d00      	cmp	r5, #0
 80039bc:	d14f      	bne.n	8003a5e <HAL_UART_IRQHandler+0x10e>
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d0dc      	beq.n	800397e <HAL_UART_IRQHandler+0x2e>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039c4:	0690      	lsls	r0, r2, #26
 80039c6:	d501      	bpl.n	80039cc <HAL_UART_IRQHandler+0x7c>
 80039c8:	0689      	lsls	r1, r1, #26
 80039ca:	d465      	bmi.n	8003a98 <HAL_UART_IRQHandler+0x148>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80039cc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80039ce:	0712      	lsls	r2, r2, #28
 80039d0:	d403      	bmi.n	80039da <HAL_UART_IRQHandler+0x8a>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 80039d2:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80039d4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80039d8:	d063      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	689a      	ldr	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80039ec:	f884 106a 	strb.w	r1, [r4, #106]	; 0x6a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	0656      	lsls	r6, r2, #25
 80039f4:	d547      	bpl.n	8003a86 <HAL_UART_IRQHandler+0x136>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f6:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80039f8:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fe:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003a00:	2800      	cmp	r0, #0
 8003a02:	d040      	beq.n	8003a86 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_UART_IRQHandler+0x15c>)
 8003a06:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a08:	f7fd fe68 	bl	80016dc <HAL_DMA_Abort_IT>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d0b6      	beq.n	800397e <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a10:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8003a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a18:	4718      	bx	r3
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a1a:	068d      	lsls	r5, r1, #26
 8003a1c:	d5a1      	bpl.n	8003962 <HAL_UART_IRQHandler+0x12>
}
 8003a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8003a22:	f7ff bf59 	b.w	80038d8 <UART_Receive_IT>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003a26:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003a2a:	d09b      	beq.n	8003964 <HAL_UART_IRQHandler+0x14>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a2c:	07d6      	lsls	r6, r2, #31
 8003a2e:	d5b5      	bpl.n	800399c <HAL_UART_IRQHandler+0x4c>
 8003a30:	e7ac      	b.n	800398c <HAL_UART_IRQHandler+0x3c>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a32:	0756      	lsls	r6, r2, #29
 8003a34:	d5bd      	bpl.n	80039b2 <HAL_UART_IRQHandler+0x62>
 8003a36:	2d00      	cmp	r5, #0
 8003a38:	d0bb      	beq.n	80039b2 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003a3a:	2004      	movs	r0, #4
 8003a3c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a3e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003a40:	f040 0002 	orr.w	r0, r0, #2
 8003a44:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003a46:	e7b4      	b.n	80039b2 <HAL_UART_IRQHandler+0x62>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a48:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a50:	601a      	str	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8003a52:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003a54:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
  HAL_UART_TxCpltCallback(huart);
 8003a58:	f7ff fcce 	bl	80033f8 <HAL_UART_TxCpltCallback>
 8003a5c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003a5e:	2008      	movs	r0, #8
 8003a60:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003a64:	f040 0008 	orr.w	r0, r0, #8
 8003a68:	66e0      	str	r0, [r4, #108]	; 0x6c
 8003a6a:	e7a8      	b.n	80039be <HAL_UART_IRQHandler+0x6e>
    huart->gState  = HAL_UART_STATE_READY;
 8003a6c:	2220      	movs	r2, #32
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003a6e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8003a72:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003a74:	4620      	mov	r0, r4
    huart->gState  = HAL_UART_STATE_READY;
 8003a76:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
}
 8003a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003a82:	f000 b815 	b.w	8003ab0 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fcb8 	bl	80033fc <HAL_UART_ErrorCallback>
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8003a8e:	4620      	mov	r0, r4
}
 8003a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8003a94:	f7ff beec 	b.w	8003870 <UART_Transmit_IT>
        UART_Receive_IT(huart);
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f7ff ff1d 	bl	80038d8 <UART_Receive_IT>
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	e794      	b.n	80039cc <HAL_UART_IRQHandler+0x7c>
        HAL_UART_ErrorCallback(huart);
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff fcaa 	bl	80033fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	08003401 	.word	0x08003401

08003ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <flowMeterInterrupt>:
}

void flowMeterInterrupt()
{

	if(waterFlowFlag == 0)
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <flowMeterInterrupt+0x24>)
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	b962      	cbnz	r2, 8003ad4 <flowMeterInterrupt+0x20>
{
 8003aba:	b410      	push	{r4}
	{
		flowCount += 100;
		lastInterruptTime = currentTime;
 8003abc:	4c07      	ldr	r4, [pc, #28]	; (8003adc <flowMeterInterrupt+0x28>)
		flowCount += 100;
 8003abe:	4908      	ldr	r1, [pc, #32]	; (8003ae0 <flowMeterInterrupt+0x2c>)
		lastInterruptTime = currentTime;
 8003ac0:	4808      	ldr	r0, [pc, #32]	; (8003ae4 <flowMeterInterrupt+0x30>)
 8003ac2:	6824      	ldr	r4, [r4, #0]
		flowCount += 100;
 8003ac4:	680a      	ldr	r2, [r1, #0]
		lastInterruptTime = currentTime;
 8003ac6:	6004      	str	r4, [r0, #0]
		waterFlowFlag = 1;
 8003ac8:	2001      	movs	r0, #1
 8003aca:	7018      	strb	r0, [r3, #0]
		flowCount += 100;
 8003acc:	3264      	adds	r2, #100	; 0x64
	}

}
 8003ace:	f85d 4b04 	ldr.w	r4, [sp], #4
		flowCount += 100;
 8003ad2:	600a      	str	r2, [r1, #0]
}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	200000a4 	.word	0x200000a4
 8003adc:	200000cc 	.word	0x200000cc
 8003ae0:	2000009c 	.word	0x2000009c
 8003ae4:	200000a0 	.word	0x200000a0

08003ae8 <waterFlowFlagReset>:

void waterFlowFlagReset()
{
	if((waterFlowFlag == 1)  &&  (currentTime > (lastInterruptTime + DEBOUNCE_TIME)))
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <waterFlowFlagReset+0x1c>)
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	2a01      	cmp	r2, #1
 8003aee:	d108      	bne.n	8003b02 <waterFlowFlagReset+0x1a>
 8003af0:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <waterFlowFlagReset+0x20>)
 8003af2:	4906      	ldr	r1, [pc, #24]	; (8003b0c <waterFlowFlagReset+0x24>)
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	6809      	ldr	r1, [r1, #0]
 8003af8:	3206      	adds	r2, #6
 8003afa:	428a      	cmp	r2, r1
	{
		waterFlowFlag = 0;  // we can now take another measurement (waited DEBOUNCE_TIME ms)
 8003afc:	bf3c      	itt	cc
 8003afe:	2200      	movcc	r2, #0
 8003b00:	701a      	strbcc	r2, [r3, #0]
 8003b02:	4770      	bx	lr
 8003b04:	200000a4 	.word	0x200000a4
 8003b08:	200000a0 	.word	0x200000a0
 8003b0c:	200000cc 	.word	0x200000cc

08003b10 <valveControl>:
	}
}

void valveControl()
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, valveState);
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <valveControl+0x10>)
 8003b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1c:	f7fd bf38 	b.w	8001990 <HAL_GPIO_WritePin>
 8003b20:	20000290 	.word	0x20000290

08003b24 <inWindow>:

}

uint8_t inWindow()
{
	if(rtcTimeTotal >= heatingSchedule[0].Total && rtcTimeTotal < heatingSchedule[1].Total) // window 1 is valid
 8003b24:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <inWindow+0x38>)
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <inWindow+0x3c>)
 8003b28:	6810      	ldr	r0, [r2, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	4282      	cmp	r2, r0
 8003b2e:	d802      	bhi.n	8003b36 <inWindow+0x12>
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	4290      	cmp	r0, r2
 8003b34:	d310      	bcc.n	8003b58 <inWindow+0x34>
	{
		return 1;
	}
	else if(rtcTimeTotal >= heatingSchedule[2].Total && rtcTimeTotal < heatingSchedule[3].Total) // window 2 is valid
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	4290      	cmp	r0, r2
 8003b3a:	d302      	bcc.n	8003b42 <inWindow+0x1e>
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	4290      	cmp	r0, r2
 8003b40:	d30a      	bcc.n	8003b58 <inWindow+0x34>
	{
		return 1;
	}
	else if(rtcTimeTotal >= heatingSchedule[4].Total && rtcTimeTotal < heatingSchedule[5].Total) // window 3 is valid
 8003b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b44:	4290      	cmp	r0, r2
 8003b46:	d305      	bcc.n	8003b54 <inWindow+0x30>
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		return 1;
 8003b4a:	4298      	cmp	r0, r3
 8003b4c:	bf2c      	ite	cs
 8003b4e:	2000      	movcs	r0, #0
 8003b50:	2001      	movcc	r0, #1
 8003b52:	4770      	bx	lr
	{
		return 1;
	}
	else
	{
		return 0;
 8003b54:	2000      	movs	r0, #0
	}
}
 8003b56:	4770      	bx	lr
		return 1;
 8003b58:	2001      	movs	r0, #1
 8003b5a:	4770      	bx	lr
 8003b5c:	200002d4 	.word	0x200002d4
 8003b60:	20000370 	.word	0x20000370

08003b64 <heaterControlLoop>:
{
 8003b64:	b508      	push	{r3, lr}
	if(heatingScheduleState == 0) // Automatic heating schedule off, use last value of heaterState
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <heaterControlLoop+0x5c>)
 8003b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b6c:	b303      	cbz	r3, 8003bb0 <heaterControlLoop+0x4c>
		if(inWindow()) // in heating window
 8003b6e:	f7ff ffd9 	bl	8003b24 <inWindow>
 8003b72:	b940      	cbnz	r0, 8003b86 <heaterControlLoop+0x22>
				heaterState = 0;
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <heaterControlLoop+0x60>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003b76:	4814      	ldr	r0, [pc, #80]	; (8003bc8 <heaterControlLoop+0x64>)
				heaterState = 0;
 8003b78:	2200      	movs	r2, #0
 8003b7a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003b7c:	2104      	movs	r1, #4
}
 8003b7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003b82:	f7fd bf05 	b.w	8001990 <HAL_GPIO_WritePin>
			if(heaterTemp > (temp_setpoint + 5))
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <heaterControlLoop+0x68>)
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <heaterControlLoop+0x6c>)
 8003b8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8e:	8812      	ldrh	r2, [r2, #0]
 8003b90:	1d59      	adds	r1, r3, #5
 8003b92:	428a      	cmp	r2, r1
 8003b94:	dcee      	bgt.n	8003b74 <heaterControlLoop+0x10>
			else if(heaterTemp < (temp_setpoint - 5))
 8003b96:	3b05      	subs	r3, #5
 8003b98:	429a      	cmp	r2, r3
				heaterState = 1;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <heaterControlLoop+0x60>)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003b9c:	480a      	ldr	r0, [pc, #40]	; (8003bc8 <heaterControlLoop+0x64>)
 8003b9e:	bfae      	itee	ge
 8003ba0:	781a      	ldrbge	r2, [r3, #0]
				heaterState = 1;
 8003ba2:	2201      	movlt	r2, #1
 8003ba4:	801a      	strhlt	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003ba6:	2104      	movs	r1, #4
}
 8003ba8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003bac:	f7fd bef0 	b.w	8001990 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <heaterControlLoop+0x60>)
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <heaterControlLoop+0x64>)
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	2104      	movs	r1, #4
}
 8003bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, heaterState);
 8003bbc:	f7fd bee8 	b.w	8001990 <HAL_GPIO_WritePin>
 8003bc0:	200001a0 	.word	0x200001a0
 8003bc4:	20000258 	.word	0x20000258
 8003bc8:	48000800 	.word	0x48000800
 8003bcc:	200000f0 	.word	0x200000f0
 8003bd0:	200000ac 	.word	0x200000ac

08003bd4 <SevSegInit>:
uint8_t digitCount;
char tempratureString[3];

void SevSegInit()
{
	digitCount = 0;
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <SevSegInit+0x30>)

	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
	GPIOB->ODR = (GPIOB->ODR | 0x00000478);
 8003bd6:	490c      	ldr	r1, [pc, #48]	; (8003c08 <SevSegInit+0x34>)
	GPIOC->ODR = (GPIOC->ODR | 0x00000080);
 8003bd8:	4a0c      	ldr	r2, [pc, #48]	; (8003c0c <SevSegInit+0x38>)
{
 8003bda:	b410      	push	{r4}
	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
 8003bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	digitCount = 0;
 8003be0:	2400      	movs	r4, #0
 8003be2:	701c      	strb	r4, [r3, #0]
	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
 8003be4:	6943      	ldr	r3, [r0, #20]
}
 8003be6:	f85d 4b04 	ldr.w	r4, [sp], #4
	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
 8003bea:	f443 7378 	orr.w	r3, r3, #992	; 0x3e0
 8003bee:	6143      	str	r3, [r0, #20]
	GPIOB->ODR = (GPIOB->ODR | 0x00000478);
 8003bf0:	694b      	ldr	r3, [r1, #20]
 8003bf2:	f443 638f 	orr.w	r3, r3, #1144	; 0x478
 8003bf6:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR | 0x00000080);
 8003bf8:	6953      	ldr	r3, [r2, #20]
 8003bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfe:	6153      	str	r3, [r2, #20]
}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200000e0 	.word	0x200000e0
 8003c08:	48000400 	.word	0x48000400
 8003c0c:	48000800 	.word	0x48000800

08003c10 <SevSegwrite>:


}

void SevSegwrite(uint8_t num)
{
 8003c10:	b410      	push	{r4}
	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
 8003c12:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
	GPIOB->ODR = (GPIOB->ODR | 0x00000040);
 8003c16:	493b      	ldr	r1, [pc, #236]	; (8003d04 <SevSegwrite+0xf4>)
	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
 8003c18:	6963      	ldr	r3, [r4, #20]
	GPIOC->ODR = (GPIOC->ODR | 0x00000080);
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <SevSegwrite+0xf8>)
	GPIOA->ODR = (GPIOA->ODR | 0x000003e0);
 8003c1c:	f443 7378 	orr.w	r3, r3, #992	; 0x3e0
 8003c20:	6163      	str	r3, [r4, #20]
	GPIOB->ODR = (GPIOB->ODR | 0x00000040);
 8003c22:	694b      	ldr	r3, [r1, #20]
 8003c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c28:	614b      	str	r3, [r1, #20]
	GPIOC->ODR = (GPIOC->ODR | 0x00000080);
 8003c2a:	6953      	ldr	r3, [r2, #20]
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c30:	6153      	str	r3, [r2, #20]
	SevSegReset();

	switch (num)
 8003c32:	2809      	cmp	r0, #9
 8003c34:	d816      	bhi.n	8003c64 <SevSegwrite+0x54>
 8003c36:	e8df f000 	tbb	[pc, r0]
 8003c3a:	1f05      	.short	0x1f05
 8003c3c:	413a2e26 	.word	0x413a2e26
 8003c40:	185c554d 	.word	0x185c554d
	{
	case 0 :

		GPIOA->ODR = (GPIOA->ODR & 0xfffffe1f);
 8003c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003c48:	492e      	ldr	r1, [pc, #184]	; (8003d04 <SevSegwrite+0xf4>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffe1f);
 8003c4a:	6943      	ldr	r3, [r0, #20]
		GPIOC->ODR = (GPIOC->ODR & 0xffffff7f);
 8003c4c:	4a2e      	ldr	r2, [pc, #184]	; (8003d08 <SevSegwrite+0xf8>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffe1f);
 8003c4e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
	case 1:
		GPIOA->ODR = (GPIOA->ODR & 0xffffff3f);
		break;

	case 2:
		GPIOA->ODR = (GPIOA->ODR & 0xfffffd9f);
 8003c52:	6143      	str	r3, [r0, #20]
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003c54:	694b      	ldr	r3, [r1, #20]
 8003c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5a:	614b      	str	r3, [r1, #20]
		GPIOC->ODR = (GPIOC->ODR & 0xffffff7f);
 8003c5c:	6953      	ldr	r3, [r2, #20]
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c62:	6153      	str	r3, [r2, #20]
	case 9:
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc1f);
		break;

	}
}
 8003c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c68:	4770      	bx	lr
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc1f);
 8003c6a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c6e:	6953      	ldr	r3, [r2, #20]
 8003c70:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003c74:	6153      	str	r3, [r2, #20]
}
 8003c76:	e7f5      	b.n	8003c64 <SevSegwrite+0x54>
		GPIOA->ODR = (GPIOA->ODR & 0xffffff3f);
 8003c78:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003c7c:	6953      	ldr	r3, [r2, #20]
 8003c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c82:	6153      	str	r3, [r2, #20]
		break;
 8003c84:	e7ee      	b.n	8003c64 <SevSegwrite+0x54>
		GPIOA->ODR = (GPIOA->ODR & 0xfffffd9f);
 8003c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003c8a:	491e      	ldr	r1, [pc, #120]	; (8003d04 <SevSegwrite+0xf4>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffd9f);
 8003c8c:	6943      	ldr	r3, [r0, #20]
		GPIOC->ODR = (GPIOC->ODR & 0xffffff7f);
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <SevSegwrite+0xf8>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffd9f);
 8003c90:	f423 7318 	bic.w	r3, r3, #608	; 0x260
 8003c94:	e7dd      	b.n	8003c52 <SevSegwrite+0x42>
		GPIOA->ODR = (GPIOA->ODR & 0xfffffd1f);
 8003c96:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <SevSegwrite+0xf4>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffd1f);
 8003c9c:	694b      	ldr	r3, [r1, #20]
 8003c9e:	f423 7338 	bic.w	r3, r3, #736	; 0x2e0
 8003ca2:	614b      	str	r3, [r1, #20]
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003ca4:	6953      	ldr	r3, [r2, #20]
 8003ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003caa:	6153      	str	r3, [r2, #20]
		break;
 8003cac:	e7da      	b.n	8003c64 <SevSegwrite+0x54>
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc3f);
 8003cae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003cb2:	6953      	ldr	r3, [r2, #20]
 8003cb4:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8003cb8:	6153      	str	r3, [r2, #20]
		break;
 8003cba:	e7d3      	b.n	8003c64 <SevSegwrite+0x54>
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc5f);
 8003cbc:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003cc0:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <SevSegwrite+0xf4>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc5f);
 8003cc2:	694b      	ldr	r3, [r1, #20]
 8003cc4:	f423 7368 	bic.w	r3, r3, #928	; 0x3a0
 8003cc8:	614b      	str	r3, [r1, #20]
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003cca:	6953      	ldr	r3, [r2, #20]
 8003ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd0:	6153      	str	r3, [r2, #20]
		break;
 8003cd2:	e7c7      	b.n	8003c64 <SevSegwrite+0x54>
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc5f);
 8003cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003cd8:	490a      	ldr	r1, [pc, #40]	; (8003d04 <SevSegwrite+0xf4>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc5f);
 8003cda:	6943      	ldr	r3, [r0, #20]
		GPIOC->ODR = (GPIOC->ODR & 0xffffff7f);
 8003cdc:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <SevSegwrite+0xf8>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc5f);
 8003cde:	f423 7368 	bic.w	r3, r3, #928	; 0x3a0
 8003ce2:	e7b6      	b.n	8003c52 <SevSegwrite+0x42>
		GPIOA->ODR = (GPIOA->ODR & 0xffffff1f);
 8003ce4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8003ce8:	6953      	ldr	r3, [r2, #20]
 8003cea:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003cee:	6153      	str	r3, [r2, #20]
		break;
 8003cf0:	e7b8      	b.n	8003c64 <SevSegwrite+0x54>
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc1f);
 8003cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
		GPIOB->ODR = (GPIOB->ODR & 0xffffffbf);
 8003cf6:	4903      	ldr	r1, [pc, #12]	; (8003d04 <SevSegwrite+0xf4>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc1f);
 8003cf8:	6943      	ldr	r3, [r0, #20]
		GPIOC->ODR = (GPIOC->ODR & 0xffffff7f);
 8003cfa:	4a03      	ldr	r2, [pc, #12]	; (8003d08 <SevSegwrite+0xf8>)
		GPIOA->ODR = (GPIOA->ODR & 0xfffffc1f);
 8003cfc:	f423 7378 	bic.w	r3, r3, #992	; 0x3e0
 8003d00:	e7a7      	b.n	8003c52 <SevSegwrite+0x42>
 8003d02:	bf00      	nop
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48000800 	.word	0x48000800

08003d0c <digitLoop>:
	GPIOB->ODR = (GPIOB->ODR | 0x00000478); //set all digits off
 8003d0c:	4a36      	ldr	r2, [pc, #216]	; (8003de8 <digitLoop+0xdc>)
{
 8003d0e:	b570      	push	{r4, r5, r6, lr}
	GPIOB->ODR = (GPIOB->ODR | 0x00000478); //set all digits off
 8003d10:	6953      	ldr	r3, [r2, #20]
	switch (digitCount)
 8003d12:	4c36      	ldr	r4, [pc, #216]	; (8003dec <digitLoop+0xe0>)
	GPIOB->ODR = (GPIOB->ODR | 0x00000478); //set all digits off
 8003d14:	f443 638f 	orr.w	r3, r3, #1144	; 0x478
 8003d18:	6153      	str	r3, [r2, #20]
	switch (digitCount)
 8003d1a:	7823      	ldrb	r3, [r4, #0]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d816      	bhi.n	8003d4e <digitLoop+0x42>
 8003d20:	e8df f003 	tbb	[pc, r3]
 8003d24:	021c3651 	.word	0x021c3651
		SevSegwrite((uint8_t)(num%10));
 8003d28:	4a31      	ldr	r2, [pc, #196]	; (8003df0 <digitLoop+0xe4>)
		GPIOB->ODR = (GPIOB->ODR & 0xfffffff7);
 8003d2a:	492f      	ldr	r1, [pc, #188]	; (8003de8 <digitLoop+0xdc>)
		SevSegwrite((uint8_t)(num%10));
 8003d2c:	fb82 3200 	smull	r3, r2, r2, r0
 8003d30:	17c3      	asrs	r3, r0, #31
 8003d32:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
		GPIOB->ODR = (GPIOB->ODR & 0xfffffff7);
 8003d36:	694a      	ldr	r2, [r1, #20]
		SevSegwrite((uint8_t)(num%10));
 8003d38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d3c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
		GPIOB->ODR = (GPIOB->ODR & 0xfffffff7);
 8003d40:	f022 0208 	bic.w	r2, r2, #8
		SevSegwrite((uint8_t)(num%10));
 8003d44:	b2c0      	uxtb	r0, r0
		GPIOB->ODR = (GPIOB->ODR & 0xfffffff7);
 8003d46:	614a      	str	r2, [r1, #20]
		SevSegwrite((uint8_t)(num%10));
 8003d48:	f7ff ff62 	bl	8003c10 <SevSegwrite>
 8003d4c:	7823      	ldrb	r3, [r4, #0]
	if(++digitCount == 4) digitCount = 0;
 8003d4e:	3301      	adds	r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf08      	it	eq
 8003d56:	2300      	moveq	r3, #0
 8003d58:	7023      	strb	r3, [r4, #0]
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
		SevSegwrite((uint8_t)((num%100)/10));
 8003d5c:	4e25      	ldr	r6, [pc, #148]	; (8003df4 <digitLoop+0xe8>)
		GPIOB->ODR = (GPIOB->ODR & 0xffffffdf);
 8003d5e:	4d22      	ldr	r5, [pc, #136]	; (8003de8 <digitLoop+0xdc>)
		SevSegwrite((uint8_t)((num%100)/10));
 8003d60:	4923      	ldr	r1, [pc, #140]	; (8003df0 <digitLoop+0xe4>)
		GPIOB->ODR = (GPIOB->ODR & 0xffffffdf);
 8003d62:	696a      	ldr	r2, [r5, #20]
		SevSegwrite((uint8_t)((num%100)/10));
 8003d64:	fb86 3600 	smull	r3, r6, r6, r0
 8003d68:	17c3      	asrs	r3, r0, #31
 8003d6a:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 8003d6e:	2664      	movs	r6, #100	; 0x64
 8003d70:	fb06 0013 	mls	r0, r6, r3, r0
 8003d74:	b200      	sxth	r0, r0
 8003d76:	fb81 1300 	smull	r1, r3, r1, r0
 8003d7a:	17c0      	asrs	r0, r0, #31
 8003d7c:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
		GPIOB->ODR = (GPIOB->ODR & 0xffffffdf);
 8003d80:	f022 0220 	bic.w	r2, r2, #32
		SevSegwrite((uint8_t)((num%100)/10));
 8003d84:	b2c0      	uxtb	r0, r0
		GPIOB->ODR = (GPIOB->ODR & 0xffffffdf);
 8003d86:	616a      	str	r2, [r5, #20]
		SevSegwrite((uint8_t)((num%100)/10));
 8003d88:	f7ff ff42 	bl	8003c10 <SevSegwrite>
 8003d8c:	7823      	ldrb	r3, [r4, #0]
		break;
 8003d8e:	e7de      	b.n	8003d4e <digitLoop+0x42>
		SevSegwrite((uint8_t)((num%1000)/100));
 8003d90:	4e19      	ldr	r6, [pc, #100]	; (8003df8 <digitLoop+0xec>)
		GPIOB->ODR = (GPIOB->ODR & 0xffffffef);
 8003d92:	4d15      	ldr	r5, [pc, #84]	; (8003de8 <digitLoop+0xdc>)
		SevSegwrite((uint8_t)((num%1000)/100));
 8003d94:	4917      	ldr	r1, [pc, #92]	; (8003df4 <digitLoop+0xe8>)
		GPIOB->ODR = (GPIOB->ODR & 0xffffffef);
 8003d96:	696a      	ldr	r2, [r5, #20]
		SevSegwrite((uint8_t)((num%1000)/100));
 8003d98:	fb86 3600 	smull	r3, r6, r6, r0
 8003d9c:	17c3      	asrs	r3, r0, #31
 8003d9e:	ebc3 13a6 	rsb	r3, r3, r6, asr #6
 8003da2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003da6:	fb06 0013 	mls	r0, r6, r3, r0
 8003daa:	b200      	sxth	r0, r0
 8003dac:	fb81 1300 	smull	r1, r3, r1, r0
 8003db0:	17c0      	asrs	r0, r0, #31
 8003db2:	ebc0 1063 	rsb	r0, r0, r3, asr #5
		GPIOB->ODR = (GPIOB->ODR & 0xffffffef);
 8003db6:	f022 0210 	bic.w	r2, r2, #16
		SevSegwrite((uint8_t)((num%1000)/100));
 8003dba:	b2c0      	uxtb	r0, r0
		GPIOB->ODR = (GPIOB->ODR & 0xffffffef);
 8003dbc:	616a      	str	r2, [r5, #20]
		SevSegwrite((uint8_t)((num%1000)/100));
 8003dbe:	f7ff ff27 	bl	8003c10 <SevSegwrite>
 8003dc2:	7823      	ldrb	r3, [r4, #0]
		break;
 8003dc4:	e7c3      	b.n	8003d4e <digitLoop+0x42>
		GPIOB->ODR = (GPIOB->ODR & 0xfffffbff);
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <digitLoop+0xdc>)
		SevSegwrite((uint8_t)(num/1000));
 8003dc8:	4a0b      	ldr	r2, [pc, #44]	; (8003df8 <digitLoop+0xec>)
		GPIOB->ODR = (GPIOB->ODR & 0xfffffbff);
 8003dca:	694b      	ldr	r3, [r1, #20]
		SevSegwrite((uint8_t)(num/1000));
 8003dcc:	fb82 5200 	smull	r5, r2, r2, r0
 8003dd0:	17c0      	asrs	r0, r0, #31
		GPIOB->ODR = (GPIOB->ODR & 0xfffffbff);
 8003dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
		SevSegwrite((uint8_t)(num/1000));
 8003dd6:	ebc0 10a2 	rsb	r0, r0, r2, asr #6
		GPIOB->ODR = (GPIOB->ODR & 0xfffffbff);
 8003dda:	614b      	str	r3, [r1, #20]
		SevSegwrite((uint8_t)(num/1000));
 8003ddc:	b2c0      	uxtb	r0, r0
 8003dde:	f7ff ff17 	bl	8003c10 <SevSegwrite>
 8003de2:	7823      	ldrb	r3, [r4, #0]
		break;
 8003de4:	e7b3      	b.n	8003d4e <digitLoop+0x42>
 8003de6:	bf00      	nop
 8003de8:	48000400 	.word	0x48000400
 8003dec:	200000e0 	.word	0x200000e0
 8003df0:	66666667 	.word	0x66666667
 8003df4:	51eb851f 	.word	0x51eb851f
 8003df8:	10624dd3 	.word	0x10624dd3

08003dfc <displayLoop>:
	if(sliderBusyFlag <= 1) // normal operation
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <displayLoop+0x1c>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d904      	bls.n	8003e0e <displayLoop+0x12>
		digitLoop(temp_setpoint);
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <displayLoop+0x20>)
 8003e06:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003e0a:	f7ff bf7f 	b.w	8003d0c <digitLoop>
		digitLoop(heaterTemp);
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <displayLoop+0x24>)
 8003e10:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003e14:	f7ff bf7a 	b.w	8003d0c <digitLoop>
 8003e18:	200000ca 	.word	0x200000ca
 8003e1c:	200000f0 	.word	0x200000f0
 8003e20:	200000ac 	.word	0x200000ac

08003e24 <adcInit>:
uint16_t ambientTemp = 0;
uint16_t heaterTemp = 0;


void adcInit()
{
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop

08003e28 <findRMS>:
	CH2_midVal = newVal[1];

}

void findRMS(uint16_t* newVal)
{
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sampleCurrent = map((float)newVal[0], adc_curr_min, adc_curr_max, -13000, 13000); // normalise
 8003e2a:	8803      	ldrh	r3, [r0, #0]
}

// taken from arduino source code
float map(float x, float in_min, float in_max, float out_min, float out_max)
{
	return (x - in_min)*(out_max - out_min)/(in_max - in_min) + out_min;
 8003e2c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003efc <findRMS+0xd4>
 8003e30:	eddf 7a33 	vldr	s15, [pc, #204]	; 8003f00 <findRMS+0xd8>
 8003e34:	eddf 4a33 	vldr	s9, [pc, #204]	; 8003f04 <findRMS+0xdc>
	rmsCurrentSum = rmsCurrentSum + (sampleCurrent*sampleCurrent);
 8003e38:	4c33      	ldr	r4, [pc, #204]	; (8003f08 <findRMS+0xe0>)
	rmsVoltageSum = rmsVoltageSum + (sampleVoltage*sampleVoltage);
 8003e3a:	4d34      	ldr	r5, [pc, #208]	; (8003f0c <findRMS+0xe4>)
	return (x - in_min)*(out_max - out_min)/(in_max - in_min) + out_min;
 8003e3c:	eddf 3a34 	vldr	s7, [pc, #208]	; 8003f10 <findRMS+0xe8>
 8003e40:	ed9f 4a34 	vldr	s8, [pc, #208]	; 8003f14 <findRMS+0xec>
	rmsCurrentSum = rmsCurrentSum + (sampleCurrent*sampleCurrent);
 8003e44:	ed94 5a00 	vldr	s10, [r4]
	rmsVoltageSum = rmsVoltageSum + (sampleVoltage*sampleVoltage);
 8003e48:	edd5 5a00 	vldr	s11, [r5]
	if(++sumCount == N)
 8003e4c:	4e32      	ldr	r6, [pc, #200]	; (8003f18 <findRMS+0xf0>)
	sampleCurrent = map((float)newVal[0], adc_curr_min, adc_curr_max, -13000, 13000); // normalise
 8003e4e:	4933      	ldr	r1, [pc, #204]	; (8003f1c <findRMS+0xf4>)
	sampleVoltage = map((float)newVal[1], adc_volt_min, adc_volt_max, -220000, 220000); // normalise
 8003e50:	4a33      	ldr	r2, [pc, #204]	; (8003f20 <findRMS+0xf8>)
	sampleCurrent = map((float)newVal[0], adc_curr_min, adc_curr_max, -13000, 13000); // normalise
 8003e52:	ee06 3a10 	vmov	s12, r3
	sampleVoltage = map((float)newVal[1], adc_volt_min, adc_volt_max, -220000, 220000); // normalise
 8003e56:	8843      	ldrh	r3, [r0, #2]
 8003e58:	ee06 3a90 	vmov	s13, r3
	sampleCurrent = map((float)newVal[0], adc_curr_min, adc_curr_max, -13000, 13000); // normalise
 8003e5c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	sampleVoltage = map((float)newVal[1], adc_volt_min, adc_volt_max, -220000, 220000); // normalise
 8003e60:	eef8 6a66 	vcvt.f32.u32	s13, s13
	return (x - in_min)*(out_max - out_min)/(in_max - in_min) + out_min;
 8003e64:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003e68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e6c:	ee86 7a24 	vdiv.f32	s14, s12, s9
	if(++sumCount == N)
 8003e70:	7833      	ldrb	r3, [r6, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b14      	cmp	r3, #20
 8003e78:	7033      	strb	r3, [r6, #0]
	return (x - in_min)*(out_max - out_min)/(in_max - in_min) + out_min;
 8003e7a:	eec6 7aa4 	vdiv.f32	s15, s13, s9
 8003e7e:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003e82:	ee77 7ac4 	vsub.f32	s15, s15, s8
	rmsCurrentSum = rmsCurrentSum + (sampleCurrent*sampleCurrent);
 8003e86:	eeb0 6a45 	vmov.f32	s12, s10
	rmsVoltageSum = rmsVoltageSum + (sampleVoltage*sampleVoltage);
 8003e8a:	eef0 6a65 	vmov.f32	s13, s11
	rmsCurrentSum = rmsCurrentSum + (sampleCurrent*sampleCurrent);
 8003e8e:	eea7 6a07 	vfma.f32	s12, s14, s14
	rmsVoltageSum = rmsVoltageSum + (sampleVoltage*sampleVoltage);
 8003e92:	eee7 6aa7 	vfma.f32	s13, s15, s15
{
 8003e96:	ed2d 8b02 	vpush	{d8}
	rmsCurrentSum = rmsCurrentSum + (sampleCurrent*sampleCurrent);
 8003e9a:	ed84 6a00 	vstr	s12, [r4]
	sampleCurrent = map((float)newVal[0], adc_curr_min, adc_curr_max, -13000, 13000); // normalise
 8003e9e:	ed81 7a00 	vstr	s14, [r1]
	sampleVoltage = map((float)newVal[1], adc_volt_min, adc_volt_max, -220000, 220000); // normalise
 8003ea2:	edc2 7a00 	vstr	s15, [r2]
	rmsVoltageSum = rmsVoltageSum + (sampleVoltage*sampleVoltage);
 8003ea6:	edc5 6a00 	vstr	s13, [r5]
	if(++sumCount == N)
 8003eaa:	d002      	beq.n	8003eb2 <findRMS+0x8a>
}
 8003eac:	ecbd 8b02 	vpop	{d8}
 8003eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		voltageRMS = sqrt(rmsVoltageSum/N);
 8003eb2:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8003eb6:	eec6 7a88 	vdiv.f32	s15, s13, s16
		currentRMS = sqrt(rmsCurrentSum/N);
 8003eba:	4f1a      	ldr	r7, [pc, #104]	; (8003f24 <findRMS+0xfc>)
		voltageRMS = sqrt(rmsVoltageSum/N);
 8003ebc:	ee17 0a90 	vmov	r0, s15
 8003ec0:	f7fc fb3a 	bl	8000538 <__aeabi_f2d>
 8003ec4:	f002 f8d4 	bl	8006070 <sqrt>
 8003ec8:	f7fc fe3a 	bl	8000b40 <__aeabi_d2iz>
		currentRMS = sqrt(rmsCurrentSum/N);
 8003ecc:	edd4 7a00 	vldr	s15, [r4]
		voltageRMS = sqrt(rmsVoltageSum/N);
 8003ed0:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <findRMS+0x100>)
		currentRMS = sqrt(rmsCurrentSum/N);
 8003ed2:	ee87 7a88 	vdiv.f32	s14, s15, s16
		voltageRMS = sqrt(rmsVoltageSum/N);
 8003ed6:	6018      	str	r0, [r3, #0]
		currentRMS = sqrt(rmsCurrentSum/N);
 8003ed8:	ee17 0a10 	vmov	r0, s14
 8003edc:	f7fc fb2c 	bl	8000538 <__aeabi_f2d>
 8003ee0:	f002 f8c6 	bl	8006070 <sqrt>
 8003ee4:	f7fc fe2c 	bl	8000b40 <__aeabi_d2iz>
}
 8003ee8:	ecbd 8b02 	vpop	{d8}
		sumCount = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	7033      	strb	r3, [r6, #0]
		rmsVoltageSum = 0;
 8003ef0:	2300      	movs	r3, #0
		currentRMS = sqrt(rmsCurrentSum/N);
 8003ef2:	6038      	str	r0, [r7, #0]
		rmsVoltageSum = 0;
 8003ef4:	602b      	str	r3, [r5, #0]
		rmsCurrentSum = 0;
 8003ef6:	6023      	str	r3, [r4, #0]
}
 8003ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	46cb2000 	.word	0x46cb2000
 8003f00:	48d6d800 	.word	0x48d6d800
 8003f04:	4568c000 	.word	0x4568c000
 8003f08:	200000b0 	.word	0x200000b0
 8003f0c:	200000b4 	.word	0x200000b4
 8003f10:	464b2000 	.word	0x464b2000
 8003f14:	4856d800 	.word	0x4856d800
 8003f18:	200000c0 	.word	0x200000c0
 8003f1c:	200000b8 	.word	0x200000b8
 8003f20:	200000bc 	.word	0x200000bc
 8003f24:	200000a8 	.word	0x200000a8
 8003f28:	200000c4 	.word	0x200000c4
 8003f2c:	00000000 	.word	0x00000000

08003f30 <adcLoop>:
{
 8003f30:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_Val, 4);
 8003f32:	4c2b      	ldr	r4, [pc, #172]	; (8003fe0 <adcLoop+0xb0>)
 8003f34:	482b      	ldr	r0, [pc, #172]	; (8003fe4 <adcLoop+0xb4>)
	heaterTemp = ((((float)newVal[2]*3.3/4096) - 0.5)/0.01) -2;
 8003f36:	4e2c      	ldr	r6, [pc, #176]	; (8003fe8 <adcLoop+0xb8>)
	ambientTemp = (((float)newVal[3]*3.3/4096) - 0.5)/0.01;
 8003f38:	4d2c      	ldr	r5, [pc, #176]	; (8003fec <adcLoop+0xbc>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_Val, 4);
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	f7fd f845 	bl	8000fcc <HAL_ADC_Start_DMA>
	findRMS(adc1_Val);
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff ff70 	bl	8003e28 <findRMS>
	heaterTemp = ((((float)newVal[2]*3.3/4096) - 0.5)/0.01) -2;
 8003f48:	88a0      	ldrh	r0, [r4, #4]
 8003f4a:	ee07 0a90 	vmov	s15, r0
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	ee17 0a90 	vmov	r0, s15
 8003f56:	f7fc faef 	bl	8000538 <__aeabi_f2d>
 8003f5a:	a31d      	add	r3, pc, #116	; (adr r3, 8003fd0 <adcLoop+0xa0>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fb3e 	bl	80005e0 <__aeabi_dmul>
 8003f64:	2200      	movs	r2, #0
 8003f66:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <adcLoop+0xc0>)
 8003f68:	f7fc fb3a 	bl	80005e0 <__aeabi_dmul>
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <adcLoop+0xc4>)
 8003f70:	f7fc f982 	bl	8000278 <__aeabi_dsub>
 8003f74:	a318      	add	r3, pc, #96	; (adr r3, 8003fd8 <adcLoop+0xa8>)
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f7fc fc5b 	bl	8000834 <__aeabi_ddiv>
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f84:	f7fc f978 	bl	8000278 <__aeabi_dsub>
 8003f88:	f7fc fe02 	bl	8000b90 <__aeabi_d2uiz>
	ambientTemp = (((float)newVal[3]*3.3/4096) - 0.5)/0.01;
 8003f8c:	88e3      	ldrh	r3, [r4, #6]
	heaterTemp = ((((float)newVal[2]*3.3/4096) - 0.5)/0.01) -2;
 8003f8e:	8030      	strh	r0, [r6, #0]
	ambientTemp = (((float)newVal[3]*3.3/4096) - 0.5)/0.01;
 8003f90:	ee07 3a90 	vmov	s15, r3
 8003f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f98:	ee17 0a90 	vmov	r0, s15
 8003f9c:	f7fc facc 	bl	8000538 <__aeabi_f2d>
 8003fa0:	a30b      	add	r3, pc, #44	; (adr r3, 8003fd0 <adcLoop+0xa0>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc fb1b 	bl	80005e0 <__aeabi_dmul>
 8003faa:	2200      	movs	r2, #0
 8003fac:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <adcLoop+0xc0>)
 8003fae:	f7fc fb17 	bl	80005e0 <__aeabi_dmul>
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <adcLoop+0xc4>)
 8003fb6:	f7fc f95f 	bl	8000278 <__aeabi_dsub>
 8003fba:	a307      	add	r3, pc, #28	; (adr r3, 8003fd8 <adcLoop+0xa8>)
 8003fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc0:	f7fc fc38 	bl	8000834 <__aeabi_ddiv>
 8003fc4:	f7fc fde4 	bl	8000b90 <__aeabi_d2uiz>
 8003fc8:	8028      	strh	r0, [r5, #0]
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	f3af 8000 	nop.w
 8003fd0:	66666666 	.word	0x66666666
 8003fd4:	400a6666 	.word	0x400a6666
 8003fd8:	47ae147b 	.word	0x47ae147b
 8003fdc:	3f847ae1 	.word	0x3f847ae1
 8003fe0:	200000e8 	.word	0x200000e8
 8003fe4:	2000014c 	.word	0x2000014c
 8003fe8:	200000ac 	.word	0x200000ac
 8003fec:	200000a6 	.word	0x200000a6
 8003ff0:	3f300000 	.word	0x3f300000
 8003ff4:	3fe00000 	.word	0x3fe00000

08003ff8 <map>:
{
 8003ff8:	ee07 1a90 	vmov	s15, r1
 8003ffc:	ee06 3a10 	vmov	s12, r3
 8004000:	eddd 6a00 	vldr	s13, [sp]
	return (x - in_min)*(out_max - out_min)/(in_max - in_min) + out_min;
 8004004:	ee07 0a10 	vmov	s14, r0
 8004008:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800400c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004010:	ee05 2a90 	vmov	s11, r2
 8004014:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004018:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800401c:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8004020:	ee76 7a86 	vadd.f32	s15, s13, s12
 8004024:	ee17 0a90 	vmov	r0, s15
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop

0800402c <mainInit>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void mainInit()
{
 800402c:	b4f0      	push	{r4, r5, r6, r7}
	temp_setpoint = 60;
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <mainInit+0x2c>)
	valveState = 0;
 8004030:	4f0a      	ldr	r7, [pc, #40]	; (800405c <mainInit+0x30>)
	heaterState = 0;
 8004032:	4e0b      	ldr	r6, [pc, #44]	; (8004060 <mainInit+0x34>)
	heatingScheduleState = 0;
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <mainInit+0x38>)
	it_count = 0;
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <mainInit+0x3c>)
	rtcTimeTotal = 0;
 8004038:	490c      	ldr	r1, [pc, #48]	; (800406c <mainInit+0x40>)
	loggingState = 0;
 800403a:	4a0d      	ldr	r2, [pc, #52]	; (8004070 <mainInit+0x44>)
	temp_setpoint = 60;
 800403c:	203c      	movs	r0, #60	; 0x3c
 800403e:	8018      	strh	r0, [r3, #0]
	valveState = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	803b      	strh	r3, [r7, #0]
	heaterState = 0;
 8004044:	8033      	strh	r3, [r6, #0]
	heatingScheduleState = 0;
 8004046:	802b      	strh	r3, [r5, #0]
	it_count = 0;
 8004048:	6023      	str	r3, [r4, #0]
	HAL_Delay(200);
 800404a:	20c8      	movs	r0, #200	; 0xc8

}
 800404c:	bcf0      	pop	{r4, r5, r6, r7}
	rtcTimeTotal = 0;
 800404e:	600b      	str	r3, [r1, #0]
	loggingState = 0;
 8004050:	8013      	strh	r3, [r2, #0]
	HAL_Delay(200);
 8004052:	f7fc bdf3 	b.w	8000c3c <HAL_Delay>
 8004056:	bf00      	nop
 8004058:	200000f0 	.word	0x200000f0
 800405c:	20000290 	.word	0x20000290
 8004060:	20000258 	.word	0x20000258
 8004064:	200001a0 	.word	0x200001a0
 8004068:	200000f4 	.word	0x200000f4
 800406c:	200002d4 	.word	0x200002d4
 8004070:	20000148 	.word	0x20000148

08004074 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004076:	b097      	sub	sp, #92	; 0x5c
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004078:	2703      	movs	r7, #3
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800407a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800407e:	2501      	movs	r5, #1
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8004080:	2110      	movs	r1, #16
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004082:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004084:	2200      	movs	r2, #0
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004086:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800408a:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800408c:	970c      	str	r7, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800408e:	960d      	str	r6, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004090:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = 16;
 8004092:	9111      	str	r1, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004094:	9413      	str	r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004096:	9214      	str	r2, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004098:	9315      	str	r3, [sp, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800409a:	f7fe f837 	bl	800210c <HAL_RCC_OscConfig>
 800409e:	b100      	cbz	r0, 80040a2 <SystemClock_Config+0x2e>
 80040a0:	e7fe      	b.n	80040a0 <SystemClock_Config+0x2c>
 80040a2:	4603      	mov	r3, r0
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040a8:	4621      	mov	r1, r4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040aa:	250f      	movs	r5, #15
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040ac:	4668      	mov	r0, sp
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ae:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040b0:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040b2:	9401      	str	r4, [sp, #4]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040b4:	9500      	str	r5, [sp, #0]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040b6:	9203      	str	r2, [sp, #12]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040b8:	f7fe fb2a 	bl	8002710 <HAL_RCC_ClockConfig>
 80040bc:	4603      	mov	r3, r0
 80040be:	b100      	cbz	r0, 80040c2 <SystemClock_Config+0x4e>
 80040c0:	e7fe      	b.n	80040c0 <SystemClock_Config+0x4c>
	{
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80040c2:	4c11      	ldr	r4, [pc, #68]	; (8004108 <SystemClock_Config+0x94>)
			|RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80040c4:	9007      	str	r0, [sp, #28]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80040c6:	f44f 7180 	mov.w	r1, #256	; 0x100
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80040ca:	f44f 7240 	mov.w	r2, #768	; 0x300
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ce:	a805      	add	r0, sp, #20
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80040d0:	9405      	str	r4, [sp, #20]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80040d2:	9308      	str	r3, [sp, #32]
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80040d4:	9109      	str	r1, [sp, #36]	; 0x24
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80040d6:	9206      	str	r2, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040d8:	f7fe fc18 	bl	800290c <HAL_RCCEx_PeriphCLKConfig>
 80040dc:	4604      	mov	r4, r0
 80040de:	b100      	cbz	r0, 80040e2 <SystemClock_Config+0x6e>
 80040e0:	e7fe      	b.n	80040e0 <SystemClock_Config+0x6c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80040e2:	f7fe fbdd 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <SystemClock_Config+0x98>)
 80040e8:	fba3 3000 	umull	r3, r0, r3, r0
 80040ec:	0980      	lsrs	r0, r0, #6
 80040ee:	f7fd fa4f 	bl	8001590 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80040f2:	2004      	movs	r0, #4
 80040f4:	f7fd fa66 	bl	80015c4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80040f8:	4622      	mov	r2, r4
 80040fa:	4621      	mov	r1, r4
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	f7fd fa04 	bl	800150c <HAL_NVIC_SetPriority>
}
 8004104:	b017      	add	sp, #92	; 0x5c
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	000100a1 	.word	0x000100a1
 800410c:	10624dd3 	.word	0x10624dd3

08004110 <main>:
{
 8004110:	b580      	push	{r7, lr}
{

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004112:	4d9f      	ldr	r5, [pc, #636]	; (8004390 <main+0x280>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
			|GPIO_PIN_6, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004114:	f8df a298 	ldr.w	sl, [pc, #664]	; 80043b0 <main+0x2a0>
{
 8004118:	b08e      	sub	sp, #56	; 0x38
	HAL_Init();
 800411a:	f7fc fd6f 	bl	8000bfc <HAL_Init>
	SystemClock_Config();
 800411e:	f7ff ffa9 	bl	8004074 <SystemClock_Config>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004122:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 8004124:	489b      	ldr	r0, [pc, #620]	; (8004394 <main+0x284>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800412a:	616b      	str	r3, [r5, #20]
 800412c:	696b      	ldr	r3, [r5, #20]
 800412e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004136:	696b      	ldr	r3, [r5, #20]
 8004138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800413c:	616b      	str	r3, [r5, #20]
 800413e:	696b      	ldr	r3, [r5, #20]
 8004140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004144:	9302      	str	r3, [sp, #8]
 8004146:	9b02      	ldr	r3, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004148:	696b      	ldr	r3, [r5, #20]
 800414a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414e:	616b      	str	r3, [r5, #20]
 8004150:	696b      	ldr	r3, [r5, #20]
 8004152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800415a:	696b      	ldr	r3, [r5, #20]
 800415c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004160:	616b      	str	r3, [r5, #20]
 8004162:	696b      	ldr	r3, [r5, #20]
 8004164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004168:	9304      	str	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 800416a:	2200      	movs	r2, #0
 800416c:	2184      	movs	r1, #132	; 0x84
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800416e:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_7, GPIO_PIN_RESET);
 8004170:	f7fd fc0e 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8004174:	2200      	movs	r2, #0
 8004176:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800417a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800417e:	f7fd fc07 	bl	8001990 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004182:	2200      	movs	r2, #0
 8004184:	f44f 618f 	mov.w	r1, #1144	; 0x478
 8004188:	4883      	ldr	r0, [pc, #524]	; (8004398 <main+0x288>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800418c:	f7fd fc00 	bl	8001990 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004194:	a908      	add	r1, sp, #32
 8004196:	487f      	ldr	r0, [pc, #508]	; (8004394 <main+0x284>)
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004198:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800419a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	940a      	str	r4, [sp, #40]	; 0x28

	/*Configure GPIO pins : PC0 PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041a0:	f04f 0803 	mov.w	r8, #3
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a4:	f7fd fb0a 	bl	80017bc <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a8:	a908      	add	r1, sp, #32
 80041aa:	487a      	ldr	r0, [pc, #488]	; (8004394 <main+0x284>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ac:	9409      	str	r4, [sp, #36]	; 0x24

	/*Configure GPIO pins : PC2 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ae:	2601      	movs	r6, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b0:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041b2:	f8cd 8020 	str.w	r8, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b6:	f7fd fb01 	bl	80017bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80041ba:	2384      	movs	r3, #132	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041bc:	a908      	add	r1, sp, #32
 80041be:	4875      	ldr	r0, [pc, #468]	; (8004394 <main+0x284>)
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7;
 80041c0:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c4:	940b      	str	r4, [sp, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041c6:	9609      	str	r6, [sp, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c8:	f7fd faf8 	bl	80017bc <HAL_GPIO_Init>

	/*Configure GPIO pins : touchTOGGLE_Pin PA4 */
	GPIO_InitStruct.Pin = touchTOGGLE_Pin|GPIO_PIN_4;
 80041cc:	2211      	movs	r2, #17
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041ce:	4b73      	ldr	r3, [pc, #460]	; (800439c <main+0x28c>)
	GPIO_InitStruct.Pin = touchTOGGLE_Pin|GPIO_PIN_4;
 80041d0:	9208      	str	r2, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d2:	a908      	add	r1, sp, #32
 80041d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80041d8:	9309      	str	r3, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	940a      	str	r4, [sp, #40]	; 0x28

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041dc:	f04f 0902 	mov.w	r9, #2
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e0:	f7fd faec 	bl	80017bc <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e4:	a908      	add	r1, sp, #32
 80041e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041ea:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041ec:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041ee:	f8cd 9020 	str.w	r9, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f2:	f7fd fae3 	bl	80017bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80041f6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
			|GPIO_PIN_9|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041fa:	a908      	add	r1, sp, #32
 80041fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8004200:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004202:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004206:	940b      	str	r4, [sp, #44]	; 0x2c

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004208:	2704      	movs	r7, #4
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420a:	f7fd fad7 	bl	80017bc <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420e:	a908      	add	r1, sp, #32
 8004210:	4861      	ldr	r0, [pc, #388]	; (8004398 <main+0x288>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004212:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004218:	9708      	str	r7, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421a:	f7fd facf 	bl	80017bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800421e:	f44f 638f 	mov.w	r3, #1144	; 0x478
			|GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004222:	a908      	add	r1, sp, #32
 8004224:	485c      	ldr	r0, [pc, #368]	; (8004398 <main+0x288>)
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004226:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004228:	9609      	str	r6, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422a:	940a      	str	r4, [sp, #40]	; 0x28
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422c:	940b      	str	r4, [sp, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422e:	f7fd fac5 	bl	80017bc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004232:	4622      	mov	r2, r4
 8004234:	4621      	mov	r1, r4
 8004236:	2006      	movs	r0, #6
 8004238:	f7fd f968 	bl	800150c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800423c:	2006      	movs	r0, #6
 800423e:	f7fd f99b 	bl	8001578 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8004242:	4622      	mov	r2, r4
 8004244:	4621      	mov	r1, r4
 8004246:	2008      	movs	r0, #8
 8004248:	f7fd f960 	bl	800150c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 800424c:	2008      	movs	r0, #8
 800424e:	f7fd f993 	bl	8001578 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004252:	4622      	mov	r2, r4
 8004254:	4621      	mov	r1, r4
 8004256:	200a      	movs	r0, #10
 8004258:	f7fd f958 	bl	800150c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800425c:	200a      	movs	r0, #10
 800425e:	f7fd f98b 	bl	8001578 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004262:	4622      	mov	r2, r4
 8004264:	4621      	mov	r1, r4
 8004266:	2028      	movs	r0, #40	; 0x28
 8004268:	f7fd f950 	bl	800150c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800426c:	2028      	movs	r0, #40	; 0x28
 800426e:	f7fd f983 	bl	8001578 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004272:	696b      	ldr	r3, [r5, #20]
 8004274:	4333      	orrs	r3, r6
 8004276:	616b      	str	r3, [r5, #20]
 8004278:	696b      	ldr	r3, [r5, #20]
 800427a:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800427c:	4622      	mov	r2, r4
 800427e:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004280:	9300      	str	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004282:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004284:	9b00      	ldr	r3, [sp, #0]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004286:	f7fd f941 	bl	800150c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800428a:	200b      	movs	r0, #11
 800428c:	f7fd f974 	bl	8001578 <HAL_NVIC_EnableIRQ>
	huart1.Instance = USART1;
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <main+0x290>)
 8004292:	4944      	ldr	r1, [pc, #272]	; (80043a4 <main+0x294>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004294:	609c      	str	r4, [r3, #8]
	huart1.Init.BaudRate = 115200;
 8004296:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart1.Init.Mode = UART_MODE_TX_RX;
 800429a:	250c      	movs	r5, #12
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800429c:	4618      	mov	r0, r3
	huart1.Init.StopBits = UART_STOPBITS_1;
 800429e:	60dc      	str	r4, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80042a0:	611c      	str	r4, [r3, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042a2:	619c      	str	r4, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042a4:	61dc      	str	r4, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042a6:	621c      	str	r4, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042a8:	625c      	str	r4, [r3, #36]	; 0x24
	huart1.Init.BaudRate = 115200;
 80042aa:	e883 0006 	stmia.w	r3, {r1, r2}
	huart1.Init.Mode = UART_MODE_TX_RX;
 80042ae:	615d      	str	r5, [r3, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80042b0:	f7ff faa8 	bl	8003804 <HAL_UART_Init>
 80042b4:	b100      	cbz	r0, 80042b8 <main+0x1a8>
 80042b6:	e7fe      	b.n	80042b6 <main+0x1a6>
	htim2.Instance = TIM2;
 80042b8:	4c3b      	ldr	r4, [pc, #236]	; (80043a8 <main+0x298>)
 80042ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042be:	60a0      	str	r0, [r4, #8]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c0:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c2:	61a0      	str	r0, [r4, #24]
	htim2.Init.Prescaler = 64;
 80042c4:	2240      	movs	r2, #64	; 0x40
	htim2.Instance = TIM2;
 80042c6:	6023      	str	r3, [r4, #0]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042c8:	4620      	mov	r0, r4
	htim2.Init.Period = 2048;
 80042ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
	htim2.Init.Prescaler = 64;
 80042ce:	6062      	str	r2, [r4, #4]
	htim2.Init.Period = 2048;
 80042d0:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042d2:	f7fe ffff 	bl	80032d4 <HAL_TIM_Base_Init>
 80042d6:	b100      	cbz	r0, 80042da <main+0x1ca>
 80042d8:	e7fe      	b.n	80042d8 <main+0x1c8>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042de:	a908      	add	r1, sp, #32
 80042e0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e2:	9308      	str	r3, [sp, #32]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042e4:	f7fe fe0c 	bl	8002f00 <HAL_TIM_ConfigClockSource>
 80042e8:	4603      	mov	r3, r0
 80042ea:	b100      	cbz	r0, 80042ee <main+0x1de>
 80042ec:	e7fe      	b.n	80042ec <main+0x1dc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042ee:	4620      	mov	r0, r4
 80042f0:	a905      	add	r1, sp, #20
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f2:	9305      	str	r3, [sp, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042f4:	9307      	str	r3, [sp, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042f6:	f7ff f809 	bl	800330c <HAL_TIMEx_MasterConfigSynchronization>
 80042fa:	4603      	mov	r3, r0
 80042fc:	b100      	cbz	r0, 8004300 <main+0x1f0>
 80042fe:	e7fe      	b.n	80042fe <main+0x1ee>
	hadc1.Instance = ADC1;
 8004300:	4c2a      	ldr	r4, [pc, #168]	; (80043ac <main+0x29c>)
 8004302:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004306:	4620      	mov	r0, r4
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004308:	6063      	str	r3, [r4, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800430a:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800430c:	61e3      	str	r3, [r4, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800430e:	6263      	str	r3, [r4, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004310:	6323      	str	r3, [r4, #48]	; 0x30
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004312:	60e3      	str	r3, [r4, #12]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8004314:	6363      	str	r3, [r4, #52]	; 0x34
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8004316:	61a3      	str	r3, [r4, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004318:	63a3      	str	r3, [r4, #56]	; 0x38
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800431a:	6126      	str	r6, [r4, #16]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800431c:	62e6      	str	r6, [r4, #44]	; 0x2c
	hadc1.Init.NbrOfConversion = 4;
 800431e:	6227      	str	r7, [r4, #32]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004320:	6167      	str	r7, [r4, #20]
	hadc1.Instance = ADC1;
 8004322:	6022      	str	r2, [r4, #0]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004324:	f7fc fd48 	bl	8000db8 <HAL_ADC_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	b100      	cbz	r0, 800432e <main+0x21e>
 800432c:	e7fe      	b.n	800432c <main+0x21c>
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800432e:	a905      	add	r1, sp, #20
 8004330:	4620      	mov	r0, r4
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8004332:	9305      	str	r3, [sp, #20]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004334:	f7fd f866 	bl	8001404 <HAL_ADCEx_MultiModeConfigChannel>
 8004338:	b100      	cbz	r0, 800433c <main+0x22c>
 800433a:	e7fe      	b.n	800433a <main+0x22a>
	sConfig.Channel = ADC_CHANNEL_13;
 800433c:	220d      	movs	r2, #13
	sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800433e:	2305      	movs	r3, #5
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004340:	900b      	str	r0, [sp, #44]	; 0x2c
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004342:	900c      	str	r0, [sp, #48]	; 0x30
	sConfig.Offset = 0;
 8004344:	900d      	str	r0, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004346:	a908      	add	r1, sp, #32
 8004348:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800434a:	9609      	str	r6, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_13;
 800434c:	9208      	str	r2, [sp, #32]
	sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800434e:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004350:	f7fc fec2 	bl	80010d8 <HAL_ADC_ConfigChannel>
 8004354:	b100      	cbz	r0, 8004358 <main+0x248>
 8004356:	e7fe      	b.n	8004356 <main+0x246>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004358:	a908      	add	r1, sp, #32
 800435a:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_12;
 800435c:	9508      	str	r5, [sp, #32]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800435e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004362:	f7fc feb9 	bl	80010d8 <HAL_ADC_ConfigChannel>
 8004366:	b100      	cbz	r0, 800436a <main+0x25a>
 8004368:	e7fe      	b.n	8004368 <main+0x258>
	sConfig.Channel = ADC_CHANNEL_9;
 800436a:	2309      	movs	r3, #9
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800436c:	a908      	add	r1, sp, #32
 800436e:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8004370:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_9;
 8004374:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004376:	f7fc feaf 	bl	80010d8 <HAL_ADC_ConfigChannel>
 800437a:	b100      	cbz	r0, 800437e <main+0x26e>
 800437c:	e7fe      	b.n	800437c <main+0x26c>
	sConfig.Channel = ADC_CHANNEL_11;
 800437e:	230b      	movs	r3, #11
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004380:	4620      	mov	r0, r4
 8004382:	a908      	add	r1, sp, #32
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8004384:	9709      	str	r7, [sp, #36]	; 0x24
	sConfig.Channel = ADC_CHANNEL_11;
 8004386:	9308      	str	r3, [sp, #32]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004388:	f7fc fea6 	bl	80010d8 <HAL_ADC_ConfigChannel>
 800438c:	b190      	cbz	r0, 80043b4 <main+0x2a4>
 800438e:	e7fe      	b.n	800438e <main+0x27e>
 8004390:	40021000 	.word	0x40021000
 8004394:	48000800 	.word	0x48000800
 8004398:	48000400 	.word	0x48000400
 800439c:	10210000 	.word	0x10210000
 80043a0:	200001a4 	.word	0x200001a4
 80043a4:	40013800 	.word	0x40013800
 80043a8:	20000294 	.word	0x20000294
 80043ac:	2000014c 	.word	0x2000014c
 80043b0:	10110000 	.word	0x10110000
	hi2c1.Instance = I2C1;
 80043b4:	4c37      	ldr	r4, [pc, #220]	; (8004494 <main+0x384>)
 80043b6:	4b38      	ldr	r3, [pc, #224]	; (8004498 <main+0x388>)
	hi2c1.Init.Timing = 0x2000090E;
 80043b8:	4938      	ldr	r1, [pc, #224]	; (800449c <main+0x38c>)
	hi2c1.Instance = I2C1;
 80043ba:	6023      	str	r3, [r4, #0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043bc:	2201      	movs	r2, #1
	hi2c1.Init.OwnAddress1 = 0;
 80043be:	2300      	movs	r3, #0
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043c0:	4620      	mov	r0, r4
	hi2c1.Init.Timing = 0x2000090E;
 80043c2:	6061      	str	r1, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043c4:	60e2      	str	r2, [r4, #12]
	hi2c1.Init.OwnAddress1 = 0;
 80043c6:	60a3      	str	r3, [r4, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043c8:	6123      	str	r3, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80043ca:	6163      	str	r3, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043cc:	61a3      	str	r3, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043ce:	61e3      	str	r3, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043d0:	6223      	str	r3, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043d2:	f7fd fc2b 	bl	8001c2c <HAL_I2C_Init>
 80043d6:	4601      	mov	r1, r0
 80043d8:	b100      	cbz	r0, 80043dc <main+0x2cc>
 80043da:	e7fe      	b.n	80043da <main+0x2ca>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043dc:	4620      	mov	r0, r4
 80043de:	f7fd fe43 	bl	8002068 <HAL_I2CEx_ConfigAnalogFilter>
 80043e2:	4601      	mov	r1, r0
 80043e4:	b100      	cbz	r0, 80043e8 <main+0x2d8>
 80043e6:	e7fe      	b.n	80043e6 <main+0x2d6>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043e8:	4620      	mov	r0, r4
 80043ea:	f7fd fe67 	bl	80020bc <HAL_I2CEx_ConfigDigitalFilter>
 80043ee:	4605      	mov	r5, r0
 80043f0:	b100      	cbz	r0, 80043f4 <main+0x2e4>
 80043f2:	e7fe      	b.n	80043f2 <main+0x2e2>
	hrtc.Instance = RTC;
 80043f4:	4c2a      	ldr	r4, [pc, #168]	; (80044a0 <main+0x390>)
 80043f6:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <main+0x394>)
 80043f8:	6023      	str	r3, [r4, #0]
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 80043fa:	4620      	mov	r0, r4
 80043fc:	4629      	mov	r1, r5
 80043fe:	f7fe fd6d 	bl	8002edc <HAL_RTCEx_BKUPRead>
 8004402:	f243 26f2 	movw	r6, #13042	; 0x32f2
 8004406:	42b0      	cmp	r0, r6
 8004408:	d012      	beq.n	8004430 <main+0x320>
		hrtc.Init.SynchPrediv = 1999;
 800440a:	f240 73cf 	movw	r3, #1999	; 0x7cf
		hrtc.Init.AsynchPrediv = 124;
 800440e:	227c      	movs	r2, #124	; 0x7c
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004410:	4620      	mov	r0, r4
		hrtc.Init.SynchPrediv = 1999;
 8004412:	60e3      	str	r3, [r4, #12]
		hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004414:	6065      	str	r5, [r4, #4]
		hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004416:	6125      	str	r5, [r4, #16]
		hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004418:	6165      	str	r5, [r4, #20]
		hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800441a:	61a5      	str	r5, [r4, #24]
		hrtc.Init.AsynchPrediv = 124;
 800441c:	60a2      	str	r2, [r4, #8]
		if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800441e:	f7fe fbd1 	bl	8002bc4 <HAL_RTC_Init>
 8004422:	4603      	mov	r3, r0
 8004424:	b190      	cbz	r0, 800444c <main+0x33c>
 8004426:	e7fe      	b.n	8004426 <main+0x316>
		HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8004428:	4632      	mov	r2, r6
 800442a:	4620      	mov	r0, r4
 800442c:	f7fe fd50 	bl	8002ed0 <HAL_RTCEx_BKUPWrite>
	mainInit();
 8004430:	f7ff fdfc 	bl	800402c <mainInit>
	uartInit();
 8004434:	f000 fb5a 	bl	8004aec <uartInit>
	SevSegInit();
 8004438:	f7ff fbcc 	bl	8003bd4 <SevSegInit>
	adcInit();
 800443c:	f7ff fcf2 	bl	8003e24 <adcInit>
	proxSenseI2CInit();
 8004440:	f000 f836 	bl	80044b0 <proxSenseI2CInit>
	HAL_TIM_Base_Start_IT(&htim2);
 8004444:	4818      	ldr	r0, [pc, #96]	; (80044a8 <main+0x398>)
 8004446:	f7fe fd4f 	bl	8002ee8 <HAL_TIM_Base_Start_IT>
 800444a:	e7fe      	b.n	800444a <main+0x33a>
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800444c:	4602      	mov	r2, r0
 800444e:	a908      	add	r1, sp, #32
 8004450:	4620      	mov	r0, r4
		sTime.Hours = 0;
 8004452:	f88d 3020 	strb.w	r3, [sp, #32]
		sTime.Minutes = 0;
 8004456:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		sTime.Seconds = 0;
 800445a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800445e:	930b      	str	r3, [sp, #44]	; 0x2c
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004460:	930c      	str	r3, [sp, #48]	; 0x30
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004462:	f7fe fc07 	bl	8002c74 <HAL_RTC_SetTime>
 8004466:	4602      	mov	r2, r0
 8004468:	b100      	cbz	r0, 800446c <main+0x35c>
 800446a:	e7fe      	b.n	800446a <main+0x35a>
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 800446c:	2003      	movs	r0, #3
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800446e:	a905      	add	r1, sp, #20
		sDate.Year = 18;
 8004470:	2312      	movs	r3, #18
		sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8004472:	f88d 0014 	strb.w	r0, [sp, #20]
		sDate.Month = RTC_MONTH_MAY;
 8004476:	2705      	movs	r7, #5
		sDate.Date = 16;
 8004478:	2510      	movs	r5, #16
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800447a:	4620      	mov	r0, r4
		sDate.Month = RTC_MONTH_MAY;
 800447c:	f88d 7015 	strb.w	r7, [sp, #21]
		sDate.Date = 16;
 8004480:	f88d 5016 	strb.w	r5, [sp, #22]
		sDate.Year = 18;
 8004484:	f88d 3017 	strb.w	r3, [sp, #23]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004488:	f7fe fc94 	bl	8002db4 <HAL_RTC_SetDate>
 800448c:	4601      	mov	r1, r0
 800448e:	2800      	cmp	r0, #0
 8004490:	d0ca      	beq.n	8004428 <main+0x318>
 8004492:	e7fe      	b.n	8004492 <main+0x382>
 8004494:	200000f8 	.word	0x200000f8
 8004498:	40005400 	.word	0x40005400
 800449c:	2000090e 	.word	0x2000090e
 80044a0:	2000025c 	.word	0x2000025c
 80044a4:	40002800 	.word	0x40002800
 80044a8:	20000294 	.word	0x20000294

080044ac <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 80044ac:	e7fe      	b.n	80044ac <_Error_Handler>
 80044ae:	bf00      	nop

080044b0 <proxSenseI2CInit>:
uint8_t addressFlag = 0;



void proxSenseI2CInit()
{
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	4e16      	ldr	r6, [pc, #88]	; (8004510 <proxSenseI2CInit+0x60>)
 80044b6:	f8df a064 	ldr.w	sl, [pc, #100]	; 800451c <proxSenseI2CInit+0x6c>
 80044ba:	4c16      	ldr	r4, [pc, #88]	; (8004514 <proxSenseI2CInit+0x64>)
 80044bc:	4d16      	ldr	r5, [pc, #88]	; (8004518 <proxSenseI2CInit+0x68>)

	// set board to slider/wheel mode
	do
	{
		//printf("Writing slider settings...\r\n");
		comStatus = HAL_I2C_Mem_Write(&hi2c1, sliderAddr, settingsBytes, I2C_MEMADD_SIZE_8BIT, settings, 5, TIMEOUT);
 80044be:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8004520 <proxSenseI2CInit+0x70>
{
 80044c2:	b084      	sub	sp, #16
		comStatus = HAL_I2C_Mem_Write(&hi2c1, sliderAddr, settingsBytes, I2C_MEMADD_SIZE_8BIT, settings, 5, TIMEOUT);
 80044c4:	f04f 0802 	mov.w	r8, #2
 80044c8:	2705      	movs	r7, #5
 80044ca:	f8ba 1000 	ldrh.w	r1, [sl]
 80044ce:	8832      	ldrh	r2, [r6, #0]
 80044d0:	e88d 0190 	stmia.w	sp, {r4, r7, r8}
 80044d4:	2301      	movs	r3, #1
 80044d6:	4648      	mov	r0, r9
 80044d8:	f7fd fbfe 	bl	8001cd8 <HAL_I2C_Mem_Write>
 80044dc:	7028      	strb	r0, [r5, #0]

	}
	while(comStatus != HAL_OK);
 80044de:	2800      	cmp	r0, #0
 80044e0:	d1f3      	bne.n	80044ca <proxSenseI2CInit+0x1a>
 80044e2:	f8df a040 	ldr.w	sl, [pc, #64]	; 8004524 <proxSenseI2CInit+0x74>
	//printf("Succez. %d\r\n", comStatus);
	comStatus = 0;
	do
	{
		//printf("Writing rotato settings...\r\n");
		comStatus =HAL_I2C_Mem_Write(&hi2c1, rotaryAddr, settingsBytes, I2C_MEMADD_SIZE_8BIT, settings, 5, TIMEOUT);
 80044e6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8004520 <proxSenseI2CInit+0x70>
 80044ea:	f04f 0802 	mov.w	r8, #2
 80044ee:	2705      	movs	r7, #5
 80044f0:	f8ba 1000 	ldrh.w	r1, [sl]
 80044f4:	8832      	ldrh	r2, [r6, #0]
 80044f6:	e88d 0190 	stmia.w	sp, {r4, r7, r8}
 80044fa:	2301      	movs	r3, #1
 80044fc:	4648      	mov	r0, r9
 80044fe:	f7fd fbeb 	bl	8001cd8 <HAL_I2C_Mem_Write>
 8004502:	7028      	strb	r0, [r5, #0]
	}
	while(comStatus != HAL_OK);
 8004504:	2800      	cmp	r0, #0
 8004506:	d1f3      	bne.n	80044f0 <proxSenseI2CInit+0x40>
	//printf("Succez x2. %d\r\n", comStatus);
	//printSettings();


}
 8004508:	b004      	add	sp, #16
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	bf00      	nop
 8004510:	2000000a 	.word	0x2000000a
 8004514:	20000004 	.word	0x20000004
 8004518:	200000c9 	.word	0x200000c9
 800451c:	2000000c 	.word	0x2000000c
 8004520:	200000f8 	.word	0x200000f8
 8004524:	20000002 	.word	0x20000002

08004528 <i2cIRQ>:
	}

}

void i2cIRQ()
{
 8004528:	b530      	push	{r4, r5, lr}
	if(addressFlag == 0)
 800452a:	4c24      	ldr	r4, [pc, #144]	; (80045bc <i2cIRQ+0x94>)
 800452c:	7823      	ldrb	r3, [r4, #0]
{
 800452e:	b085      	sub	sp, #20
	if(addressFlag == 0)
 8004530:	b14b      	cbz	r3, 8004546 <i2cIRQ+0x1e>
	{
		HAL_I2C_Mem_Read(&hi2c1, sliderAddr, coordBytes, I2C_MEMADD_SIZE_8BIT, &slideCBuff, (uint16_t)1, TIMEOUT);
	}
	else if(addressFlag == 3)
 8004532:	2b03      	cmp	r3, #3
 8004534:	d016      	beq.n	8004564 <i2cIRQ+0x3c>
		{
			temp_setpoint = (uint16_t)map(slideCBuff, 1, 125, 0, 100);
		}
	}

	if(++addressFlag == 6) addressFlag = 0;
 8004536:	3301      	adds	r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b06      	cmp	r3, #6
 800453c:	bf08      	it	eq
 800453e:	2300      	moveq	r3, #0
 8004540:	7023      	strb	r3, [r4, #0]

}
 8004542:	b005      	add	sp, #20
 8004544:	bd30      	pop	{r4, r5, pc}
		HAL_I2C_Mem_Read(&hi2c1, sliderAddr, coordBytes, I2C_MEMADD_SIZE_8BIT, &slideCBuff, (uint16_t)1, TIMEOUT);
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <i2cIRQ+0x98>)
 8004548:	4a1e      	ldr	r2, [pc, #120]	; (80045c4 <i2cIRQ+0x9c>)
 800454a:	8819      	ldrh	r1, [r3, #0]
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <i2cIRQ+0xa0>)
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	2002      	movs	r0, #2
 8004554:	2301      	movs	r3, #1
 8004556:	9002      	str	r0, [sp, #8]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	481c      	ldr	r0, [pc, #112]	; (80045cc <i2cIRQ+0xa4>)
 800455c:	f7fd fc9e 	bl	8001e9c <HAL_I2C_Mem_Read>
 8004560:	7823      	ldrb	r3, [r4, #0]
 8004562:	e7e8      	b.n	8004536 <i2cIRQ+0xe>
		HAL_I2C_Mem_Read(&hi2c1, sliderAddr, touchBytes, I2C_MEMADD_SIZE_8BIT, &sliderBusyFlag, (uint16_t)1, TIMEOUT);
 8004564:	4b16      	ldr	r3, [pc, #88]	; (80045c0 <i2cIRQ+0x98>)
 8004566:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <i2cIRQ+0xa8>)
 8004568:	8819      	ldrh	r1, [r3, #0]
 800456a:	4d1a      	ldr	r5, [pc, #104]	; (80045d4 <i2cIRQ+0xac>)
 800456c:	8812      	ldrh	r2, [r2, #0]
 800456e:	9500      	str	r5, [sp, #0]
 8004570:	2301      	movs	r3, #1
 8004572:	2002      	movs	r0, #2
 8004574:	9002      	str	r0, [sp, #8]
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	4814      	ldr	r0, [pc, #80]	; (80045cc <i2cIRQ+0xa4>)
 800457a:	f7fd fc8f 	bl	8001e9c <HAL_I2C_Mem_Read>
		if(sliderBusyFlag > 1)
 800457e:	782b      	ldrb	r3, [r5, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d919      	bls.n	80045b8 <i2cIRQ+0x90>
			temp_setpoint = (uint16_t)map(slideCBuff, 1, 125, 0, 100);
 8004584:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <i2cIRQ+0xa0>)
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <i2cIRQ+0xb0>)
 8004588:	7810      	ldrb	r0, [r2, #0]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	ee07 0a90 	vmov	s15, r0
 8004590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004594:	2300      	movs	r3, #0
 8004596:	ee17 0a90 	vmov	r0, s15
 800459a:	4a10      	ldr	r2, [pc, #64]	; (80045dc <i2cIRQ+0xb4>)
 800459c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80045a0:	f7ff fd2a 	bl	8003ff8 <map>
 80045a4:	ee07 0a90 	vmov	s15, r0
 80045a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <i2cIRQ+0xb8>)
 80045ae:	7823      	ldrb	r3, [r4, #0]
 80045b0:	ee17 0a90 	vmov	r0, s15
 80045b4:	8010      	strh	r0, [r2, #0]
 80045b6:	e7be      	b.n	8004536 <i2cIRQ+0xe>
 80045b8:	7823      	ldrb	r3, [r4, #0]
 80045ba:	e7bc      	b.n	8004536 <i2cIRQ+0xe>
 80045bc:	200000c8 	.word	0x200000c8
 80045c0:	2000000c 	.word	0x2000000c
 80045c4:	20000000 	.word	0x20000000
 80045c8:	200002e2 	.word	0x200002e2
 80045cc:	200000f8 	.word	0x200000f8
 80045d0:	2000000e 	.word	0x2000000e
 80045d4:	200000ca 	.word	0x200000ca
 80045d8:	42c80000 	.word	0x42c80000
 80045dc:	42fa0000 	.word	0x42fa0000
 80045e0:	200000f0 	.word	0x200000f0

080045e4 <printSettings>:


void printSettings()
{
 80045e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	HAL_I2C_Mem_Read(&hi2c1, sliderAddr, settingsBytes, I2C_MEMADD_SIZE_8BIT, settingsBuff, (uint16_t)5 , 10);
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <printSettings+0x70>)
 80045ea:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800466c <printSettings+0x88>
 80045ee:	4d1a      	ldr	r5, [pc, #104]	; (8004658 <printSettings+0x74>)
 80045f0:	4c1a      	ldr	r4, [pc, #104]	; (800465c <printSettings+0x78>)
 80045f2:	8819      	ldrh	r1, [r3, #0]
 80045f4:	f8b8 2000 	ldrh.w	r2, [r8]
{
 80045f8:	b084      	sub	sp, #16
	HAL_I2C_Mem_Read(&hi2c1, sliderAddr, settingsBytes, I2C_MEMADD_SIZE_8BIT, settingsBuff, (uint16_t)5 , 10);
 80045fa:	2605      	movs	r6, #5
 80045fc:	270a      	movs	r7, #10
 80045fe:	9400      	str	r4, [sp, #0]
 8004600:	4628      	mov	r0, r5
 8004602:	9702      	str	r7, [sp, #8]
 8004604:	9601      	str	r6, [sp, #4]
 8004606:	2301      	movs	r3, #1
 8004608:	f7fd fc48 	bl	8001e9c <HAL_I2C_Mem_Read>
	printf("Slider settings: %d %d %d %d %d\r\n", settingsBuff[0], settingsBuff[1], settingsBuff[2], settingsBuff[3], settingsBuff[4]);
 800460c:	f894 e004 	ldrb.w	lr, [r4, #4]
 8004610:	78e0      	ldrb	r0, [r4, #3]
 8004612:	78a3      	ldrb	r3, [r4, #2]
 8004614:	7862      	ldrb	r2, [r4, #1]
 8004616:	7821      	ldrb	r1, [r4, #0]
 8004618:	e88d 4001 	stmia.w	sp, {r0, lr}
 800461c:	4810      	ldr	r0, [pc, #64]	; (8004660 <printSettings+0x7c>)
 800461e:	f000 fe27 	bl	8005270 <iprintf>
	HAL_I2C_Mem_Read(&hi2c1, rotaryAddr, settingsBytes, I2C_MEMADD_SIZE_8BIT, &settingsBuff[5], (uint16_t)5 , 10);
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <printSettings+0x80>)
 8004624:	f8b8 2000 	ldrh.w	r2, [r8]
 8004628:	8819      	ldrh	r1, [r3, #0]
 800462a:	9702      	str	r7, [sp, #8]
 800462c:	19a3      	adds	r3, r4, r6
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	9601      	str	r6, [sp, #4]
 8004632:	4628      	mov	r0, r5
 8004634:	2301      	movs	r3, #1
 8004636:	f7fd fc31 	bl	8001e9c <HAL_I2C_Mem_Read>
	printf("Rotato settings: %d %d %d %d %d\r\n", settingsBuff[5], settingsBuff[6], settingsBuff[7], settingsBuff[8], settingsBuff[9]);
 800463a:	7a20      	ldrb	r0, [r4, #8]
 800463c:	7a65      	ldrb	r5, [r4, #9]
 800463e:	79e3      	ldrb	r3, [r4, #7]
 8004640:	79a2      	ldrb	r2, [r4, #6]
 8004642:	7961      	ldrb	r1, [r4, #5]
 8004644:	e88d 0021 	stmia.w	sp, {r0, r5}
 8004648:	4807      	ldr	r0, [pc, #28]	; (8004668 <printSettings+0x84>)
 800464a:	f000 fe11 	bl	8005270 <iprintf>

}
 800464e:	b004      	add	sp, #16
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004654:	2000000c 	.word	0x2000000c
 8004658:	200000f8 	.word	0x200000f8
 800465c:	200002d8 	.word	0x200002d8
 8004660:	08006328 	.word	0x08006328
 8004664:	20000002 	.word	0x20000002
 8004668:	0800634c 	.word	0x0800634c
 800466c:	2000000a 	.word	0x2000000a

08004670 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <HAL_MspInit+0x78>)
{
 8004672:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	619a      	str	r2, [r3, #24]
 800467c:	699b      	ldr	r3, [r3, #24]
{
 800467e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004686:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004688:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800468a:	f7fc ff2d 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	4611      	mov	r1, r2
 8004692:	f06f 000b 	mvn.w	r0, #11
 8004696:	f7fc ff39 	bl	800150c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800469a:	2200      	movs	r2, #0
 800469c:	4611      	mov	r1, r2
 800469e:	f06f 000a 	mvn.w	r0, #10
 80046a2:	f7fc ff33 	bl	800150c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	4611      	mov	r1, r2
 80046aa:	f06f 0009 	mvn.w	r0, #9
 80046ae:	f7fc ff2d 	bl	800150c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80046b2:	2200      	movs	r2, #0
 80046b4:	4611      	mov	r1, r2
 80046b6:	f06f 0004 	mvn.w	r0, #4
 80046ba:	f7fc ff27 	bl	800150c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	4611      	mov	r1, r2
 80046c2:	f06f 0003 	mvn.w	r0, #3
 80046c6:	f7fc ff21 	bl	800150c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	4611      	mov	r1, r2
 80046ce:	f06f 0001 	mvn.w	r0, #1
 80046d2:	f7fc ff1b 	bl	800150c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80046d6:	2200      	movs	r2, #0
 80046d8:	4611      	mov	r1, r2
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	f7fc ff15 	bl	800150c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e2:	b003      	add	sp, #12
 80046e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80046e8:	40021000 	.word	0x40021000

080046ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80046ec:	6803      	ldr	r3, [r0, #0]
 80046ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f2:	d000      	beq.n	80046f6 <HAL_ADC_MspInit+0xa>
 80046f4:	4770      	bx	lr
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80046f6:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80046fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 80046fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004700:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004702:	4d1f      	ldr	r5, [pc, #124]	; (8004780 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004704:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004708:	615a      	str	r2, [r3, #20]
 800470a:	695b      	ldr	r3, [r3, #20]
{
 800470c:	b087      	sub	sp, #28
    __HAL_RCC_ADC12_CLK_ENABLE();
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004712:	2600      	movs	r6, #0
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004714:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004716:	2703      	movs	r7, #3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004718:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800471a:	a901      	add	r1, sp, #4
 800471c:	4604      	mov	r4, r0
 800471e:	4819      	ldr	r0, [pc, #100]	; (8004784 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004720:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004722:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004724:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004728:	f7fd f848 	bl	80017bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 800472c:	f242 0303 	movw	r3, #8195	; 0x2003
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004730:	a901      	add	r1, sp, #4
 8004732:	4815      	ldr	r0, [pc, #84]	; (8004788 <HAL_ADC_MspInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004734:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8004736:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473a:	f7fd f83f 	bl	80017bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800473e:	4813      	ldr	r0, [pc, #76]	; (800478c <HAL_ADC_MspInit+0xa0>)
 8004740:	6028      	str	r0, [r5, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004742:	f04f 0e80 	mov.w	lr, #128	; 0x80
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004746:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800474a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800474e:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004754:	4628      	mov	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004756:	606e      	str	r6, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004758:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800475a:	f8c5 e00c 	str.w	lr, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800475e:	612f      	str	r7, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004760:	6169      	str	r1, [r5, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004762:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004764:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004766:	f7fc ff3f 	bl	80015e8 <HAL_DMA_Init>
 800476a:	b918      	cbnz	r0, 8004774 <HAL_ADC_MspInit+0x88>
    {
      _Error_Handler(__FILE__, __LINE__);
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800476c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800476e:	626c      	str	r4, [r5, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004770:	b007      	add	sp, #28
 8004772:	bdf0      	pop	{r4, r5, r6, r7, pc}
      _Error_Handler(__FILE__, __LINE__);
 8004774:	217a      	movs	r1, #122	; 0x7a
 8004776:	4806      	ldr	r0, [pc, #24]	; (8004790 <HAL_ADC_MspInit+0xa4>)
 8004778:	f7ff fe98 	bl	80044ac <_Error_Handler>
 800477c:	e7f6      	b.n	800476c <HAL_ADC_MspInit+0x80>
 800477e:	bf00      	nop
 8004780:	20000214 	.word	0x20000214
 8004784:	48000800 	.word	0x48000800
 8004788:	48000400 	.word	0x48000400
 800478c:	40020008 	.word	0x40020008
 8004790:	08006370 	.word	0x08006370

08004794 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8004794:	6802      	ldr	r2, [r0, #0]
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_I2C_MspInit+0x48>)
 8004798:	429a      	cmp	r2, r3
 800479a:	d000      	beq.n	800479e <HAL_I2C_MspInit+0xa>
 800479c:	4770      	bx	lr
{
 800479e:	b570      	push	{r4, r5, r6, lr}
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047a0:	2304      	movs	r3, #4
{
 80047a2:	b086      	sub	sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047a4:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047a6:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047aa:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047ae:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047b0:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b2:	480b      	ldr	r0, [pc, #44]	; (80047e0 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047b4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80047b8:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047ba:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047bc:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047be:	f7fc fffd 	bl	80017bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047c2:	4b08      	ldr	r3, [pc, #32]	; (80047e4 <HAL_I2C_MspInit+0x50>)
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80047ca:	61da      	str	r2, [r3, #28]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80047d6:	b006      	add	sp, #24
 80047d8:	bd70      	pop	{r4, r5, r6, pc}
 80047da:	bf00      	nop
 80047dc:	40005400 	.word	0x40005400
 80047e0:	48000400 	.word	0x48000400
 80047e4:	40021000 	.word	0x40021000

080047e8 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80047e8:	6802      	ldr	r2, [r0, #0]
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_RTC_MspInit+0x24>)
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d000      	beq.n	80047f2 <HAL_RTC_MspInit+0xa>
 80047f0:	4770      	bx	lr
 80047f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047f6:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047fa:	4b05      	ldr	r3, [pc, #20]	; (8004810 <HAL_RTC_MspInit+0x28>)
 80047fc:	fab2 f282 	clz	r2, r2
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	2201      	movs	r2, #1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40002800 	.word	0x40002800
 8004810:	10908100 	.word	0x10908100

08004814 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004814:	6803      	ldr	r3, [r0, #0]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d000      	beq.n	800481e <HAL_TIM_Base_MspInit+0xa>
 800481c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800481e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
{
 8004822:	b500      	push	{lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	61da      	str	r2, [r3, #28]
 800482c:	69db      	ldr	r3, [r3, #28]
{
 800482e:	b083      	sub	sp, #12
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004830:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004838:	4611      	mov	r1, r2
 800483a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800483c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800483e:	f7fc fe65 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004842:	201c      	movs	r0, #28
 8004844:	f7fc fe98 	bl	8001578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004848:	b003      	add	sp, #12
 800484a:	f85d fb04 	ldr.w	pc, [sp], #4
 800484e:	bf00      	nop

08004850 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8004850:	6802      	ldr	r2, [r0, #0]
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <HAL_UART_MspInit+0x54>)
 8004854:	429a      	cmp	r2, r3
 8004856:	d000      	beq.n	800485a <HAL_UART_MspInit+0xa>
 8004858:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800485a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
{
 800485e:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004860:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004862:	4811      	ldr	r0, [pc, #68]	; (80048a8 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004868:	619a      	str	r2, [r3, #24]
 800486a:	699b      	ldr	r3, [r3, #24]
{
 800486c:	b087      	sub	sp, #28
    __HAL_RCC_USART1_CLK_ENABLE();
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004876:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004878:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800487a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800487c:	2630      	movs	r6, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004880:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004882:	9204      	str	r2, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8004884:	9f00      	ldr	r7, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004886:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488c:	f7fc ff96 	bl	80017bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004890:	4622      	mov	r2, r4
 8004892:	4621      	mov	r1, r4
 8004894:	2025      	movs	r0, #37	; 0x25
 8004896:	f7fc fe39 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800489a:	2025      	movs	r0, #37	; 0x25
 800489c:	f7fc fe6c 	bl	8001578 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048a0:	b007      	add	sp, #28
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048a4:	40013800 	.word	0x40013800
 80048a8:	48000800 	.word	0x48000800

080048ac <SysTick_Handler>:
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
	currentTime++;
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <SysTick_Handler+0x5c>)
{
 80048ae:	b538      	push	{r3, r4, r5, lr}
	currentTime++;
 80048b0:	6813      	ldr	r3, [r2, #0]
	//	every 300ms update the time
	if(currentTime%300 == 0)
 80048b2:	4c16      	ldr	r4, [pc, #88]	; (800490c <SysTick_Handler+0x60>)
	currentTime++;
 80048b4:	3301      	adds	r3, #1
	if(currentTime%300 == 0)
 80048b6:	fba4 1403 	umull	r1, r4, r4, r3
 80048ba:	0964      	lsrs	r4, r4, #5
 80048bc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80048c0:	fb01 3414 	mls	r4, r1, r4, r3
	currentTime++;
 80048c4:	6013      	str	r3, [r2, #0]
	if(currentTime%300 == 0)
 80048c6:	b9bc      	cbnz	r4, 80048f8 <SysTick_Handler+0x4c>
	{
		HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80048c8:	4d11      	ldr	r5, [pc, #68]	; (8004910 <SysTick_Handler+0x64>)
 80048ca:	4812      	ldr	r0, [pc, #72]	; (8004914 <SysTick_Handler+0x68>)
 80048cc:	4622      	mov	r2, r4
 80048ce:	4629      	mov	r1, r5
 80048d0:	f7fe f8de 	bl	8002a90 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80048d4:	4622      	mov	r2, r4
 80048d6:	4910      	ldr	r1, [pc, #64]	; (8004918 <SysTick_Handler+0x6c>)
 80048d8:	480e      	ldr	r0, [pc, #56]	; (8004914 <SysTick_Handler+0x68>)
 80048da:	f7fe f90f 	bl	8002afc <HAL_RTC_GetDate>
		rtcTimeTotal = (rtcTime.Hours*60*60) + (rtcTime.Minutes*60) + (rtcTime.Seconds);
 80048de:	786b      	ldrb	r3, [r5, #1]
 80048e0:	782a      	ldrb	r2, [r5, #0]
 80048e2:	78a8      	ldrb	r0, [r5, #2]
 80048e4:	490d      	ldr	r1, [pc, #52]	; (800491c <SysTick_Handler+0x70>)
 80048e6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 80048f0:	fb04 3302 	mla	r3, r4, r2, r3
 80048f4:	4403      	add	r3, r0
 80048f6:	600b      	str	r3, [r1, #0]
	}

	waterFlowFlagReset();
 80048f8:	f7ff f8f6 	bl	8003ae8 <waterFlowFlagReset>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048fc:	f7fc f990 	bl	8000c20 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_SYSTICK_IRQHandler();
 8004904:	f7fc be6c 	b.w	80015e0 <HAL_SYSTICK_IRQHandler>
 8004908:	200000cc 	.word	0x200000cc
 800490c:	1b4e81b5 	.word	0x1b4e81b5
 8004910:	2000027c 	.word	0x2000027c
 8004914:	2000025c 	.word	0x2000025c
 8004918:	20000144 	.word	0x20000144
 800491c:	200002d4 	.word	0x200002d4

08004920 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line 0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 8004920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	printSettings();
 8004922:	f7ff fe5f 	bl	80045e4 <printSettings>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004926:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8004928:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800492c:	f7fd b838 	b.w	80019a0 <HAL_GPIO_EXTI_IRQHandler>

08004930 <EXTI2_TSC_IRQHandler>:

/**
* @brief This function handles EXTI line 2 and touch sense controller.
*/
void EXTI2_TSC_IRQHandler(void)
{
 8004930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

	flowMeterInterrupt();
 8004932:	f7ff f8bf 	bl	8003ab4 <flowMeterInterrupt>

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004936:	2004      	movs	r0, #4
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8004938:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800493c:	f7fd b830 	b.w	80019a0 <HAL_GPIO_EXTI_IRQHandler>

08004940 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line 4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 8004940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8004942:	2010      	movs	r0, #16
 8004944:	f7fd f82c 	bl	80019a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

	i2cIRQ();

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004948:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	i2cIRQ();
 800494c:	f7ff bdec 	b.w	8004528 <i2cIRQ>

08004950 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004950:	4801      	ldr	r0, [pc, #4]	; (8004958 <DMA1_Channel1_IRQHandler+0x8>)
 8004952:	f7fc bee7 	b.w	8001724 <HAL_DMA_IRQHandler>
 8004956:	bf00      	nop
 8004958:	20000214 	.word	0x20000214

0800495c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 800495c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

	adcLoop();
 800495e:	f7ff fae7 	bl	8003f30 <adcLoop>
	displayLoop();
 8004962:	f7ff fa4b 	bl	8003dfc <displayLoop>
	heaterControlLoop();
 8004966:	f7ff f8fd 	bl	8003b64 <heaterControlLoop>


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800496a:	4802      	ldr	r0, [pc, #8]	; (8004974 <TIM2_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM2_IRQn 1 */


  /* USER CODE END TIM2_IRQn 1 */
}
 800496c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 8004970:	f7fe bb98 	b.w	80030a4 <HAL_TIM_IRQHandler>
 8004974:	20000294 	.word	0x20000294

08004978 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <USART1_IRQHandler+0x8>)
 800497a:	f7fe bfe9 	b.w	8003950 <HAL_UART_IRQHandler>
 800497e:	bf00      	nop
 8004980:	200001a4 	.word	0x200001a4

08004984 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004984:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004988:	f7fd b80a 	b.w	80019a0 <HAL_GPIO_EXTI_IRQHandler>

0800498c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800498c:	4917      	ldr	r1, [pc, #92]	; (80049ec <SystemInit+0x60>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004990:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <SystemInit+0x68>)

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004992:	4819      	ldr	r0, [pc, #100]	; (80049f8 <SystemInit+0x6c>)
{
 8004994:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004996:	f8d1 4088 	ldr.w	r4, [r1, #136]	; 0x88
 800499a:	f444 0470 	orr.w	r4, r4, #15728640	; 0xf00000
 800499e:	f8c1 4088 	str.w	r4, [r1, #136]	; 0x88
  RCC->CR |= 0x00000001U;
 80049a2:	681c      	ldr	r4, [r3, #0]
 80049a4:	f044 0401 	orr.w	r4, r4, #1
 80049a8:	601c      	str	r4, [r3, #0]
  RCC->CFGR &= 0xF87FC00CU;
 80049aa:	685c      	ldr	r4, [r3, #4]
 80049ac:	4022      	ands	r2, r4
 80049ae:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80049b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049ba:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049c2:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80049ca:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	f022 020f 	bic.w	r2, r2, #15
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 &= 0xFF00FCCCU;
 80049d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80049d6:	2400      	movs	r4, #0
  RCC->CFGR3 &= 0xFF00FCCCU;
 80049d8:	4010      	ands	r0, r2

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CFGR3 &= 0xFF00FCCCU;
 80049de:	6318      	str	r0, [r3, #48]	; 0x30
  RCC->CIR = 0x00000000U;
 80049e0:	609c      	str	r4, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049e2:	608a      	str	r2, [r1, #8]
#endif
}
 80049e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000ed00 	.word	0xe000ed00
 80049f0:	40021000 	.word	0x40021000
 80049f4:	f87fc00c 	.word	0xf87fc00c
 80049f8:	ff00fccc 	.word	0xff00fccc

080049fc <String2IntU8.part.0>:
	if (*input_string == '-')
	{
		return 0;
	}

	while ((*input_string >= '0') && (*input_string <= '9'))
 80049fc:	7802      	ldrb	r2, [r0, #0]
 80049fe:	3a30      	subs	r2, #48	; 0x30
 8004a00:	b2d3      	uxtb	r3, r2
 8004a02:	2b09      	cmp	r3, #9
 8004a04:	d815      	bhi.n	8004a32 <String2IntU8.part.0+0x36>
uint8_t String2IntU8(char* input_string, uint8_t* output_integer)
 8004a06:	b430      	push	{r4, r5}
 8004a08:	e003      	b.n	8004a12 <String2IntU8.part.0+0x16>
	{
		retval *= 10;
		retval += (*input_string - 48);
 8004a0a:	eb03 0245 	add.w	r2, r3, r5, lsl #1

		if (retval >= 256)
 8004a0e:	2aff      	cmp	r2, #255	; 0xff
 8004a10:	dc0c      	bgt.n	8004a2c <String2IntU8.part.0+0x30>
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004a12:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004a16:	3b30      	subs	r3, #48	; 0x30
 8004a18:	b2dc      	uxtb	r4, r3
 8004a1a:	2c09      	cmp	r4, #9
		retval *= 10;
 8004a1c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004a20:	d9f3      	bls.n	8004a0a <String2IntU8.part.0+0xe>
 8004a22:	b2d2      	uxtb	r2, r2
			return 0;

		input_string++;
	}
	*output_integer = (uint8_t)retval;
	return 1;
 8004a24:	2001      	movs	r0, #1
	*output_integer = (uint8_t)retval;
 8004a26:	700a      	strb	r2, [r1, #0]
}
 8004a28:	bc30      	pop	{r4, r5}
 8004a2a:	4770      	bx	lr
			return 0;
 8004a2c:	2000      	movs	r0, #0
}
 8004a2e:	bc30      	pop	{r4, r5}
 8004a30:	4770      	bx	lr
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004a32:	2200      	movs	r2, #0
	*output_integer = (uint8_t)retval;
 8004a34:	700a      	strb	r2, [r1, #0]
	return 1;
 8004a36:	2001      	movs	r0, #1
}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop

08004a3c <Int2String.part.1>:

// convert integer var to ASCII string
uint8_t Int2String(char* output_string, int32_t val, uint8_t maxlen)
 8004a3c:	b4f0      	push	{r4, r5, r6, r7}
	if (maxlen == 0)
		return 0;

	int numwritten = 0;

	if (val < 0)
 8004a3e:	1e0c      	subs	r4, r1, #0
 8004a40:	db37      	blt.n	8004ab2 <Int2String.part.1+0x76>
	int numwritten = 0;
 8004a42:	2600      	movs	r6, #0
		val = -val;
		numwritten = 1;
	}

	uint8_t digits = 0;
	if (val < 10)
 8004a44:	2c09      	cmp	r4, #9
 8004a46:	dd07      	ble.n	8004a58 <Int2String.part.1+0x1c>
		digits = 1;
	else if (val < 100)
 8004a48:	2c63      	cmp	r4, #99	; 0x63
 8004a4a:	dc1c      	bgt.n	8004a86 <Int2String.part.1+0x4a>
		digits = 2;
 8004a4c:	2702      	movs	r7, #2
	else if (val < 100000000)
		digits = 8;
	else
		digits = 9;

	if (digits > maxlen)
 8004a4e:	42ba      	cmp	r2, r7
 8004a50:	d205      	bcs.n	8004a5e <Int2String.part.1+0x22>
		return 0; // error - not enough space in output string!
 8004a52:	2000      	movs	r0, #0
		writepos--;
		numwritten++;
	}

	return numwritten;
}
 8004a54:	bcf0      	pop	{r4, r5, r6, r7}
 8004a56:	4770      	bx	lr
		digits = 1;
 8004a58:	2701      	movs	r7, #1
	if (digits > maxlen)
 8004a5a:	42ba      	cmp	r2, r7
 8004a5c:	d3f9      	bcc.n	8004a52 <Int2String.part.1+0x16>
		output_string[writepos-1] = (char) ((val % 10) + 48);
 8004a5e:	4d1e      	ldr	r5, [pc, #120]	; (8004ad8 <Int2String.part.1+0x9c>)
 8004a60:	19c2      	adds	r2, r0, r7
 8004a62:	fb85 3104 	smull	r3, r1, r5, r4
 8004a66:	17e3      	asrs	r3, r4, #31
 8004a68:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8004a6c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004a70:	eba4 0141 	sub.w	r1, r4, r1, lsl #1
 8004a74:	3130      	adds	r1, #48	; 0x30
 8004a76:	f802 1d01 	strb.w	r1, [r2, #-1]!
	while (writepos > 0)
 8004a7a:	4282      	cmp	r2, r0
		val /= 10;
 8004a7c:	461c      	mov	r4, r3
	while (writepos > 0)
 8004a7e:	d1f0      	bne.n	8004a62 <Int2String.part.1+0x26>
	return numwritten;
 8004a80:	19f0      	adds	r0, r6, r7
}
 8004a82:	bcf0      	pop	{r4, r5, r6, r7}
 8004a84:	4770      	bx	lr
	else if (val < 1000)
 8004a86:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8004a8a:	db1a      	blt.n	8004ac2 <Int2String.part.1+0x86>
	else if (val < 10000)
 8004a8c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a90:	429c      	cmp	r4, r3
 8004a92:	dd18      	ble.n	8004ac6 <Int2String.part.1+0x8a>
	else if (val < 100000)
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <Int2String.part.1+0xa0>)
 8004a96:	429c      	cmp	r4, r3
 8004a98:	dd17      	ble.n	8004aca <Int2String.part.1+0x8e>
	else if (val < 1000000)
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <Int2String.part.1+0xa4>)
 8004a9c:	429c      	cmp	r4, r3
 8004a9e:	dd16      	ble.n	8004ace <Int2String.part.1+0x92>
	else if (val < 10000000)
 8004aa0:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <Int2String.part.1+0xa8>)
 8004aa2:	429c      	cmp	r4, r3
 8004aa4:	dd15      	ble.n	8004ad2 <Int2String.part.1+0x96>
	else if (val < 100000000)
 8004aa6:	4f10      	ldr	r7, [pc, #64]	; (8004ae8 <Int2String.part.1+0xac>)
		digits = 9;
 8004aa8:	42bc      	cmp	r4, r7
 8004aaa:	bfd4      	ite	le
 8004aac:	2708      	movle	r7, #8
 8004aae:	2709      	movgt	r7, #9
 8004ab0:	e7d3      	b.n	8004a5a <Int2String.part.1+0x1e>
		maxlen--;
 8004ab2:	3a01      	subs	r2, #1
		output_string[0] = '-';
 8004ab4:	232d      	movs	r3, #45	; 0x2d
		maxlen--;
 8004ab6:	b2d2      	uxtb	r2, r2
		val = -val;
 8004ab8:	4264      	negs	r4, r4
		output_string[0] = '-';
 8004aba:	f800 3b01 	strb.w	r3, [r0], #1
		numwritten = 1;
 8004abe:	2601      	movs	r6, #1
 8004ac0:	e7c0      	b.n	8004a44 <Int2String.part.1+0x8>
		digits = 3;
 8004ac2:	2703      	movs	r7, #3
 8004ac4:	e7c9      	b.n	8004a5a <Int2String.part.1+0x1e>
		digits = 4;
 8004ac6:	2704      	movs	r7, #4
 8004ac8:	e7c7      	b.n	8004a5a <Int2String.part.1+0x1e>
		digits = 5;
 8004aca:	2705      	movs	r7, #5
 8004acc:	e7c5      	b.n	8004a5a <Int2String.part.1+0x1e>
		digits = 6;
 8004ace:	2706      	movs	r7, #6
 8004ad0:	e7c3      	b.n	8004a5a <Int2String.part.1+0x1e>
		digits = 7;
 8004ad2:	2707      	movs	r7, #7
 8004ad4:	e7c1      	b.n	8004a5a <Int2String.part.1+0x1e>
 8004ad6:	bf00      	nop
 8004ad8:	66666667 	.word	0x66666667
 8004adc:	0001869f 	.word	0x0001869f
 8004ae0:	000f423f 	.word	0x000f423f
 8004ae4:	0098967f 	.word	0x0098967f
 8004ae8:	05f5e0ff 	.word	0x05f5e0ff

08004aec <uartInit>:
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxchar, 1);
 8004aec:	2201      	movs	r2, #1
 8004aee:	4902      	ldr	r1, [pc, #8]	; (8004af8 <uartInit+0xc>)
 8004af0:	4802      	ldr	r0, [pc, #8]	; (8004afc <uartInit+0x10>)
 8004af2:	f7fe bc37 	b.w	8003364 <HAL_UART_Receive_IT>
 8004af6:	bf00      	nop
 8004af8:	2000036b 	.word	0x2000036b
 8004afc:	200001a4 	.word	0x200001a4

08004b00 <String2Int>:
	if (*input_string == '\0')
 8004b00:	7802      	ldrb	r2, [r0, #0]
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	d034      	beq.n	8004b70 <String2Int+0x70>
{
 8004b06:	b430      	push	{r4, r5}
	if (*input_string == '-')
 8004b08:	2a2d      	cmp	r2, #45	; 0x2d
 8004b0a:	bf08      	it	eq
 8004b0c:	7842      	ldrbeq	r2, [r0, #1]
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004b0e:	f1a2 0230 	sub.w	r2, r2, #48	; 0x30
 8004b12:	b2d3      	uxtb	r3, r2
		sign = -1;
 8004b14:	bf06      	itte	eq
 8004b16:	f04f 35ff 	moveq.w	r5, #4294967295
		input_string++;
 8004b1a:	3001      	addeq	r0, #1
	int sign = 1;
 8004b1c:	2501      	movne	r5, #1
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	d908      	bls.n	8004b38 <String2Int+0x38>
 8004b26:	e01f      	b.n	8004b68 <String2Int+0x68>
		if (((sign == 1) && (retval >= 32768)) ||
 8004b28:	1c6a      	adds	r2, r5, #1
 8004b2a:	d011      	beq.n	8004b50 <String2Int+0x50>
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004b2c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004b30:	3a30      	subs	r2, #48	; 0x30
 8004b32:	b2d4      	uxtb	r4, r2
 8004b34:	2c09      	cmp	r4, #9
 8004b36:	d814      	bhi.n	8004b62 <String2Int+0x62>
		retval *= 10;
 8004b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if (((sign == 1) && (retval >= 32768)) ||
 8004b3c:	2d01      	cmp	r5, #1
		retval += (*input_string - 48);
 8004b3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
		if (((sign == 1) && (retval >= 32768)) ||
 8004b42:	d1f1      	bne.n	8004b28 <String2Int+0x28>
 8004b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b48:	dbf0      	blt.n	8004b2c <String2Int+0x2c>
		return 0;
 8004b4a:	2000      	movs	r0, #0
}
 8004b4c:	bc30      	pop	{r4, r5}
 8004b4e:	4770      	bx	lr
				((sign == -1) && (retval >= 32769)))
 8004b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b54:	dcf9      	bgt.n	8004b4a <String2Int+0x4a>
	while ((*input_string >= '0') && (*input_string <= '9'))
 8004b56:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004b5a:	3a30      	subs	r2, #48	; 0x30
 8004b5c:	b2d4      	uxtb	r4, r2
 8004b5e:	2c09      	cmp	r4, #9
 8004b60:	d9ea      	bls.n	8004b38 <String2Int+0x38>
 8004b62:	fb13 f305 	smulbb	r3, r3, r5
 8004b66:	b21b      	sxth	r3, r3
	return 1;
 8004b68:	2001      	movs	r0, #1
	*output_integer = (int16_t)(sign * retval);
 8004b6a:	800b      	strh	r3, [r1, #0]
}
 8004b6c:	bc30      	pop	{r4, r5}
 8004b6e:	4770      	bx	lr
		return 0;
 8004b70:	4610      	mov	r0, r2
 8004b72:	4770      	bx	lr

08004b74 <DecodeCommand>:
{
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(cmdbuffer[0] != '$')
 8004b78:	4caa      	ldr	r4, [pc, #680]	; (8004e24 <DecodeCommand+0x2b0>)
 8004b7a:	7823      	ldrb	r3, [r4, #0]
 8004b7c:	2b24      	cmp	r3, #36	; 0x24
 8004b7e:	d110      	bne.n	8004ba2 <DecodeCommand+0x2e>
		switch (cmdbuffer[1])
 8004b80:	7863      	ldrb	r3, [r4, #1]
 8004b82:	3b41      	subs	r3, #65	; 0x41
 8004b84:	2b0a      	cmp	r3, #10
 8004b86:	d815      	bhi.n	8004bb4 <DecodeCommand+0x40>
 8004b88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b8c:	02350242 	.word	0x02350242
 8004b90:	0225022d 	.word	0x0225022d
 8004b94:	01f201fd 	.word	0x01f201fd
 8004b98:	01ab0208 	.word	0x01ab0208
 8004b9c:	00980178 	.word	0x00980178
 8004ba0:	0016      	.short	0x0016
		HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid command: Missing $\r\n", 28, 1000);
 8004ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ba6:	221c      	movs	r2, #28
 8004ba8:	499f      	ldr	r1, [pc, #636]	; (8004e28 <DecodeCommand+0x2b4>)
 8004baa:	48a0      	ldr	r0, [pc, #640]	; (8004e2c <DecodeCommand+0x2b8>)
}
 8004bac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*)"Invalid command: Missing $\r\n", 28, 1000);
 8004bb0:	f7fe bd94 	b.w	80036dc <HAL_UART_Transmit>
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				txbuffer[0] = '$'; txbuffer[1] = 'K'; txbuffer[2] = ',';
 8004bb8:	4c9d      	ldr	r4, [pc, #628]	; (8004e30 <DecodeCommand+0x2bc>)
				numcharswritten = Int2String(&txbuffer[totalCharsWritten], currentRMS, 5);
 8004bba:	499e      	ldr	r1, [pc, #632]	; (8004e34 <DecodeCommand+0x2c0>)
				txbuffer[0] = '$'; txbuffer[1] = 'K'; txbuffer[2] = ',';
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	262c      	movs	r6, #44	; 0x2c
 8004bc0:	234b      	movs	r3, #75	; 0x4b
 8004bc2:	6809      	ldr	r1, [r1, #0]
 8004bc4:	7022      	strb	r2, [r4, #0]
 8004bc6:	1ce0      	adds	r0, r4, #3
 8004bc8:	2205      	movs	r2, #5
 8004bca:	7063      	strb	r3, [r4, #1]
 8004bcc:	70a6      	strb	r6, [r4, #2]
 8004bce:	f7ff ff35 	bl	8004a3c <Int2String.part.1>
				numcharswritten = Int2String(&txbuffer[totalCharsWritten], voltageRMS, 6);
 8004bd2:	4a99      	ldr	r2, [pc, #612]	; (8004e38 <DecodeCommand+0x2c4>)
				totalCharsWritten += numcharswritten;
 8004bd4:	1cc3      	adds	r3, r0, #3
				txbuffer[totalCharsWritten++] = ',';
 8004bd6:	3004      	adds	r0, #4
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	b2c5      	uxtb	r5, r0
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	54e6      	strb	r6, [r4, r3]
 8004be0:	1960      	adds	r0, r4, r5
 8004be2:	2206      	movs	r2, #6
 8004be4:	f7ff ff2a 	bl	8004a3c <Int2String.part.1>
				totalCharsWritten += numcharswritten;
 8004be8:	4428      	add	r0, r5
 8004bea:	b2c0      	uxtb	r0, r0
				numcharswritten = Int2String(&txbuffer[totalCharsWritten], ambientTemp, 3);
 8004bec:	4b93      	ldr	r3, [pc, #588]	; (8004e3c <DecodeCommand+0x2c8>)
				txbuffer[totalCharsWritten++] = ',';
 8004bee:	5426      	strb	r6, [r4, r0]
 8004bf0:	1c45      	adds	r5, r0, #1
 8004bf2:	b2ed      	uxtb	r5, r5
 8004bf4:	8819      	ldrh	r1, [r3, #0]
 8004bf6:	1960      	adds	r0, r4, r5
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	f7ff ff1f 	bl	8004a3c <Int2String.part.1>
				totalCharsWritten += numcharswritten;
 8004bfe:	4428      	add	r0, r5
 8004c00:	b2c0      	uxtb	r0, r0
				numcharswritten = Int2String(&txbuffer[totalCharsWritten], heaterTemp, 3);
 8004c02:	4b8f      	ldr	r3, [pc, #572]	; (8004e40 <DecodeCommand+0x2cc>)
				txbuffer[totalCharsWritten++] = ',';
 8004c04:	5426      	strb	r6, [r4, r0]
 8004c06:	1c45      	adds	r5, r0, #1
 8004c08:	b2ed      	uxtb	r5, r5
 8004c0a:	8819      	ldrh	r1, [r3, #0]
 8004c0c:	1960      	adds	r0, r4, r5
 8004c0e:	2203      	movs	r2, #3
 8004c10:	f7ff ff14 	bl	8004a3c <Int2String.part.1>
				totalCharsWritten += numcharswritten;
 8004c14:	4428      	add	r0, r5
 8004c16:	b2c0      	uxtb	r0, r0
				numcharswritten = Int2String(&txbuffer[totalCharsWritten], flowCount, 9);
 8004c18:	4b8a      	ldr	r3, [pc, #552]	; (8004e44 <DecodeCommand+0x2d0>)
				txbuffer[totalCharsWritten++] = ',';
 8004c1a:	5426      	strb	r6, [r4, r0]
 8004c1c:	1c45      	adds	r5, r0, #1
 8004c1e:	b2ed      	uxtb	r5, r5
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	2209      	movs	r2, #9
 8004c24:	1960      	adds	r0, r4, r5
 8004c26:	f7ff ff09 	bl	8004a3c <Int2String.part.1>
				if(heaterState == 0)
 8004c2a:	4b87      	ldr	r3, [pc, #540]	; (8004e48 <DecodeCommand+0x2d4>)
				totalCharsWritten += numcharswritten;
 8004c2c:	4428      	add	r0, r5
 8004c2e:	b2c0      	uxtb	r0, r0
				if(heaterState == 0)
 8004c30:	f9b3 3000 	ldrsh.w	r3, [r3]
				txbuffer[totalCharsWritten++] = ',';
 8004c34:	5426      	strb	r6, [r4, r0]
 8004c36:	1c42      	adds	r2, r0, #1
 8004c38:	b2d2      	uxtb	r2, r2
				if(heaterState == 0)
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f040 8203 	bne.w	8005046 <DecodeCommand+0x4d2>
					txbuffer[totalCharsWritten++] = 'O'; txbuffer[totalCharsWritten++] = 'F'; txbuffer[totalCharsWritten++] = 'F'; txbuffer[totalCharsWritten++] = ',';
 8004c40:	1c87      	adds	r7, r0, #2
 8004c42:	1cc5      	adds	r5, r0, #3
 8004c44:	1d01      	adds	r1, r0, #4
 8004c46:	b2ff      	uxtb	r7, r7
 8004c48:	b2ed      	uxtb	r5, r5
 8004c4a:	b2c9      	uxtb	r1, r1
 8004c4c:	f04f 0e4f 	mov.w	lr, #79	; 0x4f
 8004c50:	f804 e002 	strb.w	lr, [r4, r2]
 8004c54:	2246      	movs	r2, #70	; 0x46
 8004c56:	55e2      	strb	r2, [r4, r7]
 8004c58:	1d43      	adds	r3, r0, #5
 8004c5a:	5562      	strb	r2, [r4, r5]
 8004c5c:	5466      	strb	r6, [r4, r1]
 8004c5e:	b2db      	uxtb	r3, r3
				if(valveState == 0)
 8004c60:	4a7a      	ldr	r2, [pc, #488]	; (8004e4c <DecodeCommand+0x2d8>)
 8004c62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004c66:	2a00      	cmp	r2, #0
 8004c68:	f040 81dc 	bne.w	8005024 <DecodeCommand+0x4b0>
					txbuffer[totalCharsWritten++] = 'C'; txbuffer[totalCharsWritten++] = 'L'; txbuffer[totalCharsWritten++] = 'O'; txbuffer[totalCharsWritten++] = 'S'; txbuffer[totalCharsWritten++] = 'E'; txbuffer[totalCharsWritten++] = 'D';
 8004c6c:	1c5e      	adds	r6, r3, #1
 8004c6e:	1c9d      	adds	r5, r3, #2
 8004c70:	b2f6      	uxtb	r6, r6
 8004c72:	2743      	movs	r7, #67	; 0x43
 8004c74:	54e7      	strb	r7, [r4, r3]
 8004c76:	1cd8      	adds	r0, r3, #3
 8004c78:	1d19      	adds	r1, r3, #4
 8004c7a:	1d5a      	adds	r2, r3, #5
 8004c7c:	b2ed      	uxtb	r5, r5
 8004c7e:	274c      	movs	r7, #76	; 0x4c
 8004c80:	55a7      	strb	r7, [r4, r6]
 8004c82:	b2c0      	uxtb	r0, r0
 8004c84:	264f      	movs	r6, #79	; 0x4f
 8004c86:	b2c9      	uxtb	r1, r1
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	5566      	strb	r6, [r4, r5]
 8004c8c:	2753      	movs	r7, #83	; 0x53
 8004c8e:	2645      	movs	r6, #69	; 0x45
 8004c90:	2544      	movs	r5, #68	; 0x44
 8004c92:	5427      	strb	r7, [r4, r0]
 8004c94:	3306      	adds	r3, #6
 8004c96:	5466      	strb	r6, [r4, r1]
 8004c98:	54a5      	strb	r5, [r4, r2]
 8004c9a:	b2d8      	uxtb	r0, r3
				txbuffer[totalCharsWritten++] = '\r'; txbuffer[totalCharsWritten++] = '\n';
 8004c9c:	1c45      	adds	r5, r0, #1
 8004c9e:	b2ed      	uxtb	r5, r5
 8004ca0:	270d      	movs	r7, #13
 8004ca2:	260a      	movs	r6, #10
 8004ca4:	5427      	strb	r7, [r4, r0]
 8004ca6:	5566      	strb	r6, [r4, r5]
 8004ca8:	1c82      	adds	r2, r0, #2
				HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, totalCharsWritten, 1000);
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cb0:	495f      	ldr	r1, [pc, #380]	; (8004e30 <DecodeCommand+0x2bc>)
 8004cb2:	485e      	ldr	r0, [pc, #376]	; (8004e2c <DecodeCommand+0x2b8>)
}
 8004cb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, totalCharsWritten, 1000);
 8004cb8:	f7fe bd10 	b.w	80036dc <HAL_UART_Transmit>
			decrement = 0;
 8004cbc:	4d64      	ldr	r5, [pc, #400]	; (8004e50 <DecodeCommand+0x2dc>)
	if (*input_string == '\0')
 8004cbe:	78e3      	ldrb	r3, [r4, #3]
			decrement = 0;
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	702a      	strb	r2, [r5, #0]
	if (*input_string == '\0')
 8004cc4:	b12b      	cbz	r3, 8004cd2 <DecodeCommand+0x15e>
	if (*input_string == '-')
 8004cc6:	2b2d      	cmp	r3, #45	; 0x2d
 8004cc8:	d003      	beq.n	8004cd2 <DecodeCommand+0x15e>
 8004cca:	4962      	ldr	r1, [pc, #392]	; (8004e54 <DecodeCommand+0x2e0>)
 8004ccc:	4862      	ldr	r0, [pc, #392]	; (8004e58 <DecodeCommand+0x2e4>)
 8004cce:	f7ff fe95 	bl	80049fc <String2IntU8.part.0>
	if (*input_string == '\0')
 8004cd2:	7963      	ldrb	r3, [r4, #5]
 8004cd4:	b12b      	cbz	r3, 8004ce2 <DecodeCommand+0x16e>
	if (*input_string == '-')
 8004cd6:	2b2d      	cmp	r3, #45	; 0x2d
 8004cd8:	d003      	beq.n	8004ce2 <DecodeCommand+0x16e>
 8004cda:	4960      	ldr	r1, [pc, #384]	; (8004e5c <DecodeCommand+0x2e8>)
 8004cdc:	4860      	ldr	r0, [pc, #384]	; (8004e60 <DecodeCommand+0x2ec>)
 8004cde:	f7ff fe8d 	bl	80049fc <String2IntU8.part.0>
			if(HH1 < 10) decrement++;
 8004ce2:	4e5e      	ldr	r6, [pc, #376]	; (8004e5c <DecodeCommand+0x2e8>)
 8004ce4:	7833      	ldrb	r3, [r6, #0]
 8004ce6:	2b09      	cmp	r3, #9
 8004ce8:	782b      	ldrb	r3, [r5, #0]
 8004cea:	d802      	bhi.n	8004cf2 <DecodeCommand+0x17e>
 8004cec:	3301      	adds	r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(8-decrement), &MM1); //mm
 8004cf2:	f1c3 0208 	rsb	r2, r3, #8
 8004cf6:	18a0      	adds	r0, r4, r2
	if (*input_string == '\0')
 8004cf8:	5ca2      	ldrb	r2, [r4, r2]
 8004cfa:	b12a      	cbz	r2, 8004d08 <DecodeCommand+0x194>
	if (*input_string == '-')
 8004cfc:	2a2d      	cmp	r2, #45	; 0x2d
 8004cfe:	d003      	beq.n	8004d08 <DecodeCommand+0x194>
 8004d00:	4958      	ldr	r1, [pc, #352]	; (8004e64 <DecodeCommand+0x2f0>)
 8004d02:	f7ff fe7b 	bl	80049fc <String2IntU8.part.0>
 8004d06:	782b      	ldrb	r3, [r5, #0]
			if(MM1 < 10) decrement++;
 8004d08:	4f56      	ldr	r7, [pc, #344]	; (8004e64 <DecodeCommand+0x2f0>)
 8004d0a:	783a      	ldrb	r2, [r7, #0]
 8004d0c:	2a09      	cmp	r2, #9
 8004d0e:	d802      	bhi.n	8004d16 <DecodeCommand+0x1a2>
 8004d10:	3301      	adds	r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(11-decrement), &SS1); //ss
 8004d16:	f1c3 020b 	rsb	r2, r3, #11
 8004d1a:	18a0      	adds	r0, r4, r2
	if (*input_string == '\0')
 8004d1c:	5ca2      	ldrb	r2, [r4, r2]
 8004d1e:	b12a      	cbz	r2, 8004d2c <DecodeCommand+0x1b8>
	if (*input_string == '-')
 8004d20:	2a2d      	cmp	r2, #45	; 0x2d
 8004d22:	d003      	beq.n	8004d2c <DecodeCommand+0x1b8>
 8004d24:	4950      	ldr	r1, [pc, #320]	; (8004e68 <DecodeCommand+0x2f4>)
 8004d26:	f7ff fe69 	bl	80049fc <String2IntU8.part.0>
 8004d2a:	782b      	ldrb	r3, [r5, #0]
			if(SS1 < 10) decrement++;
 8004d2c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8004e68 <DecodeCommand+0x2f4>
 8004d30:	f898 2000 	ldrb.w	r2, [r8]
 8004d34:	2a09      	cmp	r2, #9
 8004d36:	d802      	bhi.n	8004d3e <DecodeCommand+0x1ca>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(14-decrement), &HH2); //HH
 8004d3e:	f1c3 020e 	rsb	r2, r3, #14
 8004d42:	18a0      	adds	r0, r4, r2
	if (*input_string == '\0')
 8004d44:	5ca2      	ldrb	r2, [r4, r2]
 8004d46:	b12a      	cbz	r2, 8004d54 <DecodeCommand+0x1e0>
	if (*input_string == '-')
 8004d48:	2a2d      	cmp	r2, #45	; 0x2d
 8004d4a:	d003      	beq.n	8004d54 <DecodeCommand+0x1e0>
 8004d4c:	4947      	ldr	r1, [pc, #284]	; (8004e6c <DecodeCommand+0x2f8>)
 8004d4e:	f7ff fe55 	bl	80049fc <String2IntU8.part.0>
 8004d52:	782b      	ldrb	r3, [r5, #0]
			if(HH2 < 10) decrement++;
 8004d54:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8004e6c <DecodeCommand+0x2f8>
 8004d58:	f899 2000 	ldrb.w	r2, [r9]
 8004d5c:	2a09      	cmp	r2, #9
 8004d5e:	d802      	bhi.n	8004d66 <DecodeCommand+0x1f2>
 8004d60:	3301      	adds	r3, #1
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(17-decrement), &MM2); //MM
 8004d66:	f1c3 0211 	rsb	r2, r3, #17
 8004d6a:	18a0      	adds	r0, r4, r2
	if (*input_string == '\0')
 8004d6c:	5ca2      	ldrb	r2, [r4, r2]
 8004d6e:	b12a      	cbz	r2, 8004d7c <DecodeCommand+0x208>
	if (*input_string == '-')
 8004d70:	2a2d      	cmp	r2, #45	; 0x2d
 8004d72:	d003      	beq.n	8004d7c <DecodeCommand+0x208>
 8004d74:	493e      	ldr	r1, [pc, #248]	; (8004e70 <DecodeCommand+0x2fc>)
 8004d76:	f7ff fe41 	bl	80049fc <String2IntU8.part.0>
 8004d7a:	782b      	ldrb	r3, [r5, #0]
			if(MM2 < 10) decrement++;
 8004d7c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8004e70 <DecodeCommand+0x2fc>
 8004d80:	f89a 2000 	ldrb.w	r2, [sl]
 8004d84:	2a09      	cmp	r2, #9
 8004d86:	d802      	bhi.n	8004d8e <DecodeCommand+0x21a>
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(20-decrement), &SS2); //ss
 8004d8e:	f1c3 0314 	rsb	r3, r3, #20
 8004d92:	18e0      	adds	r0, r4, r3
	if (*input_string == '\0')
 8004d94:	5ce3      	ldrb	r3, [r4, r3]
 8004d96:	b123      	cbz	r3, 8004da2 <DecodeCommand+0x22e>
	if (*input_string == '-')
 8004d98:	2b2d      	cmp	r3, #45	; 0x2d
 8004d9a:	d002      	beq.n	8004da2 <DecodeCommand+0x22e>
 8004d9c:	4935      	ldr	r1, [pc, #212]	; (8004e74 <DecodeCommand+0x300>)
 8004d9e:	f7ff fe2d 	bl	80049fc <String2IntU8.part.0>
			switch (window)
 8004da2:	4b2c      	ldr	r3, [pc, #176]	; (8004e54 <DecodeCommand+0x2e0>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	f000 8182 	beq.w	80050b0 <DecodeCommand+0x53c>
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	f000 8156 	beq.w	800505e <DecodeCommand+0x4ea>
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d123      	bne.n	8004dfe <DecodeCommand+0x28a>
				heatingSchedule[0].Minutes = MM1;
 8004db6:	f897 c000 	ldrb.w	ip, [r7]
				heatingSchedule[1].Minutes = MM2;
 8004dba:	f89a 0000 	ldrb.w	r0, [sl]
				heatingSchedule[1].Seconds = SS2;
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <DecodeCommand+0x300>)
				heatingSchedule[0].Hours = HH1;
 8004dc0:	7836      	ldrb	r6, [r6, #0]
				heatingSchedule[1].Hours = HH2;
 8004dc2:	f899 7000 	ldrb.w	r7, [r9]
				heatingSchedule[1].Seconds = SS2;
 8004dc6:	781d      	ldrb	r5, [r3, #0]
				heatingSchedule[0].Seconds = SS1;
 8004dc8:	f898 e000 	ldrb.w	lr, [r8]
				heatingSchedule[0].Hours = HH1;
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <DecodeCommand+0x304>)
				heatingSchedule[1].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8004dce:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
				heatingSchedule[0].Total = (HH1*60*60) + (MM1*60) + (SS1);
 8004dd2:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
				heatingSchedule[1].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8004dd6:	008c      	lsls	r4, r1, #2
				heatingSchedule[0].Total = (HH1*60*60) + (MM1*60) + (SS1);
 8004dd8:	0092      	lsls	r2, r2, #2
 8004dda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004dde:	fb01 2206 	mla	r2, r1, r6, r2
				heatingSchedule[1].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8004de2:	fb01 4107 	mla	r1, r1, r7, r4
				heatingSchedule[0].Total = (HH1*60*60) + (MM1*60) + (SS1);
 8004de6:	4472      	add	r2, lr
				heatingSchedule[1].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8004de8:	4429      	add	r1, r5
				heatingSchedule[0].Minutes = MM1;
 8004dea:	f883 c001 	strb.w	ip, [r3, #1]
				heatingSchedule[0].Hours = HH1;
 8004dee:	701e      	strb	r6, [r3, #0]
				heatingSchedule[0].Seconds = SS1;
 8004df0:	f883 e002 	strb.w	lr, [r3, #2]
				heatingSchedule[1].Hours = HH2;
 8004df4:	721f      	strb	r7, [r3, #8]
				heatingSchedule[1].Minutes = MM2;
 8004df6:	7258      	strb	r0, [r3, #9]
				heatingSchedule[0].Total = (HH1*60*60) + (MM1*60) + (SS1);
 8004df8:	605a      	str	r2, [r3, #4]
				heatingSchedule[1].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8004dfa:	60d9      	str	r1, [r3, #12]
				heatingSchedule[1].Seconds = SS2;
 8004dfc:	729d      	strb	r5, [r3, #10]
			txbuffer[0] = '$'; txbuffer[1] = 'J'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004dfe:	4c0c      	ldr	r4, [pc, #48]	; (8004e30 <DecodeCommand+0x2bc>)
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004e00:	480a      	ldr	r0, [pc, #40]	; (8004e2c <DecodeCommand+0x2b8>)
			txbuffer[0] = '$'; txbuffer[1] = 'J'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004e02:	2224      	movs	r2, #36	; 0x24
 8004e04:	274a      	movs	r7, #74	; 0x4a
 8004e06:	260d      	movs	r6, #13
 8004e08:	250a      	movs	r5, #10
			txbuffer[0] = '$'; txbuffer[1] = 'C'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004e0a:	7022      	strb	r2, [r4, #0]
 8004e0c:	7067      	strb	r7, [r4, #1]
 8004e0e:	70a6      	strb	r6, [r4, #2]
 8004e10:	70e5      	strb	r5, [r4, #3]
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004e12:	4621      	mov	r1, r4
 8004e14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e18:	2204      	movs	r2, #4
}
 8004e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004e1e:	f7fe bc5d 	b.w	80036dc <HAL_UART_Transmit>
 8004e22:	bf00      	nop
 8004e24:	200002e8 	.word	0x200002e8
 8004e28:	080063a4 	.word	0x080063a4
 8004e2c:	200001a4 	.word	0x200001a4
 8004e30:	20000334 	.word	0x20000334
 8004e34:	200000a8 	.word	0x200000a8
 8004e38:	200000c4 	.word	0x200000c4
 8004e3c:	200000a6 	.word	0x200000a6
 8004e40:	200000ac 	.word	0x200000ac
 8004e44:	2000009c 	.word	0x2000009c
 8004e48:	20000258 	.word	0x20000258
 8004e4c:	20000290 	.word	0x20000290
 8004e50:	200003a0 	.word	0x200003a0
 8004e54:	2000036d 	.word	0x2000036d
 8004e58:	200002eb 	.word	0x200002eb
 8004e5c:	2000036a 	.word	0x2000036a
 8004e60:	200002ed 	.word	0x200002ed
 8004e64:	200002e4 	.word	0x200002e4
 8004e68:	200002e5 	.word	0x200002e5
 8004e6c:	20000366 	.word	0x20000366
 8004e70:	20000330 	.word	0x20000330
 8004e74:	2000036c 	.word	0x2000036c
 8004e78:	20000370 	.word	0x20000370
			txbuffer[0] = '$'; txbuffer[1] = 'I'; txbuffer[2] = ',';
 8004e7c:	4da0      	ldr	r5, [pc, #640]	; (8005100 <DecodeCommand+0x58c>)
			numcharswritten = Int2String(&txbuffer[totalCharsWritten], rtcTime.Hours, 2);
 8004e7e:	4fa1      	ldr	r7, [pc, #644]	; (8005104 <DecodeCommand+0x590>)
			txbuffer[0] = '$'; txbuffer[1] = 'I'; txbuffer[2] = ',';
 8004e80:	2224      	movs	r2, #36	; 0x24
 8004e82:	262c      	movs	r6, #44	; 0x2c
 8004e84:	2349      	movs	r3, #73	; 0x49
 8004e86:	7839      	ldrb	r1, [r7, #0]
 8004e88:	702a      	strb	r2, [r5, #0]
 8004e8a:	1ce8      	adds	r0, r5, #3
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	706b      	strb	r3, [r5, #1]
 8004e90:	70ae      	strb	r6, [r5, #2]
 8004e92:	f7ff fdd3 	bl	8004a3c <Int2String.part.1>
			totalCharsWritten += numcharswritten;
 8004e96:	1cc3      	adds	r3, r0, #3
			txbuffer[totalCharsWritten++] = ',';
 8004e98:	3004      	adds	r0, #4
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	b2c4      	uxtb	r4, r0
 8004e9e:	1928      	adds	r0, r5, r4
 8004ea0:	7879      	ldrb	r1, [r7, #1]
 8004ea2:	54ee      	strb	r6, [r5, r3]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f7ff fdc9 	bl	8004a3c <Int2String.part.1>
			totalCharsWritten += numcharswritten;
 8004eaa:	4420      	add	r0, r4
 8004eac:	b2c0      	uxtb	r0, r0
			txbuffer[totalCharsWritten++] = ',';
 8004eae:	1c44      	adds	r4, r0, #1
 8004eb0:	b2e4      	uxtb	r4, r4
 8004eb2:	542e      	strb	r6, [r5, r0]
 8004eb4:	78b9      	ldrb	r1, [r7, #2]
 8004eb6:	1928      	adds	r0, r5, r4
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f7ff fdbf 	bl	8004a3c <Int2String.part.1>
			totalCharsWritten += numcharswritten;
 8004ebe:	4420      	add	r0, r4
 8004ec0:	b2c0      	uxtb	r0, r0
			txbuffer[totalCharsWritten++] = '\r'; txbuffer[totalCharsWritten++] = '\n';
 8004ec2:	1c44      	adds	r4, r0, #1
 8004ec4:	b2e4      	uxtb	r4, r4
 8004ec6:	270d      	movs	r7, #13
 8004ec8:	260a      	movs	r6, #10
 8004eca:	542f      	strb	r7, [r5, r0]
 8004ecc:	552e      	strb	r6, [r5, r4]
 8004ece:	1c82      	adds	r2, r0, #2
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, totalCharsWritten, 1000);
 8004ed0:	4629      	mov	r1, r5
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed8:	488b      	ldr	r0, [pc, #556]	; (8005108 <DecodeCommand+0x594>)
}
 8004eda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, totalCharsWritten, 1000);
 8004ede:	f7fe bbfd 	b.w	80036dc <HAL_UART_Transmit>
			decrement = 0;
 8004ee2:	4d8a      	ldr	r5, [pc, #552]	; (800510c <DecodeCommand+0x598>)
	if (*input_string == '\0')
 8004ee4:	78e3      	ldrb	r3, [r4, #3]
			decrement = 0;
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	702a      	strb	r2, [r5, #0]
	if (*input_string == '\0')
 8004eea:	b13b      	cbz	r3, 8004efc <DecodeCommand+0x388>
	if (*input_string == '-')
 8004eec:	2b2d      	cmp	r3, #45	; 0x2d
 8004eee:	f000 8104 	beq.w	80050fa <DecodeCommand+0x586>
 8004ef2:	4987      	ldr	r1, [pc, #540]	; (8005110 <DecodeCommand+0x59c>)
 8004ef4:	4887      	ldr	r0, [pc, #540]	; (8005114 <DecodeCommand+0x5a0>)
 8004ef6:	f7ff fd81 	bl	80049fc <String2IntU8.part.0>
 8004efa:	782b      	ldrb	r3, [r5, #0]
			if(setTime.Hours < 10) decrement++;
 8004efc:	4e84      	ldr	r6, [pc, #528]	; (8005110 <DecodeCommand+0x59c>)
 8004efe:	7832      	ldrb	r2, [r6, #0]
 8004f00:	2a09      	cmp	r2, #9
 8004f02:	d802      	bhi.n	8004f0a <DecodeCommand+0x396>
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(6-decrement), &setTime.Minutes); //mm
 8004f0a:	f1c3 0206 	rsb	r2, r3, #6
 8004f0e:	18a0      	adds	r0, r4, r2
	if (*input_string == '\0')
 8004f10:	5ca2      	ldrb	r2, [r4, r2]
 8004f12:	b12a      	cbz	r2, 8004f20 <DecodeCommand+0x3ac>
	if (*input_string == '-')
 8004f14:	2a2d      	cmp	r2, #45	; 0x2d
 8004f16:	d003      	beq.n	8004f20 <DecodeCommand+0x3ac>
 8004f18:	497f      	ldr	r1, [pc, #508]	; (8005118 <DecodeCommand+0x5a4>)
 8004f1a:	f7ff fd6f 	bl	80049fc <String2IntU8.part.0>
 8004f1e:	782b      	ldrb	r3, [r5, #0]
			if(setTime.Minutes < 10) decrement++;
 8004f20:	7872      	ldrb	r2, [r6, #1]
 8004f22:	2a09      	cmp	r2, #9
 8004f24:	d802      	bhi.n	8004f2c <DecodeCommand+0x3b8>
 8004f26:	3301      	adds	r3, #1
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	702b      	strb	r3, [r5, #0]
			String2IntU8(cmdbuffer+(9-decrement), &setTime.Seconds); //ss
 8004f2c:	f1c3 0309 	rsb	r3, r3, #9
 8004f30:	18e0      	adds	r0, r4, r3
	if (*input_string == '\0')
 8004f32:	5ce3      	ldrb	r3, [r4, r3]
 8004f34:	b123      	cbz	r3, 8004f40 <DecodeCommand+0x3cc>
	if (*input_string == '-')
 8004f36:	2b2d      	cmp	r3, #45	; 0x2d
 8004f38:	d002      	beq.n	8004f40 <DecodeCommand+0x3cc>
 8004f3a:	4978      	ldr	r1, [pc, #480]	; (800511c <DecodeCommand+0x5a8>)
 8004f3c:	f7ff fd5e 	bl	80049fc <String2IntU8.part.0>
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004f40:	4c77      	ldr	r4, [pc, #476]	; (8005120 <DecodeCommand+0x5ac>)
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	21ca      	movs	r1, #202	; 0xca
 8004f46:	2253      	movs	r2, #83	; 0x53
 8004f48:	6259      	str	r1, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc);
 8004f4a:	4620      	mov	r0, r4
			__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
			RTC_EnterInitMode(&hrtc);
 8004f4e:	f7fd fe1f 	bl	8002b90 <RTC_EnterInitMode>
			HAL_RTC_SetTime(&hrtc, &setTime, RTC_FORMAT_BIN);
 8004f52:	4620      	mov	r0, r4
 8004f54:	2200      	movs	r2, #0
 8004f56:	496e      	ldr	r1, [pc, #440]	; (8005110 <DecodeCommand+0x59c>)
 8004f58:	f7fd fe8c 	bl	8002c74 <HAL_RTC_SetTime>
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004f5c:	6823      	ldr	r3, [r4, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004f5e:	486a      	ldr	r0, [pc, #424]	; (8005108 <DecodeCommand+0x594>)
			txbuffer[0] = '$'; txbuffer[1] = 'H'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f60:	4c67      	ldr	r4, [pc, #412]	; (8005100 <DecodeCommand+0x58c>)
			__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004f62:	22ff      	movs	r2, #255	; 0xff
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
			txbuffer[0] = '$'; txbuffer[1] = 'H'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f66:	2748      	movs	r7, #72	; 0x48
 8004f68:	2224      	movs	r2, #36	; 0x24
 8004f6a:	260d      	movs	r6, #13
 8004f6c:	250a      	movs	r5, #10
 8004f6e:	e74c      	b.n	8004e0a <DecodeCommand+0x296>
			String2Int(cmdbuffer+3, &temp_setpoint);
 8004f70:	496c      	ldr	r1, [pc, #432]	; (8005124 <DecodeCommand+0x5b0>)
 8004f72:	4868      	ldr	r0, [pc, #416]	; (8005114 <DecodeCommand+0x5a0>)
			txbuffer[0] = '$'; txbuffer[1] = 'F'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f74:	4c62      	ldr	r4, [pc, #392]	; (8005100 <DecodeCommand+0x58c>)
			String2Int(cmdbuffer+3, &temp_setpoint);
 8004f76:	f7ff fdc3 	bl	8004b00 <String2Int>
			txbuffer[0] = '$'; txbuffer[1] = 'F'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f7a:	2746      	movs	r7, #70	; 0x46
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004f7c:	4862      	ldr	r0, [pc, #392]	; (8005108 <DecodeCommand+0x594>)
			txbuffer[0] = '$'; txbuffer[1] = 'F'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f7e:	2224      	movs	r2, #36	; 0x24
 8004f80:	260d      	movs	r6, #13
 8004f82:	250a      	movs	r5, #10
 8004f84:	e741      	b.n	8004e0a <DecodeCommand+0x296>
			loggingState = (uint16_t)cmdbuffer[3] - 48;
 8004f86:	78e3      	ldrb	r3, [r4, #3]
 8004f88:	4967      	ldr	r1, [pc, #412]	; (8005128 <DecodeCommand+0x5b4>)
			txbuffer[0] = '$'; txbuffer[1] = 'E'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f8a:	4c5d      	ldr	r4, [pc, #372]	; (8005100 <DecodeCommand+0x58c>)
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004f8c:	485e      	ldr	r0, [pc, #376]	; (8005108 <DecodeCommand+0x594>)
			loggingState = (uint16_t)cmdbuffer[3] - 48;
 8004f8e:	3b30      	subs	r3, #48	; 0x30
			txbuffer[0] = '$'; txbuffer[1] = 'E'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f90:	2224      	movs	r2, #36	; 0x24
 8004f92:	2745      	movs	r7, #69	; 0x45
			txbuffer[0] = '$'; txbuffer[1] = 'C'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004f94:	260d      	movs	r6, #13
 8004f96:	250a      	movs	r5, #10
			heatingScheduleState = (uint16_t)cmdbuffer[3] - 48;
 8004f98:	800b      	strh	r3, [r1, #0]
 8004f9a:	e736      	b.n	8004e0a <DecodeCommand+0x296>
			txbuffer[0] = '$'; txbuffer[1] = 'G'; txbuffer[2] = ',';
 8004f9c:	4c58      	ldr	r4, [pc, #352]	; (8005100 <DecodeCommand+0x58c>)
			numcharswritten = Int2String(txbuffer+3, temp_setpoint, 4);
 8004f9e:	4961      	ldr	r1, [pc, #388]	; (8005124 <DecodeCommand+0x5b0>)
			txbuffer[0] = '$'; txbuffer[1] = 'G'; txbuffer[2] = ',';
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	232c      	movs	r3, #44	; 0x2c
 8004fa4:	7022      	strb	r2, [r4, #0]
 8004fa6:	2547      	movs	r5, #71	; 0x47
 8004fa8:	1ce0      	adds	r0, r4, #3
 8004faa:	f9b1 1000 	ldrsh.w	r1, [r1]
 8004fae:	7065      	strb	r5, [r4, #1]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	70a3      	strb	r3, [r4, #2]
 8004fb4:	f7ff fd42 	bl	8004a3c <Int2String.part.1>
			txbuffer[3+numcharswritten] = '\r'; txbuffer[4+numcharswritten] = '\n';
 8004fb8:	1825      	adds	r5, r4, r0
 8004fba:	260d      	movs	r6, #13
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, numcharswritten+5, 1000);
 8004fbc:	4621      	mov	r1, r4
			txbuffer[3+numcharswritten] = '\r'; txbuffer[4+numcharswritten] = '\n';
 8004fbe:	240a      	movs	r4, #10
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, numcharswritten+5, 1000);
 8004fc0:	1d42      	adds	r2, r0, #5
			txbuffer[3+numcharswritten] = '\r'; txbuffer[4+numcharswritten] = '\n';
 8004fc2:	70ee      	strb	r6, [r5, #3]
 8004fc4:	712c      	strb	r4, [r5, #4]
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, numcharswritten+5, 1000);
 8004fc6:	b292      	uxth	r2, r2
 8004fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fcc:	484e      	ldr	r0, [pc, #312]	; (8005108 <DecodeCommand+0x594>)
}
 8004fce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, numcharswritten+5, 1000);
 8004fd2:	f7fe bb83 	b.w	80036dc <HAL_UART_Transmit>
			heaterState = (uint16_t)cmdbuffer[3] - 48;
 8004fd6:	78e3      	ldrb	r3, [r4, #3]
 8004fd8:	4954      	ldr	r1, [pc, #336]	; (800512c <DecodeCommand+0x5b8>)
			txbuffer[0] = '$'; txbuffer[1] = 'D'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004fda:	4c49      	ldr	r4, [pc, #292]	; (8005100 <DecodeCommand+0x58c>)
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004fdc:	484a      	ldr	r0, [pc, #296]	; (8005108 <DecodeCommand+0x594>)
			heaterState = (uint16_t)cmdbuffer[3] - 48;
 8004fde:	3b30      	subs	r3, #48	; 0x30
			txbuffer[0] = '$'; txbuffer[1] = 'D'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004fe0:	2224      	movs	r2, #36	; 0x24
 8004fe2:	2744      	movs	r7, #68	; 0x44
 8004fe4:	e7d6      	b.n	8004f94 <DecodeCommand+0x420>
			heatingScheduleState = (uint16_t)cmdbuffer[3] - 48;
 8004fe6:	78e3      	ldrb	r3, [r4, #3]
 8004fe8:	4951      	ldr	r1, [pc, #324]	; (8005130 <DecodeCommand+0x5bc>)
			txbuffer[0] = '$'; txbuffer[1] = 'C'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004fea:	4c45      	ldr	r4, [pc, #276]	; (8005100 <DecodeCommand+0x58c>)
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8004fec:	4846      	ldr	r0, [pc, #280]	; (8005108 <DecodeCommand+0x594>)
			heatingScheduleState = (uint16_t)cmdbuffer[3] - 48;
 8004fee:	3b30      	subs	r3, #48	; 0x30
			txbuffer[0] = '$'; txbuffer[1] = 'C'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004ff0:	2224      	movs	r2, #36	; 0x24
 8004ff2:	2743      	movs	r7, #67	; 0x43
 8004ff4:	e7ce      	b.n	8004f94 <DecodeCommand+0x420>
			valveState = (uint16_t)cmdbuffer[3] - 48;
 8004ff6:	78e3      	ldrb	r3, [r4, #3]
 8004ff8:	4a4e      	ldr	r2, [pc, #312]	; (8005134 <DecodeCommand+0x5c0>)
			txbuffer[0] = '$'; txbuffer[1] = 'B'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8004ffa:	4c41      	ldr	r4, [pc, #260]	; (8005100 <DecodeCommand+0x58c>)
			valveState = (uint16_t)cmdbuffer[3] - 48;
 8004ffc:	3b30      	subs	r3, #48	; 0x30
 8004ffe:	8013      	strh	r3, [r2, #0]
			txbuffer[0] = '$'; txbuffer[1] = 'B'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8005000:	2742      	movs	r7, #66	; 0x42
			valveControl();
 8005002:	f7fe fd85 	bl	8003b10 <valveControl>
			txbuffer[0] = '$'; txbuffer[1] = 'B'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 8005006:	260d      	movs	r6, #13
			HAL_UART_Transmit(&huart1, (uint8_t*)txbuffer, 4, 1000);
 8005008:	483f      	ldr	r0, [pc, #252]	; (8005108 <DecodeCommand+0x594>)
			txbuffer[0] = '$'; txbuffer[1] = 'B'; txbuffer[2] = '\r'; txbuffer[3] = '\n';
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	250a      	movs	r5, #10
 800500e:	e6fc      	b.n	8004e0a <DecodeCommand+0x296>
			HAL_UART_Transmit(&huart1, (uint8_t*)TXMSG_STUDENTNUM, 13, 1000);
 8005010:	4b49      	ldr	r3, [pc, #292]	; (8005138 <DecodeCommand+0x5c4>)
 8005012:	483d      	ldr	r0, [pc, #244]	; (8005108 <DecodeCommand+0x594>)
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	220d      	movs	r2, #13
 8005018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800501c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			HAL_UART_Transmit(&huart1, (uint8_t*)TXMSG_STUDENTNUM, 13, 1000);
 8005020:	f7fe bb5c 	b.w	80036dc <HAL_UART_Transmit>
					txbuffer[totalCharsWritten++] = 'O'; txbuffer[totalCharsWritten++] = 'P'; txbuffer[totalCharsWritten++] = 'E'; txbuffer[totalCharsWritten++] = 'N';
 8005024:	1c58      	adds	r0, r3, #1
 8005026:	1c99      	adds	r1, r3, #2
 8005028:	1cda      	adds	r2, r3, #3
 800502a:	b2c0      	uxtb	r0, r0
 800502c:	254f      	movs	r5, #79	; 0x4f
 800502e:	b2c9      	uxtb	r1, r1
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	54e5      	strb	r5, [r4, r3]
 8005034:	2750      	movs	r7, #80	; 0x50
 8005036:	2645      	movs	r6, #69	; 0x45
 8005038:	254e      	movs	r5, #78	; 0x4e
 800503a:	3304      	adds	r3, #4
 800503c:	5427      	strb	r7, [r4, r0]
 800503e:	5466      	strb	r6, [r4, r1]
 8005040:	b2d8      	uxtb	r0, r3
 8005042:	54a5      	strb	r5, [r4, r2]
 8005044:	e62a      	b.n	8004c9c <DecodeCommand+0x128>
					txbuffer[totalCharsWritten++] = 'O'; txbuffer[totalCharsWritten++] = 'N'; txbuffer[totalCharsWritten++] = ',';
 8005046:	1c85      	adds	r5, r0, #2
 8005048:	1cc1      	adds	r1, r0, #3
 800504a:	234f      	movs	r3, #79	; 0x4f
 800504c:	b2ed      	uxtb	r5, r5
 800504e:	b2c9      	uxtb	r1, r1
 8005050:	54a3      	strb	r3, [r4, r2]
 8005052:	274e      	movs	r7, #78	; 0x4e
 8005054:	1d03      	adds	r3, r0, #4
 8005056:	5567      	strb	r7, [r4, r5]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	5466      	strb	r6, [r4, r1]
 800505c:	e600      	b.n	8004c60 <DecodeCommand+0xec>
				heatingSchedule[4].Minutes = MM1;
 800505e:	f897 c000 	ldrb.w	ip, [r7]
				heatingSchedule[5].Minutes = MM2;
 8005062:	f89a 0000 	ldrb.w	r0, [sl]
				heatingSchedule[5].Seconds = SS2;
 8005066:	4b35      	ldr	r3, [pc, #212]	; (800513c <DecodeCommand+0x5c8>)
				heatingSchedule[4].Hours = HH1;
 8005068:	7836      	ldrb	r6, [r6, #0]
				heatingSchedule[5].Hours = HH2;
 800506a:	f899 7000 	ldrb.w	r7, [r9]
				heatingSchedule[5].Seconds = SS2;
 800506e:	781d      	ldrb	r5, [r3, #0]
				heatingSchedule[4].Seconds = SS1;
 8005070:	f898 e000 	ldrb.w	lr, [r8]
				heatingSchedule[4].Hours = HH1;
 8005074:	4b32      	ldr	r3, [pc, #200]	; (8005140 <DecodeCommand+0x5cc>)
				heatingSchedule[5].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8005076:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
				heatingSchedule[4].Total = (HH1*60*60) + (MM1*60) + (SS1);
 800507a:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
				heatingSchedule[5].Total = (HH2*60*60) + (MM2*60) + (SS2);
 800507e:	008c      	lsls	r4, r1, #2
				heatingSchedule[4].Total = (HH1*60*60) + (MM1*60) + (SS1);
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005086:	fb01 2206 	mla	r2, r1, r6, r2
				heatingSchedule[5].Total = (HH2*60*60) + (MM2*60) + (SS2);
 800508a:	fb01 4107 	mla	r1, r1, r7, r4
				heatingSchedule[4].Total = (HH1*60*60) + (MM1*60) + (SS1);
 800508e:	4472      	add	r2, lr
				heatingSchedule[5].Total = (HH2*60*60) + (MM2*60) + (SS2);
 8005090:	4429      	add	r1, r5
				heatingSchedule[4].Minutes = MM1;
 8005092:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
				heatingSchedule[4].Hours = HH1;
 8005096:	f883 6020 	strb.w	r6, [r3, #32]
				heatingSchedule[4].Seconds = SS1;
 800509a:	f883 e022 	strb.w	lr, [r3, #34]	; 0x22
				heatingSchedule[5].Hours = HH2;
 800509e:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
				heatingSchedule[5].Minutes = MM2;
 80050a2:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
				heatingSchedule[4].Total = (HH1*60*60) + (MM1*60) + (SS1);
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24
				heatingSchedule[5].Total = (HH2*60*60) + (MM2*60) + (SS2);
 80050a8:	62d9      	str	r1, [r3, #44]	; 0x2c
				heatingSchedule[5].Seconds = SS2;
 80050aa:	f883 502a 	strb.w	r5, [r3, #42]	; 0x2a
 80050ae:	e6a6      	b.n	8004dfe <DecodeCommand+0x28a>
				heatingSchedule[2].Minutes = MM1;
 80050b0:	f897 c000 	ldrb.w	ip, [r7]
				heatingSchedule[3].Minutes = MM2;
 80050b4:	f89a 0000 	ldrb.w	r0, [sl]
				heatingSchedule[3].Seconds = SS2;
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <DecodeCommand+0x5c8>)
				heatingSchedule[2].Hours = HH1;
 80050ba:	7836      	ldrb	r6, [r6, #0]
				heatingSchedule[3].Hours = HH2;
 80050bc:	f899 7000 	ldrb.w	r7, [r9]
				heatingSchedule[3].Seconds = SS2;
 80050c0:	781d      	ldrb	r5, [r3, #0]
				heatingSchedule[2].Seconds = SS1;
 80050c2:	f898 e000 	ldrb.w	lr, [r8]
				heatingSchedule[2].Hours = HH1;
 80050c6:	4b1e      	ldr	r3, [pc, #120]	; (8005140 <DecodeCommand+0x5cc>)
				heatingSchedule[3].Total = (HH2*60*60) + (MM2*60) + (SS2);
 80050c8:	ebc0 1100 	rsb	r1, r0, r0, lsl #4
				heatingSchedule[2].Total = (HH1*60*60) + (MM1*60) + (SS1);
 80050cc:	ebcc 120c 	rsb	r2, ip, ip, lsl #4
				heatingSchedule[3].Total = (HH2*60*60) + (MM2*60) + (SS2);
 80050d0:	008c      	lsls	r4, r1, #2
				heatingSchedule[2].Total = (HH1*60*60) + (MM1*60) + (SS1);
 80050d2:	0092      	lsls	r2, r2, #2
 80050d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80050d8:	fb01 2206 	mla	r2, r1, r6, r2
				heatingSchedule[3].Total = (HH2*60*60) + (MM2*60) + (SS2);
 80050dc:	fb01 4107 	mla	r1, r1, r7, r4
				heatingSchedule[2].Total = (HH1*60*60) + (MM1*60) + (SS1);
 80050e0:	4472      	add	r2, lr
				heatingSchedule[3].Total = (HH2*60*60) + (MM2*60) + (SS2);
 80050e2:	4429      	add	r1, r5
				heatingSchedule[2].Minutes = MM1;
 80050e4:	f883 c011 	strb.w	ip, [r3, #17]
				heatingSchedule[2].Hours = HH1;
 80050e8:	741e      	strb	r6, [r3, #16]
				heatingSchedule[2].Seconds = SS1;
 80050ea:	f883 e012 	strb.w	lr, [r3, #18]
				heatingSchedule[3].Hours = HH2;
 80050ee:	761f      	strb	r7, [r3, #24]
				heatingSchedule[3].Minutes = MM2;
 80050f0:	7658      	strb	r0, [r3, #25]
				heatingSchedule[2].Total = (HH1*60*60) + (MM1*60) + (SS1);
 80050f2:	615a      	str	r2, [r3, #20]
				heatingSchedule[3].Total = (HH2*60*60) + (MM2*60) + (SS2);
 80050f4:	61d9      	str	r1, [r3, #28]
				heatingSchedule[3].Seconds = SS2;
 80050f6:	769d      	strb	r5, [r3, #26]
 80050f8:	e681      	b.n	8004dfe <DecodeCommand+0x28a>
	if (*input_string == '-')
 80050fa:	4613      	mov	r3, r2
 80050fc:	e6fe      	b.n	8004efc <DecodeCommand+0x388>
 80050fe:	bf00      	nop
 8005100:	20000334 	.word	0x20000334
 8005104:	2000027c 	.word	0x2000027c
 8005108:	200001a4 	.word	0x200001a4
 800510c:	200003a0 	.word	0x200003a0
 8005110:	2000031c 	.word	0x2000031c
 8005114:	200002eb 	.word	0x200002eb
 8005118:	2000031d 	.word	0x2000031d
 800511c:	2000031e 	.word	0x2000031e
 8005120:	2000025c 	.word	0x2000025c
 8005124:	200000f0 	.word	0x200000f0
 8005128:	20000148 	.word	0x20000148
 800512c:	20000258 	.word	0x20000258
 8005130:	200001a0 	.word	0x200001a0
 8005134:	20000290 	.word	0x20000290
 8005138:	20000014 	.word	0x20000014
 800513c:	2000036c 	.word	0x2000036c
 8005140:	20000370 	.word	0x20000370

08005144 <HAL_UART_RxCpltCallback>:
{
 8005144:	b538      	push	{r3, r4, r5, lr}
	if (rxchar == '$')
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <HAL_UART_RxCpltCallback+0x50>)
 8005148:	7819      	ldrb	r1, [r3, #0]
 800514a:	2924      	cmp	r1, #36	; 0x24
 800514c:	d00f      	beq.n	800516e <HAL_UART_RxCpltCallback+0x2a>
	if (cmdbufpos < CMDBUFLEN)
 800514e:	4c12      	ldr	r4, [pc, #72]	; (8005198 <HAL_UART_RxCpltCallback+0x54>)
 8005150:	8823      	ldrh	r3, [r4, #0]
 8005152:	2b31      	cmp	r3, #49	; 0x31
 8005154:	d91a      	bls.n	800518c <HAL_UART_RxCpltCallback+0x48>
 8005156:	1e58      	subs	r0, r3, #1
 8005158:	4a10      	ldr	r2, [pc, #64]	; (800519c <HAL_UART_RxCpltCallback+0x58>)
	if (cmdbuffer[cmdbufpos-1] == '\n')
 800515a:	5c13      	ldrb	r3, [r2, r0]
 800515c:	2b0a      	cmp	r3, #10
 800515e:	d010      	beq.n	8005182 <HAL_UART_RxCpltCallback+0x3e>
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxchar, 1);
 8005160:	2201      	movs	r2, #1
 8005162:	490c      	ldr	r1, [pc, #48]	; (8005194 <HAL_UART_RxCpltCallback+0x50>)
 8005164:	480e      	ldr	r0, [pc, #56]	; (80051a0 <HAL_UART_RxCpltCallback+0x5c>)
}
 8005166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxchar, 1);
 800516a:	f7fe b8fb 	b.w	8003364 <HAL_UART_Receive_IT>
 800516e:	2000      	movs	r0, #0
 8005170:	4c09      	ldr	r4, [pc, #36]	; (8005198 <HAL_UART_RxCpltCallback+0x54>)
 8005172:	4603      	mov	r3, r0
 8005174:	2501      	movs	r5, #1
		cmdbuffer[cmdbufpos++] = rxchar;
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <HAL_UART_RxCpltCallback+0x58>)
 8005178:	8025      	strh	r5, [r4, #0]
 800517a:	54d1      	strb	r1, [r2, r3]
	if (cmdbuffer[cmdbufpos-1] == '\n')
 800517c:	5c13      	ldrb	r3, [r2, r0]
 800517e:	2b0a      	cmp	r3, #10
 8005180:	d1ee      	bne.n	8005160 <HAL_UART_RxCpltCallback+0x1c>
		DecodeCommand();
 8005182:	f7ff fcf7 	bl	8004b74 <DecodeCommand>
		cmdbufpos = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	8023      	strh	r3, [r4, #0]
 800518a:	e7e9      	b.n	8005160 <HAL_UART_RxCpltCallback+0x1c>
 800518c:	1c5d      	adds	r5, r3, #1
 800518e:	b2ad      	uxth	r5, r5
 8005190:	1e68      	subs	r0, r5, #1
 8005192:	e7f0      	b.n	8005176 <HAL_UART_RxCpltCallback+0x32>
 8005194:	2000036b 	.word	0x2000036b
 8005198:	20000368 	.word	0x20000368
 800519c:	200002e8 	.word	0x200002e8
 80051a0:	200001a4 	.word	0x200001a4

080051a4 <_write>:
	c[0] = ch & 0x00FF;
	HAL_UART_Transmit(&huart1, &c[0], 1, 10);
	return ch;
}
int _write(int file,char *ptr, int len)
{
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int DataIdx;
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 80051a6:	1e17      	subs	r7, r2, #0
{
 80051a8:	b083      	sub	sp, #12
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 80051aa:	dd0e      	ble.n	80051ca <_write+0x26>
	HAL_UART_Transmit(&huart1, &c[0], 1, 10);
 80051ac:	4e08      	ldr	r6, [pc, #32]	; (80051d0 <_write+0x2c>)
 80051ae:	460c      	mov	r4, r1
 80051b0:	19cd      	adds	r5, r1, r7
	c[0] = ch & 0x00FF;
 80051b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80051b6:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_UART_Transmit(&huart1, &c[0], 1, 10);
 80051ba:	2201      	movs	r2, #1
 80051bc:	230a      	movs	r3, #10
 80051be:	a901      	add	r1, sp, #4
 80051c0:	4630      	mov	r0, r6
 80051c2:	f7fe fa8b 	bl	80036dc <HAL_UART_Transmit>
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 80051c6:	42a5      	cmp	r5, r4
 80051c8:	d1f3      	bne.n	80051b2 <_write+0xe>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80051ca:	4638      	mov	r0, r7
 80051cc:	b003      	add	sp, #12
 80051ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d0:	200001a4 	.word	0x200001a4

080051d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800520c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80051d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80051da:	e003      	b.n	80051e4 <LoopCopyDataInit>

080051dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80051de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80051e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80051e2:	3104      	adds	r1, #4

080051e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80051e4:	480b      	ldr	r0, [pc, #44]	; (8005214 <LoopForever+0xa>)
	ldr	r3, =_edata
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <LoopForever+0xe>)
	adds	r2, r0, r1
 80051e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80051ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80051ec:	d3f6      	bcc.n	80051dc <CopyDataInit>
	ldr	r2, =_sbss
 80051ee:	4a0b      	ldr	r2, [pc, #44]	; (800521c <LoopForever+0x12>)
	b	LoopFillZerobss
 80051f0:	e002      	b.n	80051f8 <LoopFillZerobss>

080051f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80051f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80051f4:	f842 3b04 	str.w	r3, [r2], #4

080051f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <LoopForever+0x16>)
	cmp	r2, r3
 80051fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80051fc:	d3f9      	bcc.n	80051f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80051fe:	f7ff fbc5 	bl	800498c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005202:	f000 f811 	bl	8005228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005206:	f7fe ff83 	bl	8004110 <main>

0800520a <LoopForever>:

LoopForever:
    b LoopForever
 800520a:	e7fe      	b.n	800520a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800520c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8005210:	08006478 	.word	0x08006478
	ldr	r0, =_sdata
 8005214:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005218:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 800521c:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8005220:	200003a8 	.word	0x200003a8

08005224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005224:	e7fe      	b.n	8005224 <ADC1_2_IRQHandler>
	...

08005228 <__libc_init_array>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	4e0d      	ldr	r6, [pc, #52]	; (8005260 <__libc_init_array+0x38>)
 800522c:	4c0d      	ldr	r4, [pc, #52]	; (8005264 <__libc_init_array+0x3c>)
 800522e:	1ba4      	subs	r4, r4, r6
 8005230:	10a4      	asrs	r4, r4, #2
 8005232:	2500      	movs	r5, #0
 8005234:	42a5      	cmp	r5, r4
 8005236:	d109      	bne.n	800524c <__libc_init_array+0x24>
 8005238:	4e0b      	ldr	r6, [pc, #44]	; (8005268 <__libc_init_array+0x40>)
 800523a:	4c0c      	ldr	r4, [pc, #48]	; (800526c <__libc_init_array+0x44>)
 800523c:	f001 f856 	bl	80062ec <_init>
 8005240:	1ba4      	subs	r4, r4, r6
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	2500      	movs	r5, #0
 8005246:	42a5      	cmp	r5, r4
 8005248:	d105      	bne.n	8005256 <__libc_init_array+0x2e>
 800524a:	bd70      	pop	{r4, r5, r6, pc}
 800524c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005250:	4798      	blx	r3
 8005252:	3501      	adds	r5, #1
 8005254:	e7ee      	b.n	8005234 <__libc_init_array+0xc>
 8005256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800525a:	4798      	blx	r3
 800525c:	3501      	adds	r5, #1
 800525e:	e7f2      	b.n	8005246 <__libc_init_array+0x1e>
 8005260:	08006470 	.word	0x08006470
 8005264:	08006470 	.word	0x08006470
 8005268:	08006470 	.word	0x08006470
 800526c:	08006474 	.word	0x08006474

08005270 <iprintf>:
 8005270:	b40f      	push	{r0, r1, r2, r3}
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <iprintf+0x2c>)
 8005274:	b513      	push	{r0, r1, r4, lr}
 8005276:	681c      	ldr	r4, [r3, #0]
 8005278:	b124      	cbz	r4, 8005284 <iprintf+0x14>
 800527a:	69a3      	ldr	r3, [r4, #24]
 800527c:	b913      	cbnz	r3, 8005284 <iprintf+0x14>
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f9c0 	bl	8005604 <__sinit>
 8005284:	ab05      	add	r3, sp, #20
 8005286:	9a04      	ldr	r2, [sp, #16]
 8005288:	68a1      	ldr	r1, [r4, #8]
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	4620      	mov	r0, r4
 800528e:	f000 fb85 	bl	800599c <_vfiprintf_r>
 8005292:	b002      	add	sp, #8
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	b004      	add	sp, #16
 800529a:	4770      	bx	lr
 800529c:	20000018 	.word	0x20000018

080052a0 <__swbuf_r>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	460e      	mov	r6, r1
 80052a4:	4614      	mov	r4, r2
 80052a6:	4605      	mov	r5, r0
 80052a8:	b118      	cbz	r0, 80052b2 <__swbuf_r+0x12>
 80052aa:	6983      	ldr	r3, [r0, #24]
 80052ac:	b90b      	cbnz	r3, 80052b2 <__swbuf_r+0x12>
 80052ae:	f000 f9a9 	bl	8005604 <__sinit>
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <__swbuf_r+0x98>)
 80052b4:	429c      	cmp	r4, r3
 80052b6:	d12a      	bne.n	800530e <__swbuf_r+0x6e>
 80052b8:	686c      	ldr	r4, [r5, #4]
 80052ba:	69a3      	ldr	r3, [r4, #24]
 80052bc:	60a3      	str	r3, [r4, #8]
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	071a      	lsls	r2, r3, #28
 80052c2:	d52e      	bpl.n	8005322 <__swbuf_r+0x82>
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	b363      	cbz	r3, 8005322 <__swbuf_r+0x82>
 80052c8:	6923      	ldr	r3, [r4, #16]
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	1ac0      	subs	r0, r0, r3
 80052ce:	6963      	ldr	r3, [r4, #20]
 80052d0:	b2f6      	uxtb	r6, r6
 80052d2:	4298      	cmp	r0, r3
 80052d4:	4637      	mov	r7, r6
 80052d6:	db04      	blt.n	80052e2 <__swbuf_r+0x42>
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f928 	bl	8005530 <_fflush_r>
 80052e0:	bb28      	cbnz	r0, 800532e <__swbuf_r+0x8e>
 80052e2:	68a3      	ldr	r3, [r4, #8]
 80052e4:	3b01      	subs	r3, #1
 80052e6:	60a3      	str	r3, [r4, #8]
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	6022      	str	r2, [r4, #0]
 80052ee:	701e      	strb	r6, [r3, #0]
 80052f0:	6963      	ldr	r3, [r4, #20]
 80052f2:	3001      	adds	r0, #1
 80052f4:	4298      	cmp	r0, r3
 80052f6:	d004      	beq.n	8005302 <__swbuf_r+0x62>
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	07db      	lsls	r3, r3, #31
 80052fc:	d519      	bpl.n	8005332 <__swbuf_r+0x92>
 80052fe:	2e0a      	cmp	r6, #10
 8005300:	d117      	bne.n	8005332 <__swbuf_r+0x92>
 8005302:	4621      	mov	r1, r4
 8005304:	4628      	mov	r0, r5
 8005306:	f000 f913 	bl	8005530 <_fflush_r>
 800530a:	b190      	cbz	r0, 8005332 <__swbuf_r+0x92>
 800530c:	e00f      	b.n	800532e <__swbuf_r+0x8e>
 800530e:	4b0b      	ldr	r3, [pc, #44]	; (800533c <__swbuf_r+0x9c>)
 8005310:	429c      	cmp	r4, r3
 8005312:	d101      	bne.n	8005318 <__swbuf_r+0x78>
 8005314:	68ac      	ldr	r4, [r5, #8]
 8005316:	e7d0      	b.n	80052ba <__swbuf_r+0x1a>
 8005318:	4b09      	ldr	r3, [pc, #36]	; (8005340 <__swbuf_r+0xa0>)
 800531a:	429c      	cmp	r4, r3
 800531c:	bf08      	it	eq
 800531e:	68ec      	ldreq	r4, [r5, #12]
 8005320:	e7cb      	b.n	80052ba <__swbuf_r+0x1a>
 8005322:	4621      	mov	r1, r4
 8005324:	4628      	mov	r0, r5
 8005326:	f000 f80d 	bl	8005344 <__swsetup_r>
 800532a:	2800      	cmp	r0, #0
 800532c:	d0cc      	beq.n	80052c8 <__swbuf_r+0x28>
 800532e:	f04f 37ff 	mov.w	r7, #4294967295
 8005332:	4638      	mov	r0, r7
 8005334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005336:	bf00      	nop
 8005338:	080063f4 	.word	0x080063f4
 800533c:	08006414 	.word	0x08006414
 8005340:	080063d4 	.word	0x080063d4

08005344 <__swsetup_r>:
 8005344:	4b32      	ldr	r3, [pc, #200]	; (8005410 <__swsetup_r+0xcc>)
 8005346:	b570      	push	{r4, r5, r6, lr}
 8005348:	681d      	ldr	r5, [r3, #0]
 800534a:	4606      	mov	r6, r0
 800534c:	460c      	mov	r4, r1
 800534e:	b125      	cbz	r5, 800535a <__swsetup_r+0x16>
 8005350:	69ab      	ldr	r3, [r5, #24]
 8005352:	b913      	cbnz	r3, 800535a <__swsetup_r+0x16>
 8005354:	4628      	mov	r0, r5
 8005356:	f000 f955 	bl	8005604 <__sinit>
 800535a:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <__swsetup_r+0xd0>)
 800535c:	429c      	cmp	r4, r3
 800535e:	d10f      	bne.n	8005380 <__swsetup_r+0x3c>
 8005360:	686c      	ldr	r4, [r5, #4]
 8005362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005366:	b29a      	uxth	r2, r3
 8005368:	0715      	lsls	r5, r2, #28
 800536a:	d42c      	bmi.n	80053c6 <__swsetup_r+0x82>
 800536c:	06d0      	lsls	r0, r2, #27
 800536e:	d411      	bmi.n	8005394 <__swsetup_r+0x50>
 8005370:	2209      	movs	r2, #9
 8005372:	6032      	str	r2, [r6, #0]
 8005374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	f04f 30ff 	mov.w	r0, #4294967295
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	4b25      	ldr	r3, [pc, #148]	; (8005418 <__swsetup_r+0xd4>)
 8005382:	429c      	cmp	r4, r3
 8005384:	d101      	bne.n	800538a <__swsetup_r+0x46>
 8005386:	68ac      	ldr	r4, [r5, #8]
 8005388:	e7eb      	b.n	8005362 <__swsetup_r+0x1e>
 800538a:	4b24      	ldr	r3, [pc, #144]	; (800541c <__swsetup_r+0xd8>)
 800538c:	429c      	cmp	r4, r3
 800538e:	bf08      	it	eq
 8005390:	68ec      	ldreq	r4, [r5, #12]
 8005392:	e7e6      	b.n	8005362 <__swsetup_r+0x1e>
 8005394:	0751      	lsls	r1, r2, #29
 8005396:	d512      	bpl.n	80053be <__swsetup_r+0x7a>
 8005398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800539a:	b141      	cbz	r1, 80053ae <__swsetup_r+0x6a>
 800539c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053a0:	4299      	cmp	r1, r3
 80053a2:	d002      	beq.n	80053aa <__swsetup_r+0x66>
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 fa23 	bl	80057f0 <_free_r>
 80053aa:	2300      	movs	r3, #0
 80053ac:	6363      	str	r3, [r4, #52]	; 0x34
 80053ae:	89a3      	ldrh	r3, [r4, #12]
 80053b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053b4:	81a3      	strh	r3, [r4, #12]
 80053b6:	2300      	movs	r3, #0
 80053b8:	6063      	str	r3, [r4, #4]
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	f043 0308 	orr.w	r3, r3, #8
 80053c4:	81a3      	strh	r3, [r4, #12]
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	b94b      	cbnz	r3, 80053de <__swsetup_r+0x9a>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d4:	d003      	beq.n	80053de <__swsetup_r+0x9a>
 80053d6:	4621      	mov	r1, r4
 80053d8:	4630      	mov	r0, r6
 80053da:	f000 f9c1 	bl	8005760 <__smakebuf_r>
 80053de:	89a2      	ldrh	r2, [r4, #12]
 80053e0:	f012 0301 	ands.w	r3, r2, #1
 80053e4:	d00c      	beq.n	8005400 <__swsetup_r+0xbc>
 80053e6:	2300      	movs	r3, #0
 80053e8:	60a3      	str	r3, [r4, #8]
 80053ea:	6963      	ldr	r3, [r4, #20]
 80053ec:	425b      	negs	r3, r3
 80053ee:	61a3      	str	r3, [r4, #24]
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	b953      	cbnz	r3, 800540a <__swsetup_r+0xc6>
 80053f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80053fc:	d1ba      	bne.n	8005374 <__swsetup_r+0x30>
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	0792      	lsls	r2, r2, #30
 8005402:	bf58      	it	pl
 8005404:	6963      	ldrpl	r3, [r4, #20]
 8005406:	60a3      	str	r3, [r4, #8]
 8005408:	e7f2      	b.n	80053f0 <__swsetup_r+0xac>
 800540a:	2000      	movs	r0, #0
 800540c:	e7f7      	b.n	80053fe <__swsetup_r+0xba>
 800540e:	bf00      	nop
 8005410:	20000018 	.word	0x20000018
 8005414:	080063f4 	.word	0x080063f4
 8005418:	08006414 	.word	0x08006414
 800541c:	080063d4 	.word	0x080063d4

08005420 <__sflush_r>:
 8005420:	898a      	ldrh	r2, [r1, #12]
 8005422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005426:	4605      	mov	r5, r0
 8005428:	0710      	lsls	r0, r2, #28
 800542a:	460c      	mov	r4, r1
 800542c:	d45a      	bmi.n	80054e4 <__sflush_r+0xc4>
 800542e:	684b      	ldr	r3, [r1, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	dc05      	bgt.n	8005440 <__sflush_r+0x20>
 8005434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	dc02      	bgt.n	8005440 <__sflush_r+0x20>
 800543a:	2000      	movs	r0, #0
 800543c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005442:	2e00      	cmp	r6, #0
 8005444:	d0f9      	beq.n	800543a <__sflush_r+0x1a>
 8005446:	2300      	movs	r3, #0
 8005448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800544c:	682f      	ldr	r7, [r5, #0]
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	d033      	beq.n	80054ba <__sflush_r+0x9a>
 8005452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	075a      	lsls	r2, r3, #29
 8005458:	d505      	bpl.n	8005466 <__sflush_r+0x46>
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	1ac0      	subs	r0, r0, r3
 800545e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005460:	b10b      	cbz	r3, 8005466 <__sflush_r+0x46>
 8005462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005464:	1ac0      	subs	r0, r0, r3
 8005466:	2300      	movs	r3, #0
 8005468:	4602      	mov	r2, r0
 800546a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546c:	6a21      	ldr	r1, [r4, #32]
 800546e:	4628      	mov	r0, r5
 8005470:	47b0      	blx	r6
 8005472:	1c43      	adds	r3, r0, #1
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	d106      	bne.n	8005486 <__sflush_r+0x66>
 8005478:	6829      	ldr	r1, [r5, #0]
 800547a:	291d      	cmp	r1, #29
 800547c:	d84b      	bhi.n	8005516 <__sflush_r+0xf6>
 800547e:	4a2b      	ldr	r2, [pc, #172]	; (800552c <__sflush_r+0x10c>)
 8005480:	40ca      	lsrs	r2, r1
 8005482:	07d6      	lsls	r6, r2, #31
 8005484:	d547      	bpl.n	8005516 <__sflush_r+0xf6>
 8005486:	2200      	movs	r2, #0
 8005488:	6062      	str	r2, [r4, #4]
 800548a:	04d9      	lsls	r1, r3, #19
 800548c:	6922      	ldr	r2, [r4, #16]
 800548e:	6022      	str	r2, [r4, #0]
 8005490:	d504      	bpl.n	800549c <__sflush_r+0x7c>
 8005492:	1c42      	adds	r2, r0, #1
 8005494:	d101      	bne.n	800549a <__sflush_r+0x7a>
 8005496:	682b      	ldr	r3, [r5, #0]
 8005498:	b903      	cbnz	r3, 800549c <__sflush_r+0x7c>
 800549a:	6560      	str	r0, [r4, #84]	; 0x54
 800549c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800549e:	602f      	str	r7, [r5, #0]
 80054a0:	2900      	cmp	r1, #0
 80054a2:	d0ca      	beq.n	800543a <__sflush_r+0x1a>
 80054a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054a8:	4299      	cmp	r1, r3
 80054aa:	d002      	beq.n	80054b2 <__sflush_r+0x92>
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f99f 	bl	80057f0 <_free_r>
 80054b2:	2000      	movs	r0, #0
 80054b4:	6360      	str	r0, [r4, #52]	; 0x34
 80054b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054ba:	6a21      	ldr	r1, [r4, #32]
 80054bc:	2301      	movs	r3, #1
 80054be:	4628      	mov	r0, r5
 80054c0:	47b0      	blx	r6
 80054c2:	1c41      	adds	r1, r0, #1
 80054c4:	d1c6      	bne.n	8005454 <__sflush_r+0x34>
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0c3      	beq.n	8005454 <__sflush_r+0x34>
 80054cc:	2b1d      	cmp	r3, #29
 80054ce:	d001      	beq.n	80054d4 <__sflush_r+0xb4>
 80054d0:	2b16      	cmp	r3, #22
 80054d2:	d101      	bne.n	80054d8 <__sflush_r+0xb8>
 80054d4:	602f      	str	r7, [r5, #0]
 80054d6:	e7b0      	b.n	800543a <__sflush_r+0x1a>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054de:	81a3      	strh	r3, [r4, #12]
 80054e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e4:	690f      	ldr	r7, [r1, #16]
 80054e6:	2f00      	cmp	r7, #0
 80054e8:	d0a7      	beq.n	800543a <__sflush_r+0x1a>
 80054ea:	0793      	lsls	r3, r2, #30
 80054ec:	680e      	ldr	r6, [r1, #0]
 80054ee:	bf08      	it	eq
 80054f0:	694b      	ldreq	r3, [r1, #20]
 80054f2:	600f      	str	r7, [r1, #0]
 80054f4:	bf18      	it	ne
 80054f6:	2300      	movne	r3, #0
 80054f8:	eba6 0807 	sub.w	r8, r6, r7
 80054fc:	608b      	str	r3, [r1, #8]
 80054fe:	f1b8 0f00 	cmp.w	r8, #0
 8005502:	dd9a      	ble.n	800543a <__sflush_r+0x1a>
 8005504:	4643      	mov	r3, r8
 8005506:	463a      	mov	r2, r7
 8005508:	6a21      	ldr	r1, [r4, #32]
 800550a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800550c:	4628      	mov	r0, r5
 800550e:	47b0      	blx	r6
 8005510:	2800      	cmp	r0, #0
 8005512:	dc07      	bgt.n	8005524 <__sflush_r+0x104>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005524:	4407      	add	r7, r0
 8005526:	eba8 0800 	sub.w	r8, r8, r0
 800552a:	e7e8      	b.n	80054fe <__sflush_r+0xde>
 800552c:	20400001 	.word	0x20400001

08005530 <_fflush_r>:
 8005530:	b538      	push	{r3, r4, r5, lr}
 8005532:	690b      	ldr	r3, [r1, #16]
 8005534:	4605      	mov	r5, r0
 8005536:	460c      	mov	r4, r1
 8005538:	b1db      	cbz	r3, 8005572 <_fflush_r+0x42>
 800553a:	b118      	cbz	r0, 8005544 <_fflush_r+0x14>
 800553c:	6983      	ldr	r3, [r0, #24]
 800553e:	b90b      	cbnz	r3, 8005544 <_fflush_r+0x14>
 8005540:	f000 f860 	bl	8005604 <__sinit>
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <_fflush_r+0x48>)
 8005546:	429c      	cmp	r4, r3
 8005548:	d109      	bne.n	800555e <_fflush_r+0x2e>
 800554a:	686c      	ldr	r4, [r5, #4]
 800554c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005550:	b17b      	cbz	r3, 8005572 <_fflush_r+0x42>
 8005552:	4621      	mov	r1, r4
 8005554:	4628      	mov	r0, r5
 8005556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800555a:	f7ff bf61 	b.w	8005420 <__sflush_r>
 800555e:	4b07      	ldr	r3, [pc, #28]	; (800557c <_fflush_r+0x4c>)
 8005560:	429c      	cmp	r4, r3
 8005562:	d101      	bne.n	8005568 <_fflush_r+0x38>
 8005564:	68ac      	ldr	r4, [r5, #8]
 8005566:	e7f1      	b.n	800554c <_fflush_r+0x1c>
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <_fflush_r+0x50>)
 800556a:	429c      	cmp	r4, r3
 800556c:	bf08      	it	eq
 800556e:	68ec      	ldreq	r4, [r5, #12]
 8005570:	e7ec      	b.n	800554c <_fflush_r+0x1c>
 8005572:	2000      	movs	r0, #0
 8005574:	bd38      	pop	{r3, r4, r5, pc}
 8005576:	bf00      	nop
 8005578:	080063f4 	.word	0x080063f4
 800557c:	08006414 	.word	0x08006414
 8005580:	080063d4 	.word	0x080063d4

08005584 <_cleanup_r>:
 8005584:	4901      	ldr	r1, [pc, #4]	; (800558c <_cleanup_r+0x8>)
 8005586:	f000 b8a9 	b.w	80056dc <_fwalk_reent>
 800558a:	bf00      	nop
 800558c:	08005531 	.word	0x08005531

08005590 <std.isra.0>:
 8005590:	2300      	movs	r3, #0
 8005592:	b510      	push	{r4, lr}
 8005594:	4604      	mov	r4, r0
 8005596:	6003      	str	r3, [r0, #0]
 8005598:	6043      	str	r3, [r0, #4]
 800559a:	6083      	str	r3, [r0, #8]
 800559c:	8181      	strh	r1, [r0, #12]
 800559e:	6643      	str	r3, [r0, #100]	; 0x64
 80055a0:	81c2      	strh	r2, [r0, #14]
 80055a2:	6103      	str	r3, [r0, #16]
 80055a4:	6143      	str	r3, [r0, #20]
 80055a6:	6183      	str	r3, [r0, #24]
 80055a8:	4619      	mov	r1, r3
 80055aa:	2208      	movs	r2, #8
 80055ac:	305c      	adds	r0, #92	; 0x5c
 80055ae:	f000 f917 	bl	80057e0 <memset>
 80055b2:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <std.isra.0+0x38>)
 80055b4:	6263      	str	r3, [r4, #36]	; 0x24
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <std.isra.0+0x3c>)
 80055b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80055ba:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <std.isra.0+0x40>)
 80055bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055be:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <std.isra.0+0x44>)
 80055c0:	6224      	str	r4, [r4, #32]
 80055c2:	6323      	str	r3, [r4, #48]	; 0x30
 80055c4:	bd10      	pop	{r4, pc}
 80055c6:	bf00      	nop
 80055c8:	08005f15 	.word	0x08005f15
 80055cc:	08005f37 	.word	0x08005f37
 80055d0:	08005f6f 	.word	0x08005f6f
 80055d4:	08005f93 	.word	0x08005f93

080055d8 <__sfmoreglue>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	1e4a      	subs	r2, r1, #1
 80055dc:	2568      	movs	r5, #104	; 0x68
 80055de:	4355      	muls	r5, r2
 80055e0:	460e      	mov	r6, r1
 80055e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80055e6:	f000 f951 	bl	800588c <_malloc_r>
 80055ea:	4604      	mov	r4, r0
 80055ec:	b140      	cbz	r0, 8005600 <__sfmoreglue+0x28>
 80055ee:	2100      	movs	r1, #0
 80055f0:	e880 0042 	stmia.w	r0, {r1, r6}
 80055f4:	300c      	adds	r0, #12
 80055f6:	60a0      	str	r0, [r4, #8]
 80055f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80055fc:	f000 f8f0 	bl	80057e0 <memset>
 8005600:	4620      	mov	r0, r4
 8005602:	bd70      	pop	{r4, r5, r6, pc}

08005604 <__sinit>:
 8005604:	6983      	ldr	r3, [r0, #24]
 8005606:	b510      	push	{r4, lr}
 8005608:	4604      	mov	r4, r0
 800560a:	bb33      	cbnz	r3, 800565a <__sinit+0x56>
 800560c:	6483      	str	r3, [r0, #72]	; 0x48
 800560e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005610:	6503      	str	r3, [r0, #80]	; 0x50
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <__sinit+0x58>)
 8005614:	4a12      	ldr	r2, [pc, #72]	; (8005660 <__sinit+0x5c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6282      	str	r2, [r0, #40]	; 0x28
 800561a:	4298      	cmp	r0, r3
 800561c:	bf04      	itt	eq
 800561e:	2301      	moveq	r3, #1
 8005620:	6183      	streq	r3, [r0, #24]
 8005622:	f000 f81f 	bl	8005664 <__sfp>
 8005626:	6060      	str	r0, [r4, #4]
 8005628:	4620      	mov	r0, r4
 800562a:	f000 f81b 	bl	8005664 <__sfp>
 800562e:	60a0      	str	r0, [r4, #8]
 8005630:	4620      	mov	r0, r4
 8005632:	f000 f817 	bl	8005664 <__sfp>
 8005636:	2200      	movs	r2, #0
 8005638:	60e0      	str	r0, [r4, #12]
 800563a:	2104      	movs	r1, #4
 800563c:	6860      	ldr	r0, [r4, #4]
 800563e:	f7ff ffa7 	bl	8005590 <std.isra.0>
 8005642:	2201      	movs	r2, #1
 8005644:	2109      	movs	r1, #9
 8005646:	68a0      	ldr	r0, [r4, #8]
 8005648:	f7ff ffa2 	bl	8005590 <std.isra.0>
 800564c:	2202      	movs	r2, #2
 800564e:	2112      	movs	r1, #18
 8005650:	68e0      	ldr	r0, [r4, #12]
 8005652:	f7ff ff9d 	bl	8005590 <std.isra.0>
 8005656:	2301      	movs	r3, #1
 8005658:	61a3      	str	r3, [r4, #24]
 800565a:	bd10      	pop	{r4, pc}
 800565c:	08006434 	.word	0x08006434
 8005660:	08005585 	.word	0x08005585

08005664 <__sfp>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <__sfp+0x74>)
 8005668:	681e      	ldr	r6, [r3, #0]
 800566a:	69b3      	ldr	r3, [r6, #24]
 800566c:	4607      	mov	r7, r0
 800566e:	b913      	cbnz	r3, 8005676 <__sfp+0x12>
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff ffc7 	bl	8005604 <__sinit>
 8005676:	3648      	adds	r6, #72	; 0x48
 8005678:	68b4      	ldr	r4, [r6, #8]
 800567a:	6873      	ldr	r3, [r6, #4]
 800567c:	3b01      	subs	r3, #1
 800567e:	d503      	bpl.n	8005688 <__sfp+0x24>
 8005680:	6833      	ldr	r3, [r6, #0]
 8005682:	b133      	cbz	r3, 8005692 <__sfp+0x2e>
 8005684:	6836      	ldr	r6, [r6, #0]
 8005686:	e7f7      	b.n	8005678 <__sfp+0x14>
 8005688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800568c:	b16d      	cbz	r5, 80056aa <__sfp+0x46>
 800568e:	3468      	adds	r4, #104	; 0x68
 8005690:	e7f4      	b.n	800567c <__sfp+0x18>
 8005692:	2104      	movs	r1, #4
 8005694:	4638      	mov	r0, r7
 8005696:	f7ff ff9f 	bl	80055d8 <__sfmoreglue>
 800569a:	6030      	str	r0, [r6, #0]
 800569c:	2800      	cmp	r0, #0
 800569e:	d1f1      	bne.n	8005684 <__sfp+0x20>
 80056a0:	230c      	movs	r3, #12
 80056a2:	603b      	str	r3, [r7, #0]
 80056a4:	4604      	mov	r4, r0
 80056a6:	4620      	mov	r0, r4
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056ae:	81e3      	strh	r3, [r4, #14]
 80056b0:	2301      	movs	r3, #1
 80056b2:	81a3      	strh	r3, [r4, #12]
 80056b4:	6665      	str	r5, [r4, #100]	; 0x64
 80056b6:	6025      	str	r5, [r4, #0]
 80056b8:	60a5      	str	r5, [r4, #8]
 80056ba:	6065      	str	r5, [r4, #4]
 80056bc:	6125      	str	r5, [r4, #16]
 80056be:	6165      	str	r5, [r4, #20]
 80056c0:	61a5      	str	r5, [r4, #24]
 80056c2:	2208      	movs	r2, #8
 80056c4:	4629      	mov	r1, r5
 80056c6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80056ca:	f000 f889 	bl	80057e0 <memset>
 80056ce:	6365      	str	r5, [r4, #52]	; 0x34
 80056d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80056d2:	64a5      	str	r5, [r4, #72]	; 0x48
 80056d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80056d6:	e7e6      	b.n	80056a6 <__sfp+0x42>
 80056d8:	08006434 	.word	0x08006434

080056dc <_fwalk_reent>:
 80056dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e0:	4680      	mov	r8, r0
 80056e2:	4689      	mov	r9, r1
 80056e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056e8:	2600      	movs	r6, #0
 80056ea:	b914      	cbnz	r4, 80056f2 <_fwalk_reent+0x16>
 80056ec:	4630      	mov	r0, r6
 80056ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056f2:	68a5      	ldr	r5, [r4, #8]
 80056f4:	6867      	ldr	r7, [r4, #4]
 80056f6:	3f01      	subs	r7, #1
 80056f8:	d501      	bpl.n	80056fe <_fwalk_reent+0x22>
 80056fa:	6824      	ldr	r4, [r4, #0]
 80056fc:	e7f5      	b.n	80056ea <_fwalk_reent+0xe>
 80056fe:	89ab      	ldrh	r3, [r5, #12]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d907      	bls.n	8005714 <_fwalk_reent+0x38>
 8005704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005708:	3301      	adds	r3, #1
 800570a:	d003      	beq.n	8005714 <_fwalk_reent+0x38>
 800570c:	4629      	mov	r1, r5
 800570e:	4640      	mov	r0, r8
 8005710:	47c8      	blx	r9
 8005712:	4306      	orrs	r6, r0
 8005714:	3568      	adds	r5, #104	; 0x68
 8005716:	e7ee      	b.n	80056f6 <_fwalk_reent+0x1a>

08005718 <__swhatbuf_r>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	460e      	mov	r6, r1
 800571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005720:	2900      	cmp	r1, #0
 8005722:	b090      	sub	sp, #64	; 0x40
 8005724:	4614      	mov	r4, r2
 8005726:	461d      	mov	r5, r3
 8005728:	da07      	bge.n	800573a <__swhatbuf_r+0x22>
 800572a:	2300      	movs	r3, #0
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	89b3      	ldrh	r3, [r6, #12]
 8005730:	061a      	lsls	r2, r3, #24
 8005732:	d410      	bmi.n	8005756 <__swhatbuf_r+0x3e>
 8005734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005738:	e00e      	b.n	8005758 <__swhatbuf_r+0x40>
 800573a:	aa01      	add	r2, sp, #4
 800573c:	f000 fc50 	bl	8005fe0 <_fstat_r>
 8005740:	2800      	cmp	r0, #0
 8005742:	dbf2      	blt.n	800572a <__swhatbuf_r+0x12>
 8005744:	9a02      	ldr	r2, [sp, #8]
 8005746:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800574a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800574e:	425a      	negs	r2, r3
 8005750:	415a      	adcs	r2, r3
 8005752:	602a      	str	r2, [r5, #0]
 8005754:	e7ee      	b.n	8005734 <__swhatbuf_r+0x1c>
 8005756:	2340      	movs	r3, #64	; 0x40
 8005758:	2000      	movs	r0, #0
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	b010      	add	sp, #64	; 0x40
 800575e:	bd70      	pop	{r4, r5, r6, pc}

08005760 <__smakebuf_r>:
 8005760:	898b      	ldrh	r3, [r1, #12]
 8005762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005764:	079d      	lsls	r5, r3, #30
 8005766:	4606      	mov	r6, r0
 8005768:	460c      	mov	r4, r1
 800576a:	d507      	bpl.n	800577c <__smakebuf_r+0x1c>
 800576c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	6123      	str	r3, [r4, #16]
 8005774:	2301      	movs	r3, #1
 8005776:	6163      	str	r3, [r4, #20]
 8005778:	b002      	add	sp, #8
 800577a:	bd70      	pop	{r4, r5, r6, pc}
 800577c:	ab01      	add	r3, sp, #4
 800577e:	466a      	mov	r2, sp
 8005780:	f7ff ffca 	bl	8005718 <__swhatbuf_r>
 8005784:	9900      	ldr	r1, [sp, #0]
 8005786:	4605      	mov	r5, r0
 8005788:	4630      	mov	r0, r6
 800578a:	f000 f87f 	bl	800588c <_malloc_r>
 800578e:	b948      	cbnz	r0, 80057a4 <__smakebuf_r+0x44>
 8005790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005794:	059a      	lsls	r2, r3, #22
 8005796:	d4ef      	bmi.n	8005778 <__smakebuf_r+0x18>
 8005798:	f023 0303 	bic.w	r3, r3, #3
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	e7e3      	b.n	800576c <__smakebuf_r+0xc>
 80057a4:	4b0d      	ldr	r3, [pc, #52]	; (80057dc <__smakebuf_r+0x7c>)
 80057a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	6020      	str	r0, [r4, #0]
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	9b00      	ldr	r3, [sp, #0]
 80057b4:	6163      	str	r3, [r4, #20]
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	6120      	str	r0, [r4, #16]
 80057ba:	b15b      	cbz	r3, 80057d4 <__smakebuf_r+0x74>
 80057bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057c0:	4630      	mov	r0, r6
 80057c2:	f000 fc1f 	bl	8006004 <_isatty_r>
 80057c6:	b128      	cbz	r0, 80057d4 <__smakebuf_r+0x74>
 80057c8:	89a3      	ldrh	r3, [r4, #12]
 80057ca:	f023 0303 	bic.w	r3, r3, #3
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	431d      	orrs	r5, r3
 80057d8:	81a5      	strh	r5, [r4, #12]
 80057da:	e7cd      	b.n	8005778 <__smakebuf_r+0x18>
 80057dc:	08005585 	.word	0x08005585

080057e0 <memset>:
 80057e0:	4402      	add	r2, r0
 80057e2:	4603      	mov	r3, r0
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d100      	bne.n	80057ea <memset+0xa>
 80057e8:	4770      	bx	lr
 80057ea:	f803 1b01 	strb.w	r1, [r3], #1
 80057ee:	e7f9      	b.n	80057e4 <memset+0x4>

080057f0 <_free_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4605      	mov	r5, r0
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d045      	beq.n	8005884 <_free_r+0x94>
 80057f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fc:	1f0c      	subs	r4, r1, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	bfb8      	it	lt
 8005802:	18e4      	addlt	r4, r4, r3
 8005804:	f000 fc20 	bl	8006048 <__malloc_lock>
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <_free_r+0x98>)
 800580a:	6813      	ldr	r3, [r2, #0]
 800580c:	4610      	mov	r0, r2
 800580e:	b933      	cbnz	r3, 800581e <_free_r+0x2e>
 8005810:	6063      	str	r3, [r4, #4]
 8005812:	6014      	str	r4, [r2, #0]
 8005814:	4628      	mov	r0, r5
 8005816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800581a:	f000 bc16 	b.w	800604a <__malloc_unlock>
 800581e:	42a3      	cmp	r3, r4
 8005820:	d90c      	bls.n	800583c <_free_r+0x4c>
 8005822:	6821      	ldr	r1, [r4, #0]
 8005824:	1862      	adds	r2, r4, r1
 8005826:	4293      	cmp	r3, r2
 8005828:	bf04      	itt	eq
 800582a:	681a      	ldreq	r2, [r3, #0]
 800582c:	685b      	ldreq	r3, [r3, #4]
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	bf04      	itt	eq
 8005832:	1852      	addeq	r2, r2, r1
 8005834:	6022      	streq	r2, [r4, #0]
 8005836:	6004      	str	r4, [r0, #0]
 8005838:	e7ec      	b.n	8005814 <_free_r+0x24>
 800583a:	4613      	mov	r3, r2
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	b10a      	cbz	r2, 8005844 <_free_r+0x54>
 8005840:	42a2      	cmp	r2, r4
 8005842:	d9fa      	bls.n	800583a <_free_r+0x4a>
 8005844:	6819      	ldr	r1, [r3, #0]
 8005846:	1858      	adds	r0, r3, r1
 8005848:	42a0      	cmp	r0, r4
 800584a:	d10b      	bne.n	8005864 <_free_r+0x74>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	4401      	add	r1, r0
 8005850:	1858      	adds	r0, r3, r1
 8005852:	4282      	cmp	r2, r0
 8005854:	6019      	str	r1, [r3, #0]
 8005856:	d1dd      	bne.n	8005814 <_free_r+0x24>
 8005858:	6810      	ldr	r0, [r2, #0]
 800585a:	6852      	ldr	r2, [r2, #4]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	4401      	add	r1, r0
 8005860:	6019      	str	r1, [r3, #0]
 8005862:	e7d7      	b.n	8005814 <_free_r+0x24>
 8005864:	d902      	bls.n	800586c <_free_r+0x7c>
 8005866:	230c      	movs	r3, #12
 8005868:	602b      	str	r3, [r5, #0]
 800586a:	e7d3      	b.n	8005814 <_free_r+0x24>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	1821      	adds	r1, r4, r0
 8005870:	428a      	cmp	r2, r1
 8005872:	bf04      	itt	eq
 8005874:	6811      	ldreq	r1, [r2, #0]
 8005876:	6852      	ldreq	r2, [r2, #4]
 8005878:	6062      	str	r2, [r4, #4]
 800587a:	bf04      	itt	eq
 800587c:	1809      	addeq	r1, r1, r0
 800587e:	6021      	streq	r1, [r4, #0]
 8005880:	605c      	str	r4, [r3, #4]
 8005882:	e7c7      	b.n	8005814 <_free_r+0x24>
 8005884:	bd38      	pop	{r3, r4, r5, pc}
 8005886:	bf00      	nop
 8005888:	200000d0 	.word	0x200000d0

0800588c <_malloc_r>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	1ccd      	adds	r5, r1, #3
 8005890:	f025 0503 	bic.w	r5, r5, #3
 8005894:	3508      	adds	r5, #8
 8005896:	2d0c      	cmp	r5, #12
 8005898:	bf38      	it	cc
 800589a:	250c      	movcc	r5, #12
 800589c:	2d00      	cmp	r5, #0
 800589e:	4606      	mov	r6, r0
 80058a0:	db01      	blt.n	80058a6 <_malloc_r+0x1a>
 80058a2:	42a9      	cmp	r1, r5
 80058a4:	d903      	bls.n	80058ae <_malloc_r+0x22>
 80058a6:	230c      	movs	r3, #12
 80058a8:	6033      	str	r3, [r6, #0]
 80058aa:	2000      	movs	r0, #0
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
 80058ae:	f000 fbcb 	bl	8006048 <__malloc_lock>
 80058b2:	4a23      	ldr	r2, [pc, #140]	; (8005940 <_malloc_r+0xb4>)
 80058b4:	6814      	ldr	r4, [r2, #0]
 80058b6:	4621      	mov	r1, r4
 80058b8:	b991      	cbnz	r1, 80058e0 <_malloc_r+0x54>
 80058ba:	4c22      	ldr	r4, [pc, #136]	; (8005944 <_malloc_r+0xb8>)
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	b91b      	cbnz	r3, 80058c8 <_malloc_r+0x3c>
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 fb17 	bl	8005ef4 <_sbrk_r>
 80058c6:	6020      	str	r0, [r4, #0]
 80058c8:	4629      	mov	r1, r5
 80058ca:	4630      	mov	r0, r6
 80058cc:	f000 fb12 	bl	8005ef4 <_sbrk_r>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d126      	bne.n	8005922 <_malloc_r+0x96>
 80058d4:	230c      	movs	r3, #12
 80058d6:	6033      	str	r3, [r6, #0]
 80058d8:	4630      	mov	r0, r6
 80058da:	f000 fbb6 	bl	800604a <__malloc_unlock>
 80058de:	e7e4      	b.n	80058aa <_malloc_r+0x1e>
 80058e0:	680b      	ldr	r3, [r1, #0]
 80058e2:	1b5b      	subs	r3, r3, r5
 80058e4:	d41a      	bmi.n	800591c <_malloc_r+0x90>
 80058e6:	2b0b      	cmp	r3, #11
 80058e8:	d90f      	bls.n	800590a <_malloc_r+0x7e>
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	50cd      	str	r5, [r1, r3]
 80058ee:	18cc      	adds	r4, r1, r3
 80058f0:	4630      	mov	r0, r6
 80058f2:	f000 fbaa 	bl	800604a <__malloc_unlock>
 80058f6:	f104 000b 	add.w	r0, r4, #11
 80058fa:	1d23      	adds	r3, r4, #4
 80058fc:	f020 0007 	bic.w	r0, r0, #7
 8005900:	1ac3      	subs	r3, r0, r3
 8005902:	d01b      	beq.n	800593c <_malloc_r+0xb0>
 8005904:	425a      	negs	r2, r3
 8005906:	50e2      	str	r2, [r4, r3]
 8005908:	bd70      	pop	{r4, r5, r6, pc}
 800590a:	428c      	cmp	r4, r1
 800590c:	bf0d      	iteet	eq
 800590e:	6863      	ldreq	r3, [r4, #4]
 8005910:	684b      	ldrne	r3, [r1, #4]
 8005912:	6063      	strne	r3, [r4, #4]
 8005914:	6013      	streq	r3, [r2, #0]
 8005916:	bf18      	it	ne
 8005918:	460c      	movne	r4, r1
 800591a:	e7e9      	b.n	80058f0 <_malloc_r+0x64>
 800591c:	460c      	mov	r4, r1
 800591e:	6849      	ldr	r1, [r1, #4]
 8005920:	e7ca      	b.n	80058b8 <_malloc_r+0x2c>
 8005922:	1cc4      	adds	r4, r0, #3
 8005924:	f024 0403 	bic.w	r4, r4, #3
 8005928:	42a0      	cmp	r0, r4
 800592a:	d005      	beq.n	8005938 <_malloc_r+0xac>
 800592c:	1a21      	subs	r1, r4, r0
 800592e:	4630      	mov	r0, r6
 8005930:	f000 fae0 	bl	8005ef4 <_sbrk_r>
 8005934:	3001      	adds	r0, #1
 8005936:	d0cd      	beq.n	80058d4 <_malloc_r+0x48>
 8005938:	6025      	str	r5, [r4, #0]
 800593a:	e7d9      	b.n	80058f0 <_malloc_r+0x64>
 800593c:	bd70      	pop	{r4, r5, r6, pc}
 800593e:	bf00      	nop
 8005940:	200000d0 	.word	0x200000d0
 8005944:	200000d4 	.word	0x200000d4

08005948 <__sfputc_r>:
 8005948:	6893      	ldr	r3, [r2, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	b410      	push	{r4}
 8005950:	6093      	str	r3, [r2, #8]
 8005952:	da09      	bge.n	8005968 <__sfputc_r+0x20>
 8005954:	6994      	ldr	r4, [r2, #24]
 8005956:	42a3      	cmp	r3, r4
 8005958:	db02      	blt.n	8005960 <__sfputc_r+0x18>
 800595a:	b2cb      	uxtb	r3, r1
 800595c:	2b0a      	cmp	r3, #10
 800595e:	d103      	bne.n	8005968 <__sfputc_r+0x20>
 8005960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005964:	f7ff bc9c 	b.w	80052a0 <__swbuf_r>
 8005968:	6813      	ldr	r3, [r2, #0]
 800596a:	1c58      	adds	r0, r3, #1
 800596c:	6010      	str	r0, [r2, #0]
 800596e:	7019      	strb	r1, [r3, #0]
 8005970:	b2c8      	uxtb	r0, r1
 8005972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005976:	4770      	bx	lr

08005978 <__sfputs_r>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	4606      	mov	r6, r0
 800597c:	460f      	mov	r7, r1
 800597e:	4614      	mov	r4, r2
 8005980:	18d5      	adds	r5, r2, r3
 8005982:	42ac      	cmp	r4, r5
 8005984:	d101      	bne.n	800598a <__sfputs_r+0x12>
 8005986:	2000      	movs	r0, #0
 8005988:	e007      	b.n	800599a <__sfputs_r+0x22>
 800598a:	463a      	mov	r2, r7
 800598c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005990:	4630      	mov	r0, r6
 8005992:	f7ff ffd9 	bl	8005948 <__sfputc_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	d1f3      	bne.n	8005982 <__sfputs_r+0xa>
 800599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800599c <_vfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	b09d      	sub	sp, #116	; 0x74
 80059a2:	460c      	mov	r4, r1
 80059a4:	4617      	mov	r7, r2
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	4606      	mov	r6, r0
 80059aa:	b118      	cbz	r0, 80059b4 <_vfiprintf_r+0x18>
 80059ac:	6983      	ldr	r3, [r0, #24]
 80059ae:	b90b      	cbnz	r3, 80059b4 <_vfiprintf_r+0x18>
 80059b0:	f7ff fe28 	bl	8005604 <__sinit>
 80059b4:	4b7c      	ldr	r3, [pc, #496]	; (8005ba8 <_vfiprintf_r+0x20c>)
 80059b6:	429c      	cmp	r4, r3
 80059b8:	d157      	bne.n	8005a6a <_vfiprintf_r+0xce>
 80059ba:	6874      	ldr	r4, [r6, #4]
 80059bc:	89a3      	ldrh	r3, [r4, #12]
 80059be:	0718      	lsls	r0, r3, #28
 80059c0:	d55d      	bpl.n	8005a7e <_vfiprintf_r+0xe2>
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d05a      	beq.n	8005a7e <_vfiprintf_r+0xe2>
 80059c8:	2300      	movs	r3, #0
 80059ca:	9309      	str	r3, [sp, #36]	; 0x24
 80059cc:	2320      	movs	r3, #32
 80059ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d2:	2330      	movs	r3, #48	; 0x30
 80059d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059d8:	f04f 0b01 	mov.w	fp, #1
 80059dc:	46b8      	mov	r8, r7
 80059de:	4645      	mov	r5, r8
 80059e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d155      	bne.n	8005a94 <_vfiprintf_r+0xf8>
 80059e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80059ec:	d00b      	beq.n	8005a06 <_vfiprintf_r+0x6a>
 80059ee:	4653      	mov	r3, sl
 80059f0:	463a      	mov	r2, r7
 80059f2:	4621      	mov	r1, r4
 80059f4:	4630      	mov	r0, r6
 80059f6:	f7ff ffbf 	bl	8005978 <__sfputs_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	f000 80c4 	beq.w	8005b88 <_vfiprintf_r+0x1ec>
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	4453      	add	r3, sl
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	f898 3000 	ldrb.w	r3, [r8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80bc 	beq.w	8005b88 <_vfiprintf_r+0x1ec>
 8005a10:	2300      	movs	r3, #0
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	9304      	str	r3, [sp, #16]
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	9205      	str	r2, [sp, #20]
 8005a1c:	9306      	str	r3, [sp, #24]
 8005a1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a22:	931a      	str	r3, [sp, #104]	; 0x68
 8005a24:	2205      	movs	r2, #5
 8005a26:	7829      	ldrb	r1, [r5, #0]
 8005a28:	4860      	ldr	r0, [pc, #384]	; (8005bac <_vfiprintf_r+0x210>)
 8005a2a:	f7fa fbd1 	bl	80001d0 <memchr>
 8005a2e:	f105 0801 	add.w	r8, r5, #1
 8005a32:	9b04      	ldr	r3, [sp, #16]
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d131      	bne.n	8005a9c <_vfiprintf_r+0x100>
 8005a38:	06d9      	lsls	r1, r3, #27
 8005a3a:	bf44      	itt	mi
 8005a3c:	2220      	movmi	r2, #32
 8005a3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a42:	071a      	lsls	r2, r3, #28
 8005a44:	bf44      	itt	mi
 8005a46:	222b      	movmi	r2, #43	; 0x2b
 8005a48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a4c:	782a      	ldrb	r2, [r5, #0]
 8005a4e:	2a2a      	cmp	r2, #42	; 0x2a
 8005a50:	d02c      	beq.n	8005aac <_vfiprintf_r+0x110>
 8005a52:	9a07      	ldr	r2, [sp, #28]
 8005a54:	2100      	movs	r1, #0
 8005a56:	200a      	movs	r0, #10
 8005a58:	46a8      	mov	r8, r5
 8005a5a:	3501      	adds	r5, #1
 8005a5c:	f898 3000 	ldrb.w	r3, [r8]
 8005a60:	3b30      	subs	r3, #48	; 0x30
 8005a62:	2b09      	cmp	r3, #9
 8005a64:	d96d      	bls.n	8005b42 <_vfiprintf_r+0x1a6>
 8005a66:	b371      	cbz	r1, 8005ac6 <_vfiprintf_r+0x12a>
 8005a68:	e026      	b.n	8005ab8 <_vfiprintf_r+0x11c>
 8005a6a:	4b51      	ldr	r3, [pc, #324]	; (8005bb0 <_vfiprintf_r+0x214>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d101      	bne.n	8005a74 <_vfiprintf_r+0xd8>
 8005a70:	68b4      	ldr	r4, [r6, #8]
 8005a72:	e7a3      	b.n	80059bc <_vfiprintf_r+0x20>
 8005a74:	4b4f      	ldr	r3, [pc, #316]	; (8005bb4 <_vfiprintf_r+0x218>)
 8005a76:	429c      	cmp	r4, r3
 8005a78:	bf08      	it	eq
 8005a7a:	68f4      	ldreq	r4, [r6, #12]
 8005a7c:	e79e      	b.n	80059bc <_vfiprintf_r+0x20>
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4630      	mov	r0, r6
 8005a82:	f7ff fc5f 	bl	8005344 <__swsetup_r>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d09e      	beq.n	80059c8 <_vfiprintf_r+0x2c>
 8005a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8e:	b01d      	add	sp, #116	; 0x74
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	2b25      	cmp	r3, #37	; 0x25
 8005a96:	d0a7      	beq.n	80059e8 <_vfiprintf_r+0x4c>
 8005a98:	46a8      	mov	r8, r5
 8005a9a:	e7a0      	b.n	80059de <_vfiprintf_r+0x42>
 8005a9c:	4a43      	ldr	r2, [pc, #268]	; (8005bac <_vfiprintf_r+0x210>)
 8005a9e:	1a80      	subs	r0, r0, r2
 8005aa0:	fa0b f000 	lsl.w	r0, fp, r0
 8005aa4:	4318      	orrs	r0, r3
 8005aa6:	9004      	str	r0, [sp, #16]
 8005aa8:	4645      	mov	r5, r8
 8005aaa:	e7bb      	b.n	8005a24 <_vfiprintf_r+0x88>
 8005aac:	9a03      	ldr	r2, [sp, #12]
 8005aae:	1d11      	adds	r1, r2, #4
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	9103      	str	r1, [sp, #12]
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	db01      	blt.n	8005abc <_vfiprintf_r+0x120>
 8005ab8:	9207      	str	r2, [sp, #28]
 8005aba:	e004      	b.n	8005ac6 <_vfiprintf_r+0x12a>
 8005abc:	4252      	negs	r2, r2
 8005abe:	f043 0302 	orr.w	r3, r3, #2
 8005ac2:	9207      	str	r2, [sp, #28]
 8005ac4:	9304      	str	r3, [sp, #16]
 8005ac6:	f898 3000 	ldrb.w	r3, [r8]
 8005aca:	2b2e      	cmp	r3, #46	; 0x2e
 8005acc:	d110      	bne.n	8005af0 <_vfiprintf_r+0x154>
 8005ace:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ad4:	f108 0101 	add.w	r1, r8, #1
 8005ad8:	d137      	bne.n	8005b4a <_vfiprintf_r+0x1ae>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	1d1a      	adds	r2, r3, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	9203      	str	r2, [sp, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bfb8      	it	lt
 8005ae6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aea:	f108 0802 	add.w	r8, r8, #2
 8005aee:	9305      	str	r3, [sp, #20]
 8005af0:	4d31      	ldr	r5, [pc, #196]	; (8005bb8 <_vfiprintf_r+0x21c>)
 8005af2:	f898 1000 	ldrb.w	r1, [r8]
 8005af6:	2203      	movs	r2, #3
 8005af8:	4628      	mov	r0, r5
 8005afa:	f7fa fb69 	bl	80001d0 <memchr>
 8005afe:	b140      	cbz	r0, 8005b12 <_vfiprintf_r+0x176>
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	1b40      	subs	r0, r0, r5
 8005b04:	fa03 f000 	lsl.w	r0, r3, r0
 8005b08:	9b04      	ldr	r3, [sp, #16]
 8005b0a:	4303      	orrs	r3, r0
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f108 0801 	add.w	r8, r8, #1
 8005b12:	f898 1000 	ldrb.w	r1, [r8]
 8005b16:	4829      	ldr	r0, [pc, #164]	; (8005bbc <_vfiprintf_r+0x220>)
 8005b18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b1c:	2206      	movs	r2, #6
 8005b1e:	f108 0701 	add.w	r7, r8, #1
 8005b22:	f7fa fb55 	bl	80001d0 <memchr>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d034      	beq.n	8005b94 <_vfiprintf_r+0x1f8>
 8005b2a:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <_vfiprintf_r+0x224>)
 8005b2c:	bb03      	cbnz	r3, 8005b70 <_vfiprintf_r+0x1d4>
 8005b2e:	9b03      	ldr	r3, [sp, #12]
 8005b30:	3307      	adds	r3, #7
 8005b32:	f023 0307 	bic.w	r3, r3, #7
 8005b36:	3308      	adds	r3, #8
 8005b38:	9303      	str	r3, [sp, #12]
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	444b      	add	r3, r9
 8005b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b40:	e74c      	b.n	80059dc <_vfiprintf_r+0x40>
 8005b42:	fb00 3202 	mla	r2, r0, r2, r3
 8005b46:	2101      	movs	r1, #1
 8005b48:	e786      	b.n	8005a58 <_vfiprintf_r+0xbc>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	9305      	str	r3, [sp, #20]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	250a      	movs	r5, #10
 8005b52:	4688      	mov	r8, r1
 8005b54:	3101      	adds	r1, #1
 8005b56:	f898 2000 	ldrb.w	r2, [r8]
 8005b5a:	3a30      	subs	r2, #48	; 0x30
 8005b5c:	2a09      	cmp	r2, #9
 8005b5e:	d903      	bls.n	8005b68 <_vfiprintf_r+0x1cc>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0c5      	beq.n	8005af0 <_vfiprintf_r+0x154>
 8005b64:	9005      	str	r0, [sp, #20]
 8005b66:	e7c3      	b.n	8005af0 <_vfiprintf_r+0x154>
 8005b68:	fb05 2000 	mla	r0, r5, r0, r2
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e7f0      	b.n	8005b52 <_vfiprintf_r+0x1b6>
 8005b70:	ab03      	add	r3, sp, #12
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	4622      	mov	r2, r4
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <_vfiprintf_r+0x228>)
 8005b78:	a904      	add	r1, sp, #16
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f3af 8000 	nop.w
 8005b80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b84:	4681      	mov	r9, r0
 8005b86:	d1d8      	bne.n	8005b3a <_vfiprintf_r+0x19e>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	065b      	lsls	r3, r3, #25
 8005b8c:	f53f af7d 	bmi.w	8005a8a <_vfiprintf_r+0xee>
 8005b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b92:	e77c      	b.n	8005a8e <_vfiprintf_r+0xf2>
 8005b94:	ab03      	add	r3, sp, #12
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	4622      	mov	r2, r4
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <_vfiprintf_r+0x228>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f000 f888 	bl	8005cb4 <_printf_i>
 8005ba4:	e7ec      	b.n	8005b80 <_vfiprintf_r+0x1e4>
 8005ba6:	bf00      	nop
 8005ba8:	080063f4 	.word	0x080063f4
 8005bac:	08006438 	.word	0x08006438
 8005bb0:	08006414 	.word	0x08006414
 8005bb4:	080063d4 	.word	0x080063d4
 8005bb8:	0800643e 	.word	0x0800643e
 8005bbc:	08006442 	.word	0x08006442
 8005bc0:	00000000 	.word	0x00000000
 8005bc4:	08005979 	.word	0x08005979

08005bc8 <_printf_common>:
 8005bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	4691      	mov	r9, r2
 8005bce:	461f      	mov	r7, r3
 8005bd0:	688a      	ldr	r2, [r1, #8]
 8005bd2:	690b      	ldr	r3, [r1, #16]
 8005bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bfb8      	it	lt
 8005bdc:	4613      	movlt	r3, r2
 8005bde:	f8c9 3000 	str.w	r3, [r9]
 8005be2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005be6:	4606      	mov	r6, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	b112      	cbz	r2, 8005bf2 <_printf_common+0x2a>
 8005bec:	3301      	adds	r3, #1
 8005bee:	f8c9 3000 	str.w	r3, [r9]
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	0699      	lsls	r1, r3, #26
 8005bf6:	bf42      	ittt	mi
 8005bf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bfc:	3302      	addmi	r3, #2
 8005bfe:	f8c9 3000 	strmi.w	r3, [r9]
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	f015 0506 	ands.w	r5, r5, #6
 8005c08:	d107      	bne.n	8005c1a <_printf_common+0x52>
 8005c0a:	f104 0a19 	add.w	sl, r4, #25
 8005c0e:	68e3      	ldr	r3, [r4, #12]
 8005c10:	f8d9 2000 	ldr.w	r2, [r9]
 8005c14:	1a9b      	subs	r3, r3, r2
 8005c16:	429d      	cmp	r5, r3
 8005c18:	db29      	blt.n	8005c6e <_printf_common+0xa6>
 8005c1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	3300      	adds	r3, #0
 8005c22:	bf18      	it	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	0692      	lsls	r2, r2, #26
 8005c28:	d42e      	bmi.n	8005c88 <_printf_common+0xc0>
 8005c2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2e:	4639      	mov	r1, r7
 8005c30:	4630      	mov	r0, r6
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d021      	beq.n	8005c7c <_printf_common+0xb4>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	68e5      	ldr	r5, [r4, #12]
 8005c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c40:	f003 0306 	and.w	r3, r3, #6
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	bf08      	it	eq
 8005c48:	1aad      	subeq	r5, r5, r2
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	6922      	ldr	r2, [r4, #16]
 8005c4e:	bf0c      	ite	eq
 8005c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c54:	2500      	movne	r5, #0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	bfc4      	itt	gt
 8005c5a:	1a9b      	subgt	r3, r3, r2
 8005c5c:	18ed      	addgt	r5, r5, r3
 8005c5e:	f04f 0900 	mov.w	r9, #0
 8005c62:	341a      	adds	r4, #26
 8005c64:	454d      	cmp	r5, r9
 8005c66:	d11b      	bne.n	8005ca0 <_printf_common+0xd8>
 8005c68:	2000      	movs	r0, #0
 8005c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6e:	2301      	movs	r3, #1
 8005c70:	4652      	mov	r2, sl
 8005c72:	4639      	mov	r1, r7
 8005c74:	4630      	mov	r0, r6
 8005c76:	47c0      	blx	r8
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d103      	bne.n	8005c84 <_printf_common+0xbc>
 8005c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c84:	3501      	adds	r5, #1
 8005c86:	e7c2      	b.n	8005c0e <_printf_common+0x46>
 8005c88:	18e1      	adds	r1, r4, r3
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	2030      	movs	r0, #48	; 0x30
 8005c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c92:	4422      	add	r2, r4
 8005c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	e7c4      	b.n	8005c2a <_printf_common+0x62>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	4639      	mov	r1, r7
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	47c0      	blx	r8
 8005caa:	3001      	adds	r0, #1
 8005cac:	d0e6      	beq.n	8005c7c <_printf_common+0xb4>
 8005cae:	f109 0901 	add.w	r9, r9, #1
 8005cb2:	e7d7      	b.n	8005c64 <_printf_common+0x9c>

08005cb4 <_printf_i>:
 8005cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cb8:	4617      	mov	r7, r2
 8005cba:	7e0a      	ldrb	r2, [r1, #24]
 8005cbc:	b085      	sub	sp, #20
 8005cbe:	2a6e      	cmp	r2, #110	; 0x6e
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cc8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005ccc:	f000 80bc 	beq.w	8005e48 <_printf_i+0x194>
 8005cd0:	d81a      	bhi.n	8005d08 <_printf_i+0x54>
 8005cd2:	2a63      	cmp	r2, #99	; 0x63
 8005cd4:	d02e      	beq.n	8005d34 <_printf_i+0x80>
 8005cd6:	d80a      	bhi.n	8005cee <_printf_i+0x3a>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	f000 80c8 	beq.w	8005e6e <_printf_i+0x1ba>
 8005cde:	2a58      	cmp	r2, #88	; 0x58
 8005ce0:	f000 808a 	beq.w	8005df8 <_printf_i+0x144>
 8005ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005cec:	e02a      	b.n	8005d44 <_printf_i+0x90>
 8005cee:	2a64      	cmp	r2, #100	; 0x64
 8005cf0:	d001      	beq.n	8005cf6 <_printf_i+0x42>
 8005cf2:	2a69      	cmp	r2, #105	; 0x69
 8005cf4:	d1f6      	bne.n	8005ce4 <_printf_i+0x30>
 8005cf6:	6821      	ldr	r1, [r4, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005cfe:	d023      	beq.n	8005d48 <_printf_i+0x94>
 8005d00:	1d11      	adds	r1, r2, #4
 8005d02:	6019      	str	r1, [r3, #0]
 8005d04:	6813      	ldr	r3, [r2, #0]
 8005d06:	e027      	b.n	8005d58 <_printf_i+0xa4>
 8005d08:	2a73      	cmp	r2, #115	; 0x73
 8005d0a:	f000 80b4 	beq.w	8005e76 <_printf_i+0x1c2>
 8005d0e:	d808      	bhi.n	8005d22 <_printf_i+0x6e>
 8005d10:	2a6f      	cmp	r2, #111	; 0x6f
 8005d12:	d02a      	beq.n	8005d6a <_printf_i+0xb6>
 8005d14:	2a70      	cmp	r2, #112	; 0x70
 8005d16:	d1e5      	bne.n	8005ce4 <_printf_i+0x30>
 8005d18:	680a      	ldr	r2, [r1, #0]
 8005d1a:	f042 0220 	orr.w	r2, r2, #32
 8005d1e:	600a      	str	r2, [r1, #0]
 8005d20:	e003      	b.n	8005d2a <_printf_i+0x76>
 8005d22:	2a75      	cmp	r2, #117	; 0x75
 8005d24:	d021      	beq.n	8005d6a <_printf_i+0xb6>
 8005d26:	2a78      	cmp	r2, #120	; 0x78
 8005d28:	d1dc      	bne.n	8005ce4 <_printf_i+0x30>
 8005d2a:	2278      	movs	r2, #120	; 0x78
 8005d2c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8005d30:	496e      	ldr	r1, [pc, #440]	; (8005eec <_printf_i+0x238>)
 8005d32:	e064      	b.n	8005dfe <_printf_i+0x14a>
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005d3a:	1d11      	adds	r1, r2, #4
 8005d3c:	6019      	str	r1, [r3, #0]
 8005d3e:	6813      	ldr	r3, [r2, #0]
 8005d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0a3      	b.n	8005e90 <_printf_i+0x1dc>
 8005d48:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005d4c:	f102 0104 	add.w	r1, r2, #4
 8005d50:	6019      	str	r1, [r3, #0]
 8005d52:	d0d7      	beq.n	8005d04 <_printf_i+0x50>
 8005d54:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	da03      	bge.n	8005d64 <_printf_i+0xb0>
 8005d5c:	222d      	movs	r2, #45	; 0x2d
 8005d5e:	425b      	negs	r3, r3
 8005d60:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d64:	4962      	ldr	r1, [pc, #392]	; (8005ef0 <_printf_i+0x23c>)
 8005d66:	220a      	movs	r2, #10
 8005d68:	e017      	b.n	8005d9a <_printf_i+0xe6>
 8005d6a:	6820      	ldr	r0, [r4, #0]
 8005d6c:	6819      	ldr	r1, [r3, #0]
 8005d6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005d72:	d003      	beq.n	8005d7c <_printf_i+0xc8>
 8005d74:	1d08      	adds	r0, r1, #4
 8005d76:	6018      	str	r0, [r3, #0]
 8005d78:	680b      	ldr	r3, [r1, #0]
 8005d7a:	e006      	b.n	8005d8a <_printf_i+0xd6>
 8005d7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d80:	f101 0004 	add.w	r0, r1, #4
 8005d84:	6018      	str	r0, [r3, #0]
 8005d86:	d0f7      	beq.n	8005d78 <_printf_i+0xc4>
 8005d88:	880b      	ldrh	r3, [r1, #0]
 8005d8a:	4959      	ldr	r1, [pc, #356]	; (8005ef0 <_printf_i+0x23c>)
 8005d8c:	2a6f      	cmp	r2, #111	; 0x6f
 8005d8e:	bf14      	ite	ne
 8005d90:	220a      	movne	r2, #10
 8005d92:	2208      	moveq	r2, #8
 8005d94:	2000      	movs	r0, #0
 8005d96:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8005d9a:	6865      	ldr	r5, [r4, #4]
 8005d9c:	60a5      	str	r5, [r4, #8]
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f2c0 809c 	blt.w	8005edc <_printf_i+0x228>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	f020 0004 	bic.w	r0, r0, #4
 8005daa:	6020      	str	r0, [r4, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d13f      	bne.n	8005e30 <_printf_i+0x17c>
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	f040 8095 	bne.w	8005ee0 <_printf_i+0x22c>
 8005db6:	4675      	mov	r5, lr
 8005db8:	2a08      	cmp	r2, #8
 8005dba:	d10b      	bne.n	8005dd4 <_printf_i+0x120>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	07da      	lsls	r2, r3, #31
 8005dc0:	d508      	bpl.n	8005dd4 <_printf_i+0x120>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	6862      	ldr	r2, [r4, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bfde      	ittt	le
 8005dca:	2330      	movle	r3, #48	; 0x30
 8005dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005dd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005dd4:	ebae 0305 	sub.w	r3, lr, r5
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	f8cd 8000 	str.w	r8, [sp]
 8005dde:	463b      	mov	r3, r7
 8005de0:	aa03      	add	r2, sp, #12
 8005de2:	4621      	mov	r1, r4
 8005de4:	4630      	mov	r0, r6
 8005de6:	f7ff feef 	bl	8005bc8 <_printf_common>
 8005dea:	3001      	adds	r0, #1
 8005dec:	d155      	bne.n	8005e9a <_printf_i+0x1e6>
 8005dee:	f04f 30ff 	mov.w	r0, #4294967295
 8005df2:	b005      	add	sp, #20
 8005df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005df8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005dfc:	493c      	ldr	r1, [pc, #240]	; (8005ef0 <_printf_i+0x23c>)
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e06:	f100 0504 	add.w	r5, r0, #4
 8005e0a:	601d      	str	r5, [r3, #0]
 8005e0c:	d001      	beq.n	8005e12 <_printf_i+0x15e>
 8005e0e:	6803      	ldr	r3, [r0, #0]
 8005e10:	e002      	b.n	8005e18 <_printf_i+0x164>
 8005e12:	0655      	lsls	r5, r2, #25
 8005e14:	d5fb      	bpl.n	8005e0e <_printf_i+0x15a>
 8005e16:	8803      	ldrh	r3, [r0, #0]
 8005e18:	07d0      	lsls	r0, r2, #31
 8005e1a:	bf44      	itt	mi
 8005e1c:	f042 0220 	orrmi.w	r2, r2, #32
 8005e20:	6022      	strmi	r2, [r4, #0]
 8005e22:	b91b      	cbnz	r3, 8005e2c <_printf_i+0x178>
 8005e24:	6822      	ldr	r2, [r4, #0]
 8005e26:	f022 0220 	bic.w	r2, r2, #32
 8005e2a:	6022      	str	r2, [r4, #0]
 8005e2c:	2210      	movs	r2, #16
 8005e2e:	e7b1      	b.n	8005d94 <_printf_i+0xe0>
 8005e30:	4675      	mov	r5, lr
 8005e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e36:	fb02 3310 	mls	r3, r2, r0, r3
 8005e3a:	5ccb      	ldrb	r3, [r1, r3]
 8005e3c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e40:	4603      	mov	r3, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d1f5      	bne.n	8005e32 <_printf_i+0x17e>
 8005e46:	e7b7      	b.n	8005db8 <_printf_i+0x104>
 8005e48:	6808      	ldr	r0, [r1, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6949      	ldr	r1, [r1, #20]
 8005e4e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005e52:	d004      	beq.n	8005e5e <_printf_i+0x1aa>
 8005e54:	1d10      	adds	r0, r2, #4
 8005e56:	6018      	str	r0, [r3, #0]
 8005e58:	6813      	ldr	r3, [r2, #0]
 8005e5a:	6019      	str	r1, [r3, #0]
 8005e5c:	e007      	b.n	8005e6e <_printf_i+0x1ba>
 8005e5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e62:	f102 0004 	add.w	r0, r2, #4
 8005e66:	6018      	str	r0, [r3, #0]
 8005e68:	6813      	ldr	r3, [r2, #0]
 8005e6a:	d0f6      	beq.n	8005e5a <_printf_i+0x1a6>
 8005e6c:	8019      	strh	r1, [r3, #0]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	6123      	str	r3, [r4, #16]
 8005e72:	4675      	mov	r5, lr
 8005e74:	e7b1      	b.n	8005dda <_printf_i+0x126>
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	1d11      	adds	r1, r2, #4
 8005e7a:	6019      	str	r1, [r3, #0]
 8005e7c:	6815      	ldr	r5, [r2, #0]
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	2100      	movs	r1, #0
 8005e82:	4628      	mov	r0, r5
 8005e84:	f7fa f9a4 	bl	80001d0 <memchr>
 8005e88:	b108      	cbz	r0, 8005e8e <_printf_i+0x1da>
 8005e8a:	1b40      	subs	r0, r0, r5
 8005e8c:	6060      	str	r0, [r4, #4]
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	6123      	str	r3, [r4, #16]
 8005e92:	2300      	movs	r3, #0
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e98:	e79f      	b.n	8005dda <_printf_i+0x126>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	47c0      	blx	r8
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d0a2      	beq.n	8005dee <_printf_i+0x13a>
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	079b      	lsls	r3, r3, #30
 8005eac:	d507      	bpl.n	8005ebe <_printf_i+0x20a>
 8005eae:	2500      	movs	r5, #0
 8005eb0:	f104 0919 	add.w	r9, r4, #25
 8005eb4:	68e3      	ldr	r3, [r4, #12]
 8005eb6:	9a03      	ldr	r2, [sp, #12]
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	429d      	cmp	r5, r3
 8005ebc:	db05      	blt.n	8005eca <_printf_i+0x216>
 8005ebe:	68e0      	ldr	r0, [r4, #12]
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	bfb8      	it	lt
 8005ec6:	4618      	movlt	r0, r3
 8005ec8:	e793      	b.n	8005df2 <_printf_i+0x13e>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	464a      	mov	r2, r9
 8005ece:	4639      	mov	r1, r7
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	47c0      	blx	r8
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d08a      	beq.n	8005dee <_printf_i+0x13a>
 8005ed8:	3501      	adds	r5, #1
 8005eda:	e7eb      	b.n	8005eb4 <_printf_i+0x200>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1a7      	bne.n	8005e30 <_printf_i+0x17c>
 8005ee0:	780b      	ldrb	r3, [r1, #0]
 8005ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eea:	e765      	b.n	8005db8 <_printf_i+0x104>
 8005eec:	0800645a 	.word	0x0800645a
 8005ef0:	08006449 	.word	0x08006449

08005ef4 <_sbrk_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4c06      	ldr	r4, [pc, #24]	; (8005f10 <_sbrk_r+0x1c>)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4605      	mov	r5, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	f000 f9e6 	bl	80062d0 <_sbrk>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_sbrk_r+0x1a>
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_sbrk_r+0x1a>
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	200003a4 	.word	0x200003a4

08005f14 <__sread>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	460c      	mov	r4, r1
 8005f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f1c:	f000 f896 	bl	800604c <_read_r>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	bfab      	itete	ge
 8005f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f26:	89a3      	ldrhlt	r3, [r4, #12]
 8005f28:	181b      	addge	r3, r3, r0
 8005f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f2e:	bfac      	ite	ge
 8005f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f32:	81a3      	strhlt	r3, [r4, #12]
 8005f34:	bd10      	pop	{r4, pc}

08005f36 <__swrite>:
 8005f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	898b      	ldrh	r3, [r1, #12]
 8005f3e:	05db      	lsls	r3, r3, #23
 8005f40:	4605      	mov	r5, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	4616      	mov	r6, r2
 8005f46:	d505      	bpl.n	8005f54 <__swrite+0x1e>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f50:	f000 f868 	bl	8006024 <_lseek_r>
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f5e:	81a3      	strh	r3, [r4, #12]
 8005f60:	4632      	mov	r2, r6
 8005f62:	463b      	mov	r3, r7
 8005f64:	4628      	mov	r0, r5
 8005f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6a:	f000 b817 	b.w	8005f9c <_write_r>

08005f6e <__sseek>:
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	460c      	mov	r4, r1
 8005f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f76:	f000 f855 	bl	8006024 <_lseek_r>
 8005f7a:	1c43      	adds	r3, r0, #1
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	bf15      	itete	ne
 8005f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f8a:	81a3      	strheq	r3, [r4, #12]
 8005f8c:	bf18      	it	ne
 8005f8e:	81a3      	strhne	r3, [r4, #12]
 8005f90:	bd10      	pop	{r4, pc}

08005f92 <__sclose>:
 8005f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f96:	f000 b813 	b.w	8005fc0 <_close_r>
	...

08005f9c <_write_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4c07      	ldr	r4, [pc, #28]	; (8005fbc <_write_r+0x20>)
 8005fa0:	4605      	mov	r5, r0
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	6022      	str	r2, [r4, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7ff f8fa 	bl	80051a4 <_write>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_write_r+0x1e>
 8005fb4:	6823      	ldr	r3, [r4, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_write_r+0x1e>
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	200003a4 	.word	0x200003a4

08005fc0 <_close_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4c06      	ldr	r4, [pc, #24]	; (8005fdc <_close_r+0x1c>)
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	f000 f958 	bl	8006280 <_close>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_close_r+0x1a>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_close_r+0x1a>
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200003a4 	.word	0x200003a4

08005fe0 <_fstat_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4c07      	ldr	r4, [pc, #28]	; (8006000 <_fstat_r+0x20>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	f000 f94f 	bl	8006290 <_fstat>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d102      	bne.n	8005ffc <_fstat_r+0x1c>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	b103      	cbz	r3, 8005ffc <_fstat_r+0x1c>
 8005ffa:	602b      	str	r3, [r5, #0]
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	bf00      	nop
 8006000:	200003a4 	.word	0x200003a4

08006004 <_isatty_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4c06      	ldr	r4, [pc, #24]	; (8006020 <_isatty_r+0x1c>)
 8006008:	2300      	movs	r3, #0
 800600a:	4605      	mov	r5, r0
 800600c:	4608      	mov	r0, r1
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	f000 f946 	bl	80062a0 <_isatty>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_isatty_r+0x1a>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	b103      	cbz	r3, 800601e <_isatty_r+0x1a>
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	200003a4 	.word	0x200003a4

08006024 <_lseek_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4c07      	ldr	r4, [pc, #28]	; (8006044 <_lseek_r+0x20>)
 8006028:	4605      	mov	r5, r0
 800602a:	4608      	mov	r0, r1
 800602c:	4611      	mov	r1, r2
 800602e:	2200      	movs	r2, #0
 8006030:	6022      	str	r2, [r4, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f000 f93c 	bl	80062b0 <_lseek>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_lseek_r+0x1e>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	b103      	cbz	r3, 8006042 <_lseek_r+0x1e>
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	200003a4 	.word	0x200003a4

08006048 <__malloc_lock>:
 8006048:	4770      	bx	lr

0800604a <__malloc_unlock>:
 800604a:	4770      	bx	lr

0800604c <_read_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4c07      	ldr	r4, [pc, #28]	; (800606c <_read_r+0x20>)
 8006050:	4605      	mov	r5, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	6022      	str	r2, [r4, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f000 f930 	bl	80062c0 <_read>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_read_r+0x1e>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	b103      	cbz	r3, 800606a <_read_r+0x1e>
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	200003a4 	.word	0x200003a4

08006070 <sqrt>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	b08b      	sub	sp, #44	; 0x2c
 8006076:	4604      	mov	r4, r0
 8006078:	460d      	mov	r5, r1
 800607a:	f000 f84d 	bl	8006118 <__ieee754_sqrt>
 800607e:	4b24      	ldr	r3, [pc, #144]	; (8006110 <sqrt+0xa0>)
 8006080:	f993 a000 	ldrsb.w	sl, [r3]
 8006084:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006088:	4680      	mov	r8, r0
 800608a:	4689      	mov	r9, r1
 800608c:	d02b      	beq.n	80060e6 <sqrt+0x76>
 800608e:	4622      	mov	r2, r4
 8006090:	462b      	mov	r3, r5
 8006092:	4620      	mov	r0, r4
 8006094:	4629      	mov	r1, r5
 8006096:	f7fa fd3d 	bl	8000b14 <__aeabi_dcmpun>
 800609a:	4683      	mov	fp, r0
 800609c:	bb18      	cbnz	r0, 80060e6 <sqrt+0x76>
 800609e:	2600      	movs	r6, #0
 80060a0:	2700      	movs	r7, #0
 80060a2:	4632      	mov	r2, r6
 80060a4:	463b      	mov	r3, r7
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fd0b 	bl	8000ac4 <__aeabi_dcmplt>
 80060ae:	b1d0      	cbz	r0, 80060e6 <sqrt+0x76>
 80060b0:	2301      	movs	r3, #1
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	4b17      	ldr	r3, [pc, #92]	; (8006114 <sqrt+0xa4>)
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	f8cd b020 	str.w	fp, [sp, #32]
 80060bc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80060c0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80060c4:	f1ba 0f00 	cmp.w	sl, #0
 80060c8:	d112      	bne.n	80060f0 <sqrt+0x80>
 80060ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80060ce:	4668      	mov	r0, sp
 80060d0:	f000 f8ce 	bl	8006270 <matherr>
 80060d4:	b1b8      	cbz	r0, 8006106 <sqrt+0x96>
 80060d6:	9b08      	ldr	r3, [sp, #32]
 80060d8:	b11b      	cbz	r3, 80060e2 <sqrt+0x72>
 80060da:	f000 f8cb 	bl	8006274 <__errno>
 80060de:	9b08      	ldr	r3, [sp, #32]
 80060e0:	6003      	str	r3, [r0, #0]
 80060e2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80060e6:	4640      	mov	r0, r8
 80060e8:	4649      	mov	r1, r9
 80060ea:	b00b      	add	sp, #44	; 0x2c
 80060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f0:	4632      	mov	r2, r6
 80060f2:	463b      	mov	r3, r7
 80060f4:	4630      	mov	r0, r6
 80060f6:	4639      	mov	r1, r7
 80060f8:	f7fa fb9c 	bl	8000834 <__aeabi_ddiv>
 80060fc:	f1ba 0f02 	cmp.w	sl, #2
 8006100:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006104:	d1e3      	bne.n	80060ce <sqrt+0x5e>
 8006106:	f000 f8b5 	bl	8006274 <__errno>
 800610a:	2321      	movs	r3, #33	; 0x21
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	e7e2      	b.n	80060d6 <sqrt+0x66>
 8006110:	2000007c 	.word	0x2000007c
 8006114:	0800646b 	.word	0x0800646b

08006118 <__ieee754_sqrt>:
 8006118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611c:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800626c <__ieee754_sqrt+0x154>
 8006120:	ea3e 0e01 	bics.w	lr, lr, r1
 8006124:	4606      	mov	r6, r0
 8006126:	460f      	mov	r7, r1
 8006128:	4605      	mov	r5, r0
 800612a:	460a      	mov	r2, r1
 800612c:	460c      	mov	r4, r1
 800612e:	4603      	mov	r3, r0
 8006130:	d10f      	bne.n	8006152 <__ieee754_sqrt+0x3a>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	f7fa fa53 	bl	80005e0 <__aeabi_dmul>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa f89b 	bl	800027c <__adddf3>
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	4630      	mov	r0, r6
 800614c:	4639      	mov	r1, r7
 800614e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006152:	2900      	cmp	r1, #0
 8006154:	dc0e      	bgt.n	8006174 <__ieee754_sqrt+0x5c>
 8006156:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800615a:	ea5e 0505 	orrs.w	r5, lr, r5
 800615e:	d0f4      	beq.n	800614a <__ieee754_sqrt+0x32>
 8006160:	b141      	cbz	r1, 8006174 <__ieee754_sqrt+0x5c>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	f7fa f887 	bl	8000278 <__aeabi_dsub>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	f7fa fb61 	bl	8000834 <__aeabi_ddiv>
 8006172:	e7e8      	b.n	8006146 <__ieee754_sqrt+0x2e>
 8006174:	1512      	asrs	r2, r2, #20
 8006176:	d10c      	bne.n	8006192 <__ieee754_sqrt+0x7a>
 8006178:	2c00      	cmp	r4, #0
 800617a:	d06d      	beq.n	8006258 <__ieee754_sqrt+0x140>
 800617c:	2100      	movs	r1, #0
 800617e:	02e5      	lsls	r5, r4, #11
 8006180:	d56e      	bpl.n	8006260 <__ieee754_sqrt+0x148>
 8006182:	1e48      	subs	r0, r1, #1
 8006184:	1a12      	subs	r2, r2, r0
 8006186:	f1c1 0020 	rsb	r0, r1, #32
 800618a:	fa23 f000 	lsr.w	r0, r3, r0
 800618e:	4304      	orrs	r4, r0
 8006190:	408b      	lsls	r3, r1
 8006192:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006196:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800619a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800619e:	07d4      	lsls	r4, r2, #31
 80061a0:	bf42      	ittt	mi
 80061a2:	0049      	lslmi	r1, r1, #1
 80061a4:	eb01 71d3 	addmi.w	r1, r1, r3, lsr #31
 80061a8:	005b      	lslmi	r3, r3, #1
 80061aa:	1054      	asrs	r4, r2, #1
 80061ac:	2500      	movs	r5, #0
 80061ae:	eb01 72d3 	add.w	r2, r1, r3, lsr #31
 80061b2:	4411      	add	r1, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	2216      	movs	r2, #22
 80061b8:	4628      	mov	r0, r5
 80061ba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80061be:	1987      	adds	r7, r0, r6
 80061c0:	428f      	cmp	r7, r1
 80061c2:	bfde      	ittt	le
 80061c4:	1bc9      	suble	r1, r1, r7
 80061c6:	19b8      	addle	r0, r7, r6
 80061c8:	19ad      	addle	r5, r5, r6
 80061ca:	0049      	lsls	r1, r1, #1
 80061cc:	3a01      	subs	r2, #1
 80061ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80061d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80061d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80061da:	d1f0      	bne.n	80061be <__ieee754_sqrt+0xa6>
 80061dc:	f04f 0e20 	mov.w	lr, #32
 80061e0:	4694      	mov	ip, r2
 80061e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80061e6:	4281      	cmp	r1, r0
 80061e8:	eb06 070c 	add.w	r7, r6, ip
 80061ec:	dc02      	bgt.n	80061f4 <__ieee754_sqrt+0xdc>
 80061ee:	d112      	bne.n	8006216 <__ieee754_sqrt+0xfe>
 80061f0:	429f      	cmp	r7, r3
 80061f2:	d810      	bhi.n	8006216 <__ieee754_sqrt+0xfe>
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	eb07 0c06 	add.w	ip, r7, r6
 80061fa:	da34      	bge.n	8006266 <__ieee754_sqrt+0x14e>
 80061fc:	f1bc 0f00 	cmp.w	ip, #0
 8006200:	db31      	blt.n	8006266 <__ieee754_sqrt+0x14e>
 8006202:	f100 0801 	add.w	r8, r0, #1
 8006206:	1a09      	subs	r1, r1, r0
 8006208:	429f      	cmp	r7, r3
 800620a:	bf88      	it	hi
 800620c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006210:	1bdb      	subs	r3, r3, r7
 8006212:	4432      	add	r2, r6
 8006214:	4640      	mov	r0, r8
 8006216:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 800621a:	f1be 0e01 	subs.w	lr, lr, #1
 800621e:	4439      	add	r1, r7
 8006220:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006224:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006228:	d1dd      	bne.n	80061e6 <__ieee754_sqrt+0xce>
 800622a:	430b      	orrs	r3, r1
 800622c:	d006      	beq.n	800623c <__ieee754_sqrt+0x124>
 800622e:	1c50      	adds	r0, r2, #1
 8006230:	bf13      	iteet	ne
 8006232:	3201      	addne	r2, #1
 8006234:	3501      	addeq	r5, #1
 8006236:	4672      	moveq	r2, lr
 8006238:	f022 0201 	bicne.w	r2, r2, #1
 800623c:	106b      	asrs	r3, r5, #1
 800623e:	0852      	lsrs	r2, r2, #1
 8006240:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006244:	07e9      	lsls	r1, r5, #31
 8006246:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800624a:	bf48      	it	mi
 800624c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006250:	eb03 5704 	add.w	r7, r3, r4, lsl #20
 8006254:	4616      	mov	r6, r2
 8006256:	e778      	b.n	800614a <__ieee754_sqrt+0x32>
 8006258:	0adc      	lsrs	r4, r3, #11
 800625a:	3a15      	subs	r2, #21
 800625c:	055b      	lsls	r3, r3, #21
 800625e:	e78b      	b.n	8006178 <__ieee754_sqrt+0x60>
 8006260:	0064      	lsls	r4, r4, #1
 8006262:	3101      	adds	r1, #1
 8006264:	e78b      	b.n	800617e <__ieee754_sqrt+0x66>
 8006266:	4680      	mov	r8, r0
 8006268:	e7cd      	b.n	8006206 <__ieee754_sqrt+0xee>
 800626a:	bf00      	nop
 800626c:	7ff00000 	.word	0x7ff00000

08006270 <matherr>:
 8006270:	2000      	movs	r0, #0
 8006272:	4770      	bx	lr

08006274 <__errno>:
 8006274:	4b01      	ldr	r3, [pc, #4]	; (800627c <__errno+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000018 	.word	0x20000018

08006280 <_close>:
 8006280:	4b02      	ldr	r3, [pc, #8]	; (800628c <_close+0xc>)
 8006282:	2258      	movs	r2, #88	; 0x58
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	4770      	bx	lr
 800628c:	200003a4 	.word	0x200003a4

08006290 <_fstat>:
 8006290:	4b02      	ldr	r3, [pc, #8]	; (800629c <_fstat+0xc>)
 8006292:	2258      	movs	r2, #88	; 0x58
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	f04f 30ff 	mov.w	r0, #4294967295
 800629a:	4770      	bx	lr
 800629c:	200003a4 	.word	0x200003a4

080062a0 <_isatty>:
 80062a0:	4b02      	ldr	r3, [pc, #8]	; (80062ac <_isatty+0xc>)
 80062a2:	2258      	movs	r2, #88	; 0x58
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	2000      	movs	r0, #0
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	200003a4 	.word	0x200003a4

080062b0 <_lseek>:
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <_lseek+0xc>)
 80062b2:	2258      	movs	r2, #88	; 0x58
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ba:	4770      	bx	lr
 80062bc:	200003a4 	.word	0x200003a4

080062c0 <_read>:
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <_read+0xc>)
 80062c2:	2258      	movs	r2, #88	; 0x58
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	4770      	bx	lr
 80062cc:	200003a4 	.word	0x200003a4

080062d0 <_sbrk>:
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <_sbrk+0x14>)
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	4602      	mov	r2, r0
 80062d6:	b909      	cbnz	r1, 80062dc <_sbrk+0xc>
 80062d8:	4903      	ldr	r1, [pc, #12]	; (80062e8 <_sbrk+0x18>)
 80062da:	6019      	str	r1, [r3, #0]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	4402      	add	r2, r0
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	4770      	bx	lr
 80062e4:	200000d8 	.word	0x200000d8
 80062e8:	200003a8 	.word	0x200003a8

080062ec <_init>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr

080062f8 <_fini>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr
